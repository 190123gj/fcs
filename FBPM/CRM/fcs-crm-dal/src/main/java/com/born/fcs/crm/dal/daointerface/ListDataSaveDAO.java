/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.crm.dal.daointerface;

// auto generated imports
import com.born.fcs.crm.dal.dataobject.ListDataSaveDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>list_data_save</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/list_data_save.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface ListDataSaveDAO {
	/**
	 *  Insert one <tt>ListDataSaveDO</tt> object to DB table <tt>list_data_save</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into list_data_save(id,data_type,description,str1,str2,str3,str4,str5,str6,str7,str8,integer1,double1,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param listDataSave
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(ListDataSaveDO listDataSave) throws DataAccessException;

	/**
	 *  Query DB table <tt>list_data_save</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id from list_data_save where (data_type = ?)</tt>
	 *
	 *	@param dataType
	 *	@return List<Long>
	 *	@throws DataAccessException
	 */	 
    public List<Long> findByAllIds(String dataType) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>list_data_save</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from list_data_save where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>list_data_save</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from list_data_save where (data_type = ?)</tt>
	 *
	 *	@param dataType
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByType(String dataType) throws DataAccessException;

	/**
	 *  Update DB table <tt>list_data_save</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update list_data_save set data_type=?, description=?, str1=?, str2=?, str3=?, str4=?, str5=?, str6=?, str7=?, str8=?, integer1=?, double1=? where (id = ?)</tt>
	 *
	 *	@param listDataSave
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(ListDataSaveDO listDataSave) throws DataAccessException;

	/**
	 *  Query DB table <tt>list_data_save</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, data_type, description, str1, str2, str3, str4, str5, str6, str7, str8, integer1, double1, raw_add_time from list_data_save</tt>
	 *
	 *	@param listDataSave
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<ListDataSaveDO>
	 *	@throws DataAccessException
	 */	 
    public List<ListDataSaveDO> findWithCondition(ListDataSaveDO listDataSave, long limitStart, long pageSize) throws DataAccessException;

	/**
	 *  Query DB table <tt>list_data_save</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from list_data_save</tt>
	 *
	 *	@param listDataSave
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long countWithCondition(ListDataSaveDO listDataSave) throws DataAccessException;

}