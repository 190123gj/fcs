/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.crm.dal.daointerface;

// auto generated imports
import com.born.fcs.crm.dal.dataobject.EvaluatingLevelDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>evaluating_level</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/evaluating_level.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface EvaluatingLevelDAO {
	/**
	 *  Insert one <tt>EvaluatingLevelDO</tt> object to DB table <tt>evaluating_level</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into evaluating_level(evalue_key,user_id,year,level,form_id,raw_add_time) values (?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param evaluatingLevel
	 *	@return String
	 *	@throws DataAccessException
	 */	 
    public String insert(EvaluatingLevelDO evaluatingLevel) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>evaluating_level</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from evaluating_level where (evalue_key = ?)</tt>
	 *
	 *	@param evalueKey
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(String evalueKey) throws DataAccessException;

	/**
	 *  Query DB table <tt>evaluating_level</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select evalue_key, user_id, year, level, form_id, raw_add_time, raw_update_time from evaluating_level</tt>
	 *
	 *	@param evaluatingLevel
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<EvaluatingLevelDO>
	 *	@throws DataAccessException
	 */	 
    public List<EvaluatingLevelDO> findWithCondition(EvaluatingLevelDO evaluatingLevel, long limitStart, long pageSize) throws DataAccessException;

}