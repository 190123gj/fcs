/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.crm.dal.daointerface;

// auto generated imports
import com.born.fcs.crm.dal.dataobject.EvaluatingFinancialSetDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>evaluating_financial_set</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/evaluating_financial_set.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface EvaluatingFinancialSetDAO {
	/**
	 *  Insert one <tt>EvaluatingFinancialSetDO</tt> object to DB table <tt>evaluating_financial_set</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into evaluating_financial_set(id,year,string1,string2,string3,string4,string5,string6,string7,string8,string9,string10,string11,string12,string13,string14,string15,string16,string17,string18,string19,string20,string21,calculating_formula,type_child,type,row_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param evaluatingFinancialSet
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(EvaluatingFinancialSetDO evaluatingFinancialSet) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>evaluating_financial_set</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from evaluating_financial_set where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException;

	/**
	 *  Update DB table <tt>evaluating_financial_set</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update evaluating_financial_set set year=?, string1=?, string2=?, string3=?, string4=?, string5=?, string6=?, string7=?, string8=?, string9=?, string10=?, string11=?, string12=?, string13=?, string14=?, string15=?, string16=?, string17=?, string18=?, string19=?, string20=?, string21=?, calculating_formula=?, type_child=?, type=?, row_add_time=? where (id = ?)</tt>
	 *
	 *	@param evaluatingFinancialSet
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(EvaluatingFinancialSetDO evaluatingFinancialSet) throws DataAccessException;

	/**
	 *  Query DB table <tt>evaluating_financial_set</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, year, string1, string2, string3, string4, string5, string6, string7, string8, string9, string10, string11, string12, string13, string14, string15, string16, string17, string18, string19, string20, string21, calculating_formula, type_child, type, row_add_time, raw_update_time from evaluating_financial_set</tt>
	 *
	 *	@param evaluatingFinancialSet
	 *	@return List<EvaluatingFinancialSetDO>
	 *	@throws DataAccessException
	 */	 
    public List<EvaluatingFinancialSetDO> findWithCondition(EvaluatingFinancialSetDO evaluatingFinancialSet) throws DataAccessException;

}