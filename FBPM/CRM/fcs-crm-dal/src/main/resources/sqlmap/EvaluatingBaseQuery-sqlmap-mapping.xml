<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>rent</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>specialmer-dalgen</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author peigen                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="specialmer">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table evaluating_base_set -->
    <resultMap id="RM-EVALUATING-BASE-SET" class="com.born.fcs.crm.dal.dataobject.EvaluatingBaseSetDO">
        <result property="id" column="id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="level1Id" column="level1_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="level1Name" column="level1_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="level1Description" column="level1_description" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="level1Score" column="level1_score" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="level2Id" column="level2_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="level2Name" column="level2_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="level2Description" column="level2_description" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="level2Score" column="level2_score" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="level3Id" column="level3_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="level3Name" column="level3_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="level3Description" column="level3_description" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="level3Score" column="level3_score" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="level4Id" column="level4_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="level4Name" column="level4_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="level4Description" column="level4_description" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="level4Score" column="level4_score" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="evaluatingContent" column="evaluating_content" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="evaluatingResult" column="evaluating_result" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="score" column="score" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="standardValue" column="standard_value" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="compareMethod" column="compare_method" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="compareMethod2" column="compare_method2" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="compareMethod3" column="compare_method3" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="compareStandardValue" column="compare_standard_value" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="evaluatingStandardValue" column="evaluating_standard_value" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="compareEvaluatingStandardValue" column="compare_evaluating_standard_value" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="calculatingFormula" column="calculating_formula" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="level" column="level" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="perentLevel" column="perent_level" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="type" column="type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="status" column="status" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="perentId" column="perent_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="childId" column="child_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="isTemporary" column="is_temporary" javaType="java.lang.String" jdbcType="ENUM"/>
        <result property="rawAddTime" column="raw_add_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="rawUpdateTime" column="raw_update_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
    </resultMap>
    
	 <resultMap id="level4_concat_result" class="com.born.fcs.crm.dal.dataobject.EvaluatingBaseQueryDO" extends="RM-EVALUATING-BASE-SET">
	         <result property="level4Names" column="level4_name_list" javaType="java.lang.String" jdbcType="VARCHAR" />
	         <result property="level4Descriptions" column="level4_description_list" javaType="java.lang.String" jdbcType="VARCHAR" />
	         <result property="level4Scores" column="level4_score_list" javaType="java.lang.String" jdbcType="VARCHAR"/>  
	 </resultMap>
	 
	 <resultMap id="level3_concat_result" class="com.born.fcs.crm.dal.dataobject.EvaluatingBaseQueryDO" extends="RM-EVALUATING-BASE-SET">
	         <result property="level3Names" column="level3_name_list" javaType="java.lang.String" jdbcType="VARCHAR" />
	         <result property="level3Descriptions" column="level3_description_list" javaType="java.lang.String" jdbcType="VARCHAR" />
	         <result property="level3Scores" column="level3_score_list" javaType="java.lang.String" jdbcType="VARCHAR"/>  
	 </resultMap>
	 
	 <!-- 城市开发类标准值部分 -->
	 <resultMap id="city_bz_cw_result" class="com.born.fcs.crm.dal.dataobject.EvaluatingBaseQueryDO" extends="RM-EVALUATING-BASE-SET">
	         <result property="compareMethods" column="compare_method_list" javaType="java.lang.String" jdbcType="VARCHAR" />
	         <result property="compareStandardValues" column="compare_standard_value_list" javaType="java.lang.String" jdbcType="VARCHAR" />
	         <result property="level3Scores" column="level3_score_list" javaType="java.lang.String" jdbcType="VARCHAR"/>  
	 </resultMap>
	 
	  <!-- 公用事业类有标准值部分 -->
	 <resultMap id="gy_bz_result" class="com.born.fcs.crm.dal.dataobject.EvaluatingBaseQueryDO" extends="RM-EVALUATING-BASE-SET">
	 		 <result property="evaluatingContents" column="evaluating_content_list" javaType="java.lang.String" jdbcType="VARCHAR" />
	         <result property="compareMethods" column="compare_method_list" javaType="java.lang.String" jdbcType="VARCHAR" />
	         <result property="compareStandardValues" column="compare_standard_value_list" javaType="java.lang.String" jdbcType="VARCHAR" />
	         <result property="level3Scores" column="level3_score_list" javaType="java.lang.String" jdbcType="VARCHAR"/>  
	 </resultMap>
  

    <select id="level4_concat" resultMap="level4_concat_result">
        SELECT  id, level1_id, level1_name, level1_description, level1_score, level2_id, level2_name, level2_description, level2_score, level3_id, level3_name, level3_description, level3_score, level4_id, level4_name, level4_description, level4_score, evaluating_content, evaluating_result, score, standard_value, compare_method, compare_method2, compare_method3, compare_standard_value, evaluating_standard_value, compare_evaluating_standard_value, calculating_formula, level, perent_level, type, status, perent_id, child_id, is_temporary, raw_add_time, raw_update_time,group_concat(level4_name separator ';') level4_name_list, group_concat(level4_description separator ';') level4_description_list,group_concat(Convert(level4_score , char) separator ';') level4_score_list  FROM evaluating_base_set 
		<dynamic prepend="where">
			<isNotEmpty property="level" prepend=" and " >
              level = #level#
           	</isNotEmpty>
           	<isNotEmpty property="status" prepend=" and ">
               status = #status#
           	</isNotEmpty>
           	 <isNotEmpty property="type" prepend=" and ">
               type = #type#
           	</isNotEmpty>                 	
		</dynamic>
		group by level3_id  order by order_num1 ASC,order_num2 ASC,order_num3 ASC,level1_id ASC ,level2_id ASC ,level3_id ASC ,id ASC
    </select>
    
    <select id="level3_concat" resultMap="level3_concat_result">
        SELECT  id, level1_id, level1_name, level1_description, level1_score, level2_id, level2_name, level2_description, level2_score, level3_id, level3_name, level3_description, level3_score, level4_id, level4_name, level4_description, level4_score, evaluating_content, evaluating_result, score, standard_value, compare_method, compare_method2, compare_method3, compare_standard_value, evaluating_standard_value, compare_evaluating_standard_value, calculating_formula, level, perent_level, type, status, perent_id, child_id, is_temporary, raw_add_time, raw_update_time,group_concat(level3_name separator ';') level3_name_list, group_concat(level3_description separator ';') level3_description_list,group_concat(Convert(level3_score , char) separator ';') level3_score_list  FROM evaluating_base_set 
		<dynamic prepend="where">
			<isNotEmpty property="level" prepend=" and " >
              level = #level#
           	</isNotEmpty>
           	<isNotEmpty property="status" prepend=" and ">
               status = #status#
           	</isNotEmpty>
           	 <isNotEmpty property="type" prepend=" and ">
               type = #type#
           	</isNotEmpty>                 	
		</dynamic>
		group by level2_id  order by order_num1 ASC,order_num2 ASC,order_num3 ASC,level1_id ASC ,level2_id ASC ,level3_id ASC ,id ASC
    </select>
	<!-- 城市开发类 标准值 部分指标 -->
    <select id="city_bz" resultMap="city_bz_cw_result">
		SELECT  id, level1_id, level1_name, compare_method,level1_description, level1_score, level2_id, level2_name, level2_description, level2_score, level3_id, level3_name, level3_description, level3_score, level4_id, level4_name, level4_description, level4_score, evaluating_content, evaluating_result, score, standard_value, compare_standard_value,compare_method2, evaluating_standard_value, compare_evaluating_standard_value, calculating_formula, LEVEL, perent_level, TYPE, STATUS, perent_id, child_id, is_temporary, raw_add_time, raw_update_time ,GROUP_CONCAT(compare_method SEPARATOR ';') compare_method_list, compare_method3, GROUP_CONCAT(compare_standard_value SEPARATOR ';') compare_standard_value_list,GROUP_CONCAT(level3_score SEPARATOR ';') level3_score_list FROM evaluating_base_set 
		<dynamic prepend="where">
			<isNotEmpty property="level" prepend=" and " >
              level = #level#
           	</isNotEmpty>
           	<isNotEmpty property="status" prepend=" and ">
               status = #status#
           	</isNotEmpty>
           	 <isNotEmpty property="type" prepend=" and ">
               type = #type#
           	</isNotEmpty>                 	
		</dynamic>
		GROUP BY level2_id  ORDER BY order_num1 ASC,order_num2 ASC,order_num3 ASC,level1_id ASC ,level2_id ASC ,level3_id ASC ,id ASC   
 	</select>
 	
 	<!-- 城市开发类 财务 部分指标 -->
    <select id="city_cw" resultMap="city_bz_cw_result">
		SELECT  id, level1_id, level1_name, compare_method,level1_description, level1_score, level2_id, level2_name, level2_description, level2_score, level3_id, level3_name, level3_description, level3_score, level4_id, level4_name, level4_description, level4_score, evaluating_content, evaluating_result, score, standard_value, compare_standard_value,compare_method2, evaluating_standard_value, compare_evaluating_standard_value, calculating_formula, LEVEL, perent_level, TYPE, STATUS, perent_id, child_id, is_temporary, raw_add_time, raw_update_time ,GROUP_CONCAT(compare_method SEPARATOR ';') compare_method_list, compare_method3, GROUP_CONCAT(compare_standard_value SEPARATOR ';') compare_standard_value_list,GROUP_CONCAT(level3_score SEPARATOR ';') level3_score_list FROM evaluating_base_set 
		<dynamic prepend="where">
			<isNotEmpty property="level" prepend=" and " >
              level = #level#
           	</isNotEmpty>
           	<isNotEmpty property="status" prepend=" and ">
               status = #status#
           	</isNotEmpty>
           	 <isNotEmpty property="type" prepend=" and ">
               type = #type#
           	</isNotEmpty>                 	
		</dynamic>
		GROUP BY level2_name  ORDER BY order_num1 ASC,order_num2 ASC,order_num3 ASC,level1_id ASC ,level2_id ASC ,level3_id ASC ,id ASC   
 	</select>
 	
 	<!-- 公用事业类有标准值 部分 -->
    <select id="gy_bz" resultMap="gy_bz_result">
		SELECT  id, level1_id, level1_name, compare_method,level1_description, level1_score, level2_id, level2_name, level2_description, level2_score, level3_id, level3_name, level3_description, level3_score, level4_id, level4_name, level4_description, level4_score, evaluating_content, evaluating_result, score, standard_value, compare_standard_value,compare_method2, evaluating_standard_value, compare_evaluating_standard_value, calculating_formula, LEVEL, perent_level, TYPE, STATUS, perent_id, child_id, is_temporary, raw_add_time, raw_update_time ,GROUP_CONCAT(compare_method SEPARATOR ';') compare_method_list, compare_method3, GROUP_CONCAT(compare_standard_value SEPARATOR ';') compare_standard_value_list,GROUP_CONCAT(level3_score SEPARATOR ';') level3_score_list,GROUP_CONCAT(evaluating_content SEPARATOR ';') evaluating_content_list FROM evaluating_base_set 
		<dynamic prepend="where">
			<isNotEmpty property="level" prepend=" and " >
              level = #level#
           	</isNotEmpty>
           	<isNotEmpty property="status" prepend=" and ">
               status = #status#
           	</isNotEmpty>
           	 <isNotEmpty property="type" prepend=" and ">
               type = #type#
           	</isNotEmpty>                 	
		</dynamic>
		GROUP BY level2_name  ORDER BY order_num1 ASC,order_num2 ASC,order_num3 ASC,level1_id ASC ,level2_id ASC ,level3_id ASC ,id ASC   
 	</select>

</sqlMap>
