<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>rent</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>specialmer-dalgen</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author peigen                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="specialmer">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table project_related_user -->
    <resultMap id="RM-PROJECT-RELATED-USER" class="com.born.fcs.crm.dal.dataobject.ProjectRelatedUserDO">
        <result property="relatedId" column="related_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="projectCode" column="project_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="userType" column="user_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="userId" column="user_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="userAccount" column="user_account" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="userName" column="user_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="userMobile" column="user_mobile" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="userEmail" column="user_email" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="deptId" column="dept_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="deptCode" column="dept_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="deptName" column="dept_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="deptPath" column="dept_path" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="deptPathName" column="dept_path_name" javaType="java.lang.String" jdbcType="TEXT"/>
        <result property="transferTime" column="transfer_time" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="transferRelatedId" column="transfer_related_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="remark" column="remark" javaType="java.lang.String" jdbcType="TEXT"/>
        <result property="isCurrent" column="is_current" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="isDel" column="is_del" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="rawAddTime" column="raw_add_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="rawUpdateTime" column="raw_update_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisProjectRelatedUserDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisProjectRelatedUserDAO.insert -->
    <insert id="MS-PROJECT-RELATED-USER-INSERT">
        INSERT /*MS-YRD-PROJECT-RELATED-USER-INSERT*/ INTO project_related_user(related_id,project_code,user_type,user_id,user_account,user_name,user_mobile,user_email,dept_id,dept_code,dept_name,dept_path,dept_path_name,transfer_time,transfer_related_id,remark,is_current,is_del,raw_add_time) values (#relatedId#, #projectCode#, #userType#, #userId#, #userAccount#, #userName#, #userMobile#, #userEmail#, #deptId#, #deptCode#, #deptName#, #deptPath#, #deptPathName#, #transferTime#, #transferRelatedId#, #remark#, #isCurrent#, #isDel#, #rawAddTime#)
    			<selectKey  resultClass ="long"  keyProperty ="relatedId" >   
		          	SELECT LAST_INSERT_ID() AS ID 
		      	</selectKey>
    </insert>

    <!-- mapped statement for IbatisProjectRelatedUserDAO.update -->
    <update id="MS-PROJECT-RELATED-USER-UPDATE">
    <![CDATA[
        update /*MS-YRD-PROJECT-RELATED-USER-UPDATE*/ project_related_user set project_code=#projectCode#, user_type=#userType#, user_id=#userId#, user_account=#userAccount#, user_name=#userName#, user_mobile=#userMobile#, user_email=#userEmail#, dept_id=#deptId#, dept_code=#deptCode#, dept_name=#deptName#, dept_path=#deptPath#, dept_path_name=#deptPathName#, transfer_time=#transferTime#, transfer_related_id=#transferRelatedId#, remark=#remark#, is_current=#isCurrent#, is_del=#isDel# where (related_id = #relatedId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisProjectRelatedUserDAO.findById -->
    <select id="MS-PROJECT-RELATED-USER-FIND-BY-ID" resultMap="RM-PROJECT-RELATED-USER">
    <![CDATA[
        select /*MS-YRD-PROJECT-RELATED-USER-FIND-BY-ID*/ * from project_related_user where (related_id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisProjectRelatedUserDAO.findByProjectCode -->
    <select id="MS-PROJECT-RELATED-USER-FIND-BY-PROJECT-CODE" resultMap="RM-PROJECT-RELATED-USER">
    <![CDATA[
        select /*MS-YRD-PROJECT-RELATED-USER-FIND-BY-PROJECT-CODE*/ * from project_related_user where (project_code = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisProjectRelatedUserDAO.findByProjectCodeAndUserType -->
    <select id="MS-PROJECT-RELATED-USER-FIND-BY-PROJECT-CODE-AND-USER-TYPE" resultMap="RM-PROJECT-RELATED-USER">
    <![CDATA[
        select /*MS-YRD-PROJECT-RELATED-USER-FIND-BY-PROJECT-CODE-AND-USER-TYPE*/ * from project_related_user where ((project_code = #projectCode#) AND (user_type = #userType#))
    ]]>
    </select>

    <!-- mapped statement for IbatisProjectRelatedUserDAO.findCurrentByProjectCodeAndUserType -->
    <select id="MS-PROJECT-RELATED-USER-FIND-CURRENT-BY-PROJECT-CODE-AND-USER-TYPE" resultMap="RM-PROJECT-RELATED-USER">
    <![CDATA[
        select /*MS-YRD-PROJECT-RELATED-USER-FIND-CURRENT-BY-PROJECT-CODE-AND-USER-TYPE*/ * from project_related_user where ((project_code = #projectCode#) AND (user_type = #userType#) AND (is_current = 'IS') AND (is_del = 'NO'))
    ]]>
    </select>

    <!-- mapped statement for IbatisProjectRelatedUserDAO.revokeFlowRelated -->
    <delete id="MS-PROJECT-RELATED-USER-REVOKE-FLOW-RELATED">
    <![CDATA[
        delete /*MS-YRD-PROJECT-RELATED-USER-REVOKE-FLOW-RELATED*/ from project_related_user where ((project_code = #projectCode#) AND (user_id = #userId#) AND (user_type = 'FLOW_RELATED'))
    ]]>
    </delete>

    <!-- mapped statement for IbatisProjectRelatedUserDAO.deleteById -->
    <delete id="MS-PROJECT-RELATED-USER-DELETE-BY-ID">
    <![CDATA[
        delete /*MS-YRD-PROJECT-RELATED-USER-DELETE-BY-ID*/ from project_related_user where (related_id = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisProjectRelatedUserDAO.deleteByProjectCode -->
    <delete id="MS-PROJECT-RELATED-USER-DELETE-BY-PROJECT-CODE">
    <![CDATA[
        delete /*MS-YRD-PROJECT-RELATED-USER-DELETE-BY-PROJECT-CODE*/ from project_related_user where (project_code = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisProjectRelatedUserDAO.deleteByProjectCodeAndUserType -->
    <delete id="MS-PROJECT-RELATED-USER-DELETE-BY-PROJECT-CODE-AND-USER-TYPE">
    <![CDATA[
        delete /*MS-YRD-PROJECT-RELATED-USER-DELETE-BY-PROJECT-CODE-AND-USER-TYPE*/ from project_related_user where ((project_code = #projectCode#) AND (user_type = #userType#))
    ]]>
    </delete>

    <!-- mapped statement for IbatisProjectRelatedUserDAO.findByCondition -->
    <select id="MS-PROJECT-RELATED-USER-FIND-BY-CONDITION" resultMap="RM-PROJECT-RELATED-USER">
        SELECT /*MS-YRD-PROJECT-RELATED-USER-FIND-BY-CONDITION*/ * from project_related_user where 1=1
	        <dynamic>
	            <isGreaterThan property="projectRelatedUser.relatedId"  compareValue="0" prepend=" and ">
	                related_id = #projectRelatedUser.relatedId#
	            </isGreaterThan>	        
	            <isGreaterThan property="projectRelatedUser.transferRelatedId"  compareValue="0" prepend=" and ">
	                transfer_related_id = #projectRelatedUser.transferRelatedId#
	            </isGreaterThan>	        
	            <isGreaterThan property="projectRelatedUser.userId"  compareValue="0" prepend=" and ">
	                user_id = #projectRelatedUser.userId#
	            </isGreaterThan>
	            <isNotEmpty property="projectRelatedUser.userAccount" prepend=" and ">
	              	user_account = #projectRelatedUser.userAccount#
	            </isNotEmpty>
	            <isNotEmpty property="projectRelatedUser.userType" prepend=" and ">
	               user_type = #projectRelatedUser.userType#
	            </isNotEmpty>	            
	            <isNotEmpty property="projectRelatedUser.isCurrent" prepend=" and ">
	               is_current = #projectRelatedUser.isCurrent#
	            </isNotEmpty>
	            <isNotEmpty property="projectRelatedUser.isDel" prepend=" and ">
	               is_del = #projectRelatedUser.isDel#
	            </isNotEmpty>
	            <isNotEmpty property="projectRelatedUser.projectCode" prepend=" and ">
	               project_code = #projectRelatedUser.projectCode#
	            </isNotEmpty>
	            <isNotEmpty property="projectRelatedUser.deptCode" prepend=" and ">
	               dept_code = #projectRelatedUser.deptCode#
	            </isNotEmpty>
            	<isNotEmpty property="projectRelatedUser.deptName" prepend=" and ">
	               dept_name like concat('%',#projectRelatedUser.deptName#,'%')
	            </isNotEmpty>					            	            
	            <isNotEmpty property="deptIdList" prepend=" and ">
				   dept_id in 
					<iterate property="deptIdList" open="(" close=")" conjunction=",">
						#deptIdList[]#
					</iterate>
				</isNotEmpty>
            	<isNotEmpty property="projectRelatedUser.deptPath" prepend=" and ">
	               dept_path like concat(#projectRelatedUser.deptPath#,'%')
	            </isNotEmpty>					            	            
	        </dynamic>
	         <isNotEmpty property="sortCol" prepend=" order by ">
	             $sortCol$
	                <isNotEmpty property="sortOrder">
              	 		$sortOrder$
             		</isNotEmpty>
	         </isNotEmpty>
            LIMIT #limitStart#,#pageSize#;
    </select>

    <!-- mapped statement for IbatisProjectRelatedUserDAO.findByConditionCount -->
    <select id="MS-PROJECT-RELATED-USER-FIND-BY-CONDITION-COUNT" resultClass="long">
        SELECT /*MS-YRD-PROJECT-RELATED-USER-FIND-BY-CONDITION-COUNT*/  count(*)  FROM project_related_user WHERE  1=1 
	        <dynamic>
	            <isGreaterThan property="projectRelatedUser.relatedId"  compareValue="0" prepend=" and ">
	                related_id = #projectRelatedUser.relatedId#
	            </isGreaterThan>	        
	            <isGreaterThan property="projectRelatedUser.transferRelatedId"  compareValue="0" prepend=" and ">
	                transfer_related_id = #projectRelatedUser.transferRelatedId#
	            </isGreaterThan>	        
	            <isGreaterThan property="projectRelatedUser.userId"  compareValue="0" prepend=" and ">
	                user_id = #projectRelatedUser.userId#
	            </isGreaterThan>
	            <isNotEmpty property="projectRelatedUser.userAccount" prepend=" and ">
	              	user_account = #projectRelatedUser.userAccount#
	            </isNotEmpty>
	            <isNotEmpty property="projectRelatedUser.userType" prepend=" and ">
	               user_type = #projectRelatedUser.userType#
	            </isNotEmpty>	            
	            <isNotEmpty property="projectRelatedUser.isCurrent" prepend=" and ">
	               is_current = #projectRelatedUser.isCurrent#
	            </isNotEmpty>
	            <isNotEmpty property="projectRelatedUser.isDel" prepend=" and ">
	               is_del = #projectRelatedUser.isDel#
	            </isNotEmpty>
	            <isNotEmpty property="projectRelatedUser.projectCode" prepend=" and ">
	               project_code = #projectRelatedUser.projectCode#
	            </isNotEmpty>
	            <isNotEmpty property="projectRelatedUser.deptCode" prepend=" and ">
	               dept_code = #projectRelatedUser.deptCode#
	            </isNotEmpty>
            	<isNotEmpty property="projectRelatedUser.deptName" prepend=" and ">
	               dept_name like concat('%',#projectRelatedUser.deptName#,'%')
	            </isNotEmpty>					            	            
	            <isNotEmpty property="deptIdList" prepend=" and ">
				   dept_id in 
					<iterate property="deptIdList" open="(" close=")" conjunction=",">
						#deptIdList[]#
					</iterate>
				</isNotEmpty>
            	<isNotEmpty property="projectRelatedUser.deptPath" prepend=" and ">
	               dept_path like concat(#projectRelatedUser.deptPath#,'%')
	            </isNotEmpty>					            	            
	        </dynamic>
    </select>

</sqlMap>
