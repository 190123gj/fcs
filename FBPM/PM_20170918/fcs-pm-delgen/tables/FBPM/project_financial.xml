<table sqlname="project_financial">
	
	<column name="price" javatype="com.yjf.common.lang.util.money.Money" />
	<column name="actual_price" javatype="com.yjf.common.lang.util.money.Money" />
	<column name="actual_principal" javatype="com.yjf.common.lang.util.money.Money" />
	<column name="actual_interest" javatype="com.yjf.common.lang.util.money.Money" />
	<column name="settlement_amount" javatype="com.yjf.common.lang.util.money.Money" />
	
	<operation name="insert" paramtype="object">
		<sql>
			<![CDATA[
				INSERT INTO project_financial(project_id,project_code,original_code,product_id,product_type,product_name,term_type,interest_type,time_limit,time_unit,issue_institution,interest_rate,interest_settlement_way,expect_buy_date,expect_expire_date,price,expect_buy_num,risk_level,risk_measure,create_user_id,create_user_account,create_user_name,dept_id,dept_code,dept_name,dept_path,dept_path_name,actual_buy_date,actual_expire_date,actual_price,actual_buy_num,original_hold_num,actual_hold_num,actual_principal,actual_interest,actual_interest_rate,can_redeem,transfered_num,buy_back_num,redeemed_num,pre_finish_time,status,is_roll,is_open,year_day_num,settlement_amount,cycle_expire_date,raw_add_time) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
			]]>
		</sql>
	</operation>
	<operation name="update" paramtype="object">
		<sql>
			<![CDATA[
				UPDATE project_financial SET project_code=?,original_code=?,product_id=?,product_type=?,product_name=?,term_type=?,interest_type=?,time_limit=?,time_unit=?,issue_institution=?,interest_rate=?,interest_settlement_way=?,expect_buy_date=?,expect_expire_date=?,price=?,expect_buy_num=?,risk_level=?,risk_measure=?,create_user_id=?,create_user_account=?,create_user_name=?,dept_id=?,dept_code=?,dept_name=?,dept_path=?,dept_path_name=?,actual_buy_date=?,actual_expire_date=?,actual_price=?,actual_buy_num=?,original_hold_num=?,actual_hold_num=?,actual_principal=?,actual_interest=?,actual_interest_rate=?,can_redeem=?,transfered_num=?,buy_back_num=?,redeemed_num=?,pre_finish_time=?,status=?,is_roll=?,is_open=?,year_day_num=?,settlement_amount=?,cycle_expire_date=? WHERE project_id=?
			]]>
		</sql>
	</operation>
	
	<operation name="findById">
		<sql>
			<![CDATA[
				SELECT  * FROM project_financial WHERE project_id=?
			]]>
		</sql>
	</operation>
	
	<operation name="findByCode">
		<sql>
			<![CDATA[
				SELECT  * FROM project_financial WHERE project_code=?
			]]>
		</sql>
	</operation>
	
	<operation name="findByCodeForUpdate">
		<sql>
			<![CDATA[
				SELECT  * FROM project_financial WHERE project_code=? for update
			]]>
		</sql>
	</operation>
	
	<operation name="deleteById">
		<sql>
			<![CDATA[
				DELETE FROM project_financial WHERE project_id=?
			]]>
		</sql>
	</operation>
	
	<operation name="deleteByCode">
		<sql>
			<![CDATA[
				DELETE FROM project_financial WHERE project_code=?
			]]>
		</sql>
	</operation>
	
	<operation name="findByCondition" paramtype="object" multiplicity="many">
		<extraparams>
			<param name="loginUserId" javatype="long" />
			<param name="deptIdList" javatype="java.util.List" />		
			<param name="status" javatype="java.util.List" />
			<param name="hasHoldNum" javatype="java.lang.String" />
			<param name="hasOrignalHoldNum" javatype="java.lang.String" />
			<param name="buyDateStart" javatype="java.util.Date" />
			<param name="buyDateEnd" javatype="java.util.Date" />
			<param name="expireDateStart" javatype="java.util.Date" />
			<param name="expireDateEnd" javatype="java.util.Date" />
			<param name="sortCol" javatype="java.lang.String" />
			<param name="sortOrder" javatype="java.lang.String" />
			<param name="limitStart" javatype="long" />
			<param name="pageSize" javatype="long" />
		</extraparams>
	    <sql>
	        <![CDATA[
	       		SELECT  * FROM project_financial WHERE 1=1
	        ]]>
	    </sql>
	    <sqlmap>
	        <![CDATA[
	        SELECT * from project_financial p 
			      <isNotEmpty property="deptIdList">
			            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user
			            	   WHERE is_del = 'NO' AND 
			            	   		(dept_id in 
			            	   		<iterate property="deptIdList" open="(" close=")" conjunction=",">
										#deptIdList[]#
									</iterate>
							 		<isGreaterThan property="loginUserId"  compareValue="0" prepend=" OR ">
					            	    (user_id = #loginUserId# 
								      	<isNotEmpty property="relatedRoleList" prepend=" and ">
								      		user_type in 
					            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
												#relatedRoleList[]#
											</iterate>
								      	</isNotEmpty>)  	            	   
								    </isGreaterThan>)
							   GROUP BY project_code) rl
		    			  ON rl.project_code = p.project_code AND rl.rnum > 0
			      </isNotEmpty>
			      <isEmpty property="deptIdList">    
			 		  <isGreaterThan property="loginUserId"  compareValue="0">
				            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
				            	   WHERE user_id = #loginUserId# AND is_del = 'NO'
							      	<isNotEmpty property="relatedRoleList" prepend=" and ">
							      		user_type in 
				            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
											#relatedRoleList[]#
										</iterate>
							      	</isNotEmpty>  	            	   
				            	   GROUP BY project_code) rl
			    			  ON rl.project_code = p.project_code AND rl.rnum > 0
				      </isGreaterThan>
			      </isEmpty>
	      where 1=1  	        
	        <dynamic>
	            <isEqual property="hasOrignalHoldNum"  compareValue="IS" prepend=" and ">
	                p.original_hold_num > 0
	            </isEqual>
	            <isEqual property="hasHoldNum"  compareValue="IS" prepend=" and ">
	                p.actual_hold_num > 0
	            </isEqual>
	            <isGreaterThan property="projectFinancial.projectId"  compareValue="0" prepend=" and ">
	                p.project_id = #projectFinancial.projectId#
	            </isGreaterThan>
	            <isGreaterThan property="projectFinancial.createUserId"  compareValue="0" prepend=" and ">
	                p.create_user_id = #projectFinancial.createUserId#
	            </isGreaterThan>
	            <isNotEqual property="projectFinancial.originalHoldNum"  compareValue="-1.0" prepend=" and ">
	                p.original_hold_num = #projectFinancial.originalHoldNum#
	            </isNotEqual>	
	            <isGreaterThan property="projectFinancial.productId"  compareValue="0" prepend=" and ">
	                p.product_id = #projectFinancial.productId#
	            </isGreaterThan>
	             <isNotEmpty property="projectFinancial.projectCode" prepend=" and ">
	               p.project_code = #projectFinancial.projectCode#
	            </isNotEmpty>
	             <isNotEmpty property="projectFinancial.issueInstitution" prepend=" and ">
	               p.issue_institution like concat('%',#projectFinancial.issueInstitution#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="projectFinancial.productName" prepend=" and ">
	               p.product_name like concat('%',#projectFinancial.productName#,'%')
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.deptCode" prepend=" and ">
	               p.dept_code = #projectFinancial.deptCode#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.productType" prepend=" and ">
	               p.product_type = #projectFinancial.productType#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.termType" prepend=" and ">
	               p.term_type = #projectFinancial.termType#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.canRedeem" prepend=" and ">
	               p.can_redeem = #projectFinancial.canRedeem#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.isRoll" prepend=" and ">
	               p.is_roll = #projectFinancial.isRoll#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.isOpen" prepend=" and ">
	               p.is_open = #projectFinancial.isOpen#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.interestSettlementWay" prepend=" and ">
	               p.interest_settlement_way = #projectFinancial.interestSettlementWay#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.actualExpireDate" prepend=" and ">
	               ${cdata-start} 
	               	   p.actual_expire_date <= #projectFinancial.actualExpireDate#
	               	   and (p.status in ('PURCHASED','EXPIRE','FINISH'))
	                ${cdata-end}
	            </isNotEmpty>
	            <isNotEmpty property="buyDateStart" prepend=" and ">
	               ${cdata-start} 
	               	   p.actual_buy_date >= #buyDateStart#
	                ${cdata-end}
	            </isNotEmpty>
	            <isNotEmpty property="buyDateEnd" prepend=" and ">
	               ${cdata-start} 
	               	   p.actual_buy_date <= #buyDateEnd#
	                ${cdata-end}
	            </isNotEmpty>
	            <isNotEmpty property="expireDateStart" prepend=" and ">
	               ${cdata-start} 
	               	   p.actual_expire_date >= #expireDateStart#
	                ${cdata-end}
	            </isNotEmpty>
	            <isNotEmpty property="expireDateEnd" prepend=" and ">
	               ${cdata-start} 
	               	   p.actual_expire_date <= #expireDateEnd#
	                ${cdata-end}
	            </isNotEmpty>
	             <isNotEmpty property="projectFinancial.status" prepend=" and ">
	                 p.status = #projectFinancial.status#
	            </isNotEmpty>
	            <isNotEmpty property="status" prepend=" and ">
						 p.status in 
						<iterate property="status" open="(" close=")" conjunction=",">
							#status[]#
						</iterate>
				</isNotEmpty>
	        </dynamic>                            				
	         <isNotEmpty property="sortCol" prepend=" order by ">
	             $sortCol$
	                <isNotEmpty property="sortOrder">
              	 		$sortOrder$
             		</isNotEmpty>
	         </isNotEmpty>
            LIMIT #limitStart#,#pageSize#;
	        ]]>
	    </sqlmap>
	</operation>
	<operation name="findByConditionCount" paramtype="object" >
		<extraparams>
			<param name="loginUserId" javatype="long" />
			<param name="deptIdList" javatype="java.util.List" />
			<param name="status" javatype="java.util.List" />
			<param name="hasHoldNum" javatype="java.lang.String" />
			<param name="hasOrignalHoldNum" javatype="java.lang.String" />
			<param name="buyDateStart" javatype="java.util.Date" />
			<param name="buyDateEnd" javatype="java.util.Date" />
			<param name="expireDateStart" javatype="java.util.Date" />
			<param name="expireDateEnd" javatype="java.util.Date" />			
		</extraparams>
	    <sql>
	        <![CDATA[
	       SELECT  count(*)  FROM project_financial WHERE  1=1
	        ]]>
	    </sql>
	    <sqlmap>
	        <![CDATA[
	         SELECT  count(*)  FROM project_financial p 
			      <isNotEmpty property="deptIdList">
			            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user
			            	   WHERE is_del = 'NO' AND 
			            	   		(dept_id in 
			            	   		<iterate property="deptIdList" open="(" close=")" conjunction=",">
										#deptIdList[]#
									</iterate>
							 		<isGreaterThan property="loginUserId"  compareValue="0" prepend=" OR ">
					            	    (user_id = #loginUserId# 
								      	<isNotEmpty property="relatedRoleList" prepend=" and ">
								      		user_type in 
					            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
												#relatedRoleList[]#
											</iterate>
								      	</isNotEmpty>)  	            	   
								    </isGreaterThan>)
							   GROUP BY project_code) rl
		    			  ON rl.project_code = p.project_code AND rl.rnum > 0
			      </isNotEmpty>
			      <isEmpty property="deptIdList">    
			 		  <isGreaterThan property="loginUserId"  compareValue="0">
				            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
				            	   WHERE user_id = #loginUserId# AND is_del = 'NO'
							      	<isNotEmpty property="relatedRoleList" prepend=" and ">
							      		user_type in 
				            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
											#relatedRoleList[]#
										</iterate>
							      	</isNotEmpty>  	            	   
				            	   GROUP BY project_code) rl
			    			  ON rl.project_code = p.project_code AND rl.rnum > 0
				      </isGreaterThan>
			      </isEmpty>
	       where 1=1  	        
	        <dynamic>
	            <isEqual property="hasOrignalHoldNum"  compareValue="IS" prepend=" and ">
	                p.original_hold_num > 0
	            </isEqual>
	            <isEqual property="hasHoldNum"  compareValue="IS" prepend=" and ">
	                p.actual_hold_num > 0
	            </isEqual>
	            <isNotEqual property="projectFinancial.originalHoldNum"  compareValue="-1.0" prepend=" and ">
	                p.original_hold_num = #projectFinancial.originalHoldNum#
	            </isNotEqual>	           
	            <isGreaterThan property="projectFinancial.projectId"  compareValue="0" prepend=" and ">
	                p.project_id = #projectFinancial.projectId#
	            </isGreaterThan>
	            <isGreaterThan property="projectFinancial.createUserId"  compareValue="0" prepend=" and ">
	                p.create_user_id = #projectFinancial.createUserId#
	            </isGreaterThan>	            
	            <isGreaterThan property="projectFinancial.productId"  compareValue="0" prepend=" and ">
	                p.product_id = #projectFinancial.productId#
	            </isGreaterThan>
	             <isNotEmpty property="projectFinancial.projectCode" prepend=" and ">
	               p.project_code = #projectFinancial.projectCode#
	            </isNotEmpty>
	             <isNotEmpty property="projectFinancial.issueInstitution" prepend=" and ">
	               p.issue_institution like concat('%',#projectFinancial.issueInstitution#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="projectFinancial.productName" prepend=" and ">
	               p.product_name like concat('%',#projectFinancial.productName#,'%')
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.deptCode" prepend=" and ">
	               p.dept_code = #projectFinancial.deptCode#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.productType" prepend=" and ">
	               p.product_type = #projectFinancial.productType#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.termType" prepend=" and ">
	               p.term_type = #projectFinancial.termType#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.canRedeem" prepend=" and ">
	               p.can_redeem = #projectFinancial.canRedeem#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.isRoll" prepend=" and ">
	               p.is_roll = #projectFinancial.isRoll#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.isOpen" prepend=" and ">
	               p.is_open = #projectFinancial.isOpen#
	            </isNotEmpty>	
	            <isNotEmpty property="projectFinancial.interestSettlementWay" prepend=" and ">
	               p.interest_settlement_way = #projectFinancial.interestSettlementWay#
	            </isNotEmpty>	                        	            
	            <isNotEmpty property="projectFinancial.actualExpireDate" prepend=" and ">
	               ${cdata-start} 
	               	   p.actual_expire_date <= #projectFinancial.actualExpireDate#
	               	   and (p.status in ('PURCHASED','EXPIRE','FINISH'))
	                ${cdata-end}
	            </isNotEmpty>
	            <isNotEmpty property="buyDateStart" prepend=" and ">
	               ${cdata-start} 
	               	   p.actual_buy_date >= #buyDateStart#
	                ${cdata-end}
	            </isNotEmpty>
	            <isNotEmpty property="buyDateEnd" prepend=" and ">
	               ${cdata-start} 
	               	   p.actual_buy_date <= #buyDateEnd#
	                ${cdata-end}
	            </isNotEmpty>
	            <isNotEmpty property="expireDateStart" prepend=" and ">
	               ${cdata-start} 
	               	   p.actual_expire_date >= #expireDateStart#
	                ${cdata-end}
	            </isNotEmpty>
	            <isNotEmpty property="expireDateEnd" prepend=" and ">
	               ${cdata-start} 
	               	   p.actual_expire_date <= #expireDateEnd#
	                ${cdata-end}
	            </isNotEmpty>
	             <isNotEmpty property="projectFinancial.status" prepend=" and ">
	                 p.status = #projectFinancial.status#
	            </isNotEmpty>
	            <isNotEmpty property="status" prepend=" and ">
						 p.status in 
						<iterate property="status" open="(" close=")" conjunction=",">
							#status[]#
						</iterate>
				</isNotEmpty>
	        </dynamic>        
	        ]]>
	    </sqlmap>
	</operation>
	
	<operation name="findExipre" multiplicity="many">
		<extraparams>
			<param name="expireDate" javatype="java.util.Date" />
			<param name="limit" javatype="long" />
		</extraparams>
	    <sql>
	        <![CDATA[
	       		SELECT * FROM project_financial WHERE status = 'PURCHASED' AND (is_open = 'NO' OR is_open is null)
	        ]]>
	    </sql>
	    <sqlmap>
	        <![CDATA[
				SELECT * FROM project_financial WHERE status = 'PURCHASED' AND (is_open = 'NO' OR is_open is null) AND cycle_expire_date &lt;= #expireDate# LIMIT #limit#;
	        ]]>
	    </sqlmap>
	</operation>
</table> 
