<table sqlname="contract_template">


	<operation name="insert" paramtype="object">
		<sql>
			<![CDATA[
				INSERT INTO contract_template(template_id,name,contract_type,busi_type,busi_type_name,is_main,credit_condition_type,pledge_type,stamp_phase,template_file,template_content,status,attachment,remark,template_type,letter_type,form_id,user_id,user_name,user_account,legal_manager_id,legal_manager_account,legal_manager_name,is_process,parent_id,revised,raw_add_time) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)


			]]>
		</sql>
		
		<sqlmap>
			<![CDATA[
		  INSERT INTO contract_template(template_id,name,contract_type,busi_type,busi_type_name,is_main,credit_condition_type,pledge_type,stamp_phase,template_file,template_content,status,attachment,remark,template_type,letter_type,form_id,user_id,user_name,user_account,legal_manager_id,legal_manager_account,legal_manager_name,is_process,parent_id,revised,raw_add_time)
		   VALUES (#templateId#,#name#,#contractType#,#busiType#,#busiTypeName#,#isMain#,#creditConditionType#,#pledgeType#,#stampPhase#,#templateFile#,#templateContent#,#status#,#attachment#,#remark#,#templateType#,#letterType#,#formId#,#userId#,#userName#,#userAccount#,#legalManagerId#,#legalManagerAccount#,#legalManagerName#,#isProcess#,#parentId#,#revised#,#rawAddTime#)
	        <selectKey  resultClass ="long"  keyProperty ="templateId" >
	          		 SELECT LAST_INSERT_ID() AS ID 
	      	</selectKey>
				]]>
		</sqlmap>
		
	</operation>
	
	<operation name="update" paramtype="object">
		<sql>
			<![CDATA[
				UPDATE contract_template SET name=?,contract_type=?,busi_type=?,busi_type_name=?,is_main=?,credit_condition_type=?,pledge_type=?,stamp_phase=?,template_file=?,template_content=?,status=?,attachment=?,remark=?,template_type=?,letter_type=?,legal_manager_id=?,legal_manager_account=?,legal_manager_name=?,revised=? WHERE template_id=?


			]]>
		</sql>
	</operation>

	<operation name="findTemplates" multiplicity="many">
		<sql>
			<![CDATA[
				 select /*MS-YRD-CONTRACT-TEMPLATE-FIND-TEMPLATES*/ * from contract_template where busi_type=? and status="IN_USE"

			]]>
		</sql>
	</operation>

	<operation name="findById">
		<sql>
			<![CDATA[
				SELECT  *  FROM contract_template WHERE template_id=?

			]]>
		</sql>
	</operation>

	<operation name="findByFormId">
		<sql>
			<![CDATA[
				SELECT  *  FROM contract_template WHERE form_id=?

			]]>
		</sql>
	</operation>

	<operation name="deleteById">
		<sql>
			<![CDATA[
				DELETE FROM contract_template WHERE template_id=?
			]]>
		</sql>
	</operation>
	
 
	
	<operation name="findAllCount" >
		<sql>
				<![CDATA[
				SELECT  count(*) FROM contract_template WHERE status != 'DELETED'
			]]>
		</sql>
	</operation>
	
	
	<operation name="findByCondition" paramtype="object" multiplicity="many">
		<extraparams>
			<param name="limitStart" javatype="long" />
			<param name="pageSize" javatype="long" />
			<param name="sortCol" javatype="java.lang.String" />
			<param name="sortOrder" javatype="java.lang.String" />
			<param name="needNullBusiType" javatype="java.lang.String" />
			<param name="needNullPledgeType" javatype="java.lang.String" />
			<param name="busiTypeList" javatype="java.util.List" />
			<param name="statusList" javatype="java.util.List" />
			<param name="conditionTypeList" javatype="java.util.List" />
			<param name="isGetTemplates" javatype="java.lang.String" />
			<param name="notGuarantor" javatype="java.lang.String" />
			<param name="equalsName" javatype="java.lang.String" />
			<param name="nameList" javatype="java.util.List" />
		</extraparams>
		<sql>
				<![CDATA[
			SELECT  * FROM contract_template WHERE template_id=?

				]]>
		</sql>
		<sqlmap>
			<![CDATA[
			SELECT  * FROM contract_template
			WHERE 1=1  AND status != 'DELETED' AND (status != 'DRAFT' OR user_id = #contractTemplate.userId#)

			<dynamic>

			<isGreaterThan property="contractTemplate.templateId" compareValue="0" prepend=" and ">
				${cdata-start} template_id = #contractTemplate.templateId# ${cdata-end}
			</isGreaterThan>

			<isNotEmpty property="contractTemplate.name"  prepend=" and ">
				${cdata-start} name like concat('%',#contractTemplate.name# ,'%') ${cdata-end}
			</isNotEmpty>
			<isNotEmpty property="equalsName"  prepend=" and ">
				${cdata-start} name =#equalsName# ${cdata-end}
			</isNotEmpty>
			<isNotEmpty property="nameList"  prepend=" and ">
						name in
						<iterate property="nameList" open="(" close=")" conjunction=",">
							#nameList[]#
						</iterate>
			</isNotEmpty>
			<isNotEmpty property="contractTemplate.templateType"  prepend=" and ">
			<isEqual property="contractTemplate.templateType" compareValue="CONTRACT">
				${cdata-start} (template_type = #contractTemplate.templateType# OR template_type IS NULL OR template_type="") ${cdata-end}
			</isEqual>
			<isEqual property="contractTemplate.templateType" compareValue="LETTER">
				${cdata-start} (template_type = #contractTemplate.templateType#) ${cdata-end}
			</isEqual>
			</isNotEmpty>

			<isNotEmpty property="contractTemplate.letterType"  prepend=" and ">
				${cdata-start} letter_type = #contractTemplate.letterType# ${cdata-end}
			</isNotEmpty>

			<isNotEmpty property="contractTemplate.contractType"  prepend=" and ">
				${cdata-start} contract_type = #contractTemplate.contractType# ${cdata-end}
			</isNotEmpty>

			<isNotEmpty property="contractTemplate.busiType"  prepend=" and ">
				<isEmpty property="needNullBusiType"  prepend="   ">
					${cdata-start} busi_type = #contractTemplate.busiType# ${cdata-end}
		        </isEmpty>
		       <isNotEmpty property="needNullBusiType"  prepend="   ">
				    (
			busi_type in
			<iterate property="busiTypeList" open="(" close=")" conjunction=",">
				#busiTypeList[]#
			</iterate>
		    </isNotEmpty>
		<isNotEmpty property="needNullBusiType"  prepend=" or ">
			busi_type is null
		</isNotEmpty>
		<isNotEmpty property="needNullBusiType"  prepend=" or ">
			busi_type='' )
		</isNotEmpty>
		</isNotEmpty>
            <isNotEmpty property="conditionTypeList"  prepend=" and ">
			credit_condition_type in
			<iterate property="conditionTypeList" open="(" close=")" conjunction=",">
				#conditionTypeList[]#
			</iterate>
		    </isNotEmpty>
		    <isNotEmpty property="statusList"  prepend=" and ">
			status in
			<iterate property="statusList" open="(" close=")" conjunction=",">
				#statusList[]#
			</iterate>
		    </isNotEmpty>
			<isNotEmpty property="contractTemplate.isMain"  prepend=" and ">
				${cdata-start} is_main = #contractTemplate.isMain# ${cdata-end}
			</isNotEmpty>

			<isNotEmpty property="contractTemplate.creditConditionType"  prepend=" and ">
				${cdata-start} credit_condition_type = #contractTemplate.creditConditionType# ${cdata-end}
			</isNotEmpty>

            <isEmpty property="needNullPledgeType"  prepend="  ">
            <isNotEmpty property="contractTemplate.pledgeType"  prepend=" and ">
				${cdata-start} pledge_type = #contractTemplate.pledgeType# ${cdata-end}
			</isNotEmpty>
            </isEmpty>

            <isNotEmpty property="needNullPledgeType"  prepend=" and  ">
                   (
            <isNotEmpty property="contractTemplate.pledgeType"  prepend=" ">
				${cdata-start} pledge_type = #contractTemplate.pledgeType# ${cdata-end}
			</isNotEmpty>
			or pledge_type is null or pledge_type='' )
            </isNotEmpty>

			<isNotEmpty property="contractTemplate.stampPhase"  prepend=" and ">
				${cdata-start} stamp_phase = #contractTemplate.stampPhase# ${cdata-end}
			</isNotEmpty>
                  <isNotEmpty property="contractTemplate.status"  prepend=" and ">
					${cdata-start} status = #contractTemplate.status# ${cdata-end}
		    </isNotEmpty>
                  <isNotEmpty property="isGetTemplates"  prepend=" and ">
					(is_main='IS' or credit_condition_type is null or credit_condition_type='' or
					(
					${cdata-start} credit_condition_type=#contractTemplate.creditConditionType# ${cdata-end}
					  <isNotEmpty property="notGuarantor"  prepend=" and ">
					${cdata-start} pledge_type = #contractTemplate.pledgeType# ${cdata-end}
					</isNotEmpty>
					))
		    </isNotEmpty>
		    			</dynamic>
			 <isNotEmpty property="sortCol" prepend=" order by ">
			$sortCol$
			<isNotEmpty property="sortOrder">
				$sortOrder$
			</isNotEmpty>
		    </isNotEmpty>
		    <isEmpty property="sortCol" prepend=" ">
			order by raw_add_time desc
		    </isEmpty>
			<isGreaterThan property="pageSize" compareValue="0" prepend="">
				LIMIT #limitStart#,#pageSize#
			</isGreaterThan>
			]]>
		</sqlmap>
	</operation>


	<operation name="findByConditionCount" paramtype="object"  resultClass="long">
		<extraparams>
			<param name="needNullBusiType" javatype="java.lang.String" />
			<param name="needNullPledgeType" javatype="java.lang.String" />
			<param name="busiTypeList" javatype="java.util.List" />
			<param name="statusList" javatype="java.util.List" />
			<param name="conditionTypeList" javatype="java.util.List" />
			<param name="isGetTemplates" javatype="java.lang.String" />
			<param name="notGuarantor" javatype="java.lang.String" />
			<param name="equalsName" javatype="java.lang.String" />
			<param name="nameList" javatype="java.util.List" />
		</extraparams>
		<sql>
				<![CDATA[
				SELECT *  FROM contract_template WHERE template_id=?
				]]>
		</sql>
		<sqlmap>
			<![CDATA[
			SELECT  count(*) totalCount  FROM contract_template 
			WHERE 1=1 AND status != 'DELETED' AND (status != 'DRAFT' OR user_id = #contractTemplate.userId#)
			
			<dynamic>

			<isGreaterThan property="contractTemplate.templateId" compareValue="0" prepend=" and ">
				${cdata-start} template_id = #contractTemplate.templateId# ${cdata-end}
			</isGreaterThan>

			<isNotEmpty property="contractTemplate.name"  prepend=" and ">
				${cdata-start}name like concat('%',#contractTemplate.name# ,'%') ${cdata-end}
			</isNotEmpty>
			<isNotEmpty property="equalsName"  prepend=" and ">
				${cdata-start} name =#equalsName# ${cdata-end}
			</isNotEmpty>
			<isNotEmpty property="nameList"  prepend=" and ">
						name in
						<iterate property="nameList" open="(" close=")" conjunction=",">
							#nameList[]#
						</iterate>
			</isNotEmpty>
			<isNotEmpty property="contractTemplate.templateType"  prepend=" and ">
			<isEqual property="contractTemplate.templateType" compareValue="CONTRACT">
				${cdata-start} (template_type = #contractTemplate.templateType# OR template_type IS NULL OR template_type="") ${cdata-end}
			</isEqual>
			<isEqual property="contractTemplate.templateType" compareValue="LETTER">
				${cdata-start} (template_type = #contractTemplate.templateType#) ${cdata-end}
			</isEqual>
			</isNotEmpty>

			<isNotEmpty property="contractTemplate.letterType"  prepend=" and ">
				${cdata-start} letter_type = #contractTemplate.letterType# ${cdata-end}
			</isNotEmpty>

			<isNotEmpty property="contractTemplate.contractType"  prepend=" and ">
				${cdata-start} contract_type = #contractTemplate.contractType# ${cdata-end}
			</isNotEmpty>

			<isNotEmpty property="contractTemplate.busiType"  prepend=" and ">
				<isEmpty property="needNullBusiType"  prepend="   ">
					${cdata-start} busi_type = #contractTemplate.busiType# ${cdata-end}
		        </isEmpty>
		       <isNotEmpty property="needNullBusiType"  prepend="   ">
				    (
			busi_type in
			<iterate property="busiTypeList" open="(" close=")" conjunction=",">
				#busiTypeList[]#
			</iterate>
		    </isNotEmpty>

		<isNotEmpty property="needNullBusiType"  prepend=" or ">
			busi_type is null
		</isNotEmpty>
		<isNotEmpty property="needNullBusiType"  prepend=" or ">
			busi_type='' )
		</isNotEmpty>
		</isNotEmpty>
            <isNotEmpty property="conditionTypeList"  prepend=" and ">
			credit_condition_type in
			<iterate property="conditionTypeList" open="(" close=")" conjunction=",">
				#conditionTypeList[]#
			</iterate>
		    </isNotEmpty>
			<isNotEmpty property="statusList"  prepend=" and ">
			status in
			<iterate property="statusList" open="(" close=")" conjunction=",">
				#statusList[]#
			</iterate>
		    </isNotEmpty>
			<isNotEmpty property="contractTemplate.isMain"  prepend=" and ">
				${cdata-start} is_main = #contractTemplate.isMain# ${cdata-end}
			</isNotEmpty>

			<isNotEmpty property="contractTemplate.creditConditionType"  prepend=" and ">
				${cdata-start} credit_condition_type = #contractTemplate.creditConditionType# ${cdata-end}
			</isNotEmpty>

			<isEmpty property="needNullPledgeType"  prepend="  ">
            <isNotEmpty property="contractTemplate.pledgeType"  prepend=" and ">
				${cdata-start} pledge_type = #contractTemplate.pledgeType# ${cdata-end}
			</isNotEmpty>
            </isEmpty>

            <isNotEmpty property="needNullPledgeType"  prepend=" and  ">
                   (
            <isNotEmpty property="contractTemplate.pledgeType"  prepend=" ">
				${cdata-start} pledge_type = #contractTemplate.pledgeType# ${cdata-end}
			</isNotEmpty>
			or pledge_type is null or pledge_type='' )
            </isNotEmpty>

			<isNotEmpty property="contractTemplate.stampPhase"  prepend=" and ">
				${cdata-start} stamp_phase = #contractTemplate.stampPhase# ${cdata-end}
			</isNotEmpty>
                  <isNotEmpty property="contractTemplate.status"  prepend=" and ">
					${cdata-start} status = #contractTemplate.status# ${cdata-end}
		    </isNotEmpty>
                  <isNotEmpty property="isGetTemplates"  prepend=" and ">
					(is_main='IS' or credit_condition_type is null or credit_condition_type='' or
					(
					${cdata-start} credit_condition_type=#contractTemplate.creditConditionType# ${cdata-end}
					  <isNotEmpty property="notGuarantor"  prepend=" and ">
					${cdata-start} pledge_type = #contractTemplate.pledgeType# ${cdata-end}
					</isNotEmpty>
					))
		    </isNotEmpty>
			</dynamic>
			
			]]>	
		</sqlmap>
	</operation>
	
</table>
