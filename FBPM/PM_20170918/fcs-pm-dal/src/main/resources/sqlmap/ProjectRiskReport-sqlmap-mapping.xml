<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>rent</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>specialmer-dalgen</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author peigen                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="specialmer">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table project_risk_report -->
    <resultMap id="RM-PROJECT-RISK-REPORT" class="com.born.fcs.pm.dal.dataobject.ProjectRiskReportDO">
        <result property="reportId" column="report_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="customerId" column="customer_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="customerName" column="customer_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="enterpriseType" column="enterprise_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="projectCode" column="project_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="projectName" column="project_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="timeLimit" column="time_limit" javaType="int" jdbcType="INT" nullValue="0"/>
        <result property="timeUnit" column="time_unit" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="amount" column="amount" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="guaranteeFee" column="guarantee_fee" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="guaranteeFeeType" column="guarantee_fee_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="loanBank" column="loan_bank" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="busiManagerId" column="busi_manager_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="busiManagerName" column="busi_manager_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="riskManagerId" column="risk_manager_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="riskManagerName" column="risk_manager_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="reprot1" column="reprot1" javaType="java.lang.String" jdbcType="TEXT"/>
        <result property="reprot2" column="reprot2" javaType="java.lang.String" jdbcType="TEXT"/>
        <result property="reprot3" column="reprot3" javaType="java.lang.String" jdbcType="TEXT"/>
        <result property="reprot4" column="reprot4" javaType="java.lang.String" jdbcType="TEXT"/>
        <result property="reprot5" column="reprot5" javaType="java.lang.String" jdbcType="TEXT"/>
        <result property="reportType" column="report_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="reportTime" column="report_time" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="reportManId" column="report_man_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="reportManName" column="report_man_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="reportStatus" column="report_status" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="rawAddTime" column="raw_add_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="rawUpdateTime" column="raw_update_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisProjectRiskReportDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisProjectRiskReportDAO.insert -->
    <insert id="MS-PROJECT-RISK-REPORT-INSERT">
        INSERT /*MS-YRD-PROJECT-RISK-REPORT-INSERT*/ INTO project_risk_report(report_id,customer_id,customer_name,enterprise_type,project_code,project_name,time_limit,time_unit,amount,guarantee_fee,guarantee_fee_type,loan_bank,busi_manager_id,busi_manager_name,risk_manager_id,risk_manager_name,reprot1,reprot2,reprot3,reprot4,reprot5,report_type,report_time,report_man_id,report_man_name,report_status,raw_add_time)
 VALUES (#reportId#,#customerId#,#customerName#,#enterpriseType#,#projectCode#,#projectName#,#timeLimit#,#timeUnit#,#amount#,#guaranteeFee#,#guaranteeFeeType#,#loanBank#,#busiManagerId#,#busiManagerName#,#riskManagerId#,#riskManagerName#,#reprot1#,#reprot2#,#reprot3#,#reprot4#,#reprot5#,#reportType#,#reportTime#,#reportManId#,#reportManName#,#reportStatus#,#rawAddTime#)
		<selectKey  resultClass ="long"  keyProperty ="reportId" >
		          	SELECT LAST_INSERT_ID() AS ID
			</selectKey>
    </insert>

    <!-- mapped statement for IbatisProjectRiskReportDAO.update -->
    <update id="MS-PROJECT-RISK-REPORT-UPDATE">
    <![CDATA[
        update /*MS-YRD-PROJECT-RISK-REPORT-UPDATE*/ project_risk_report set customer_id=#customerId#, customer_name=#customerName#, enterprise_type=#enterpriseType#, project_code=#projectCode#, project_name=#projectName#, time_limit=#timeLimit#, time_unit=#timeUnit#, amount=#amount#, guarantee_fee=#guaranteeFee#, guarantee_fee_type=#guaranteeFeeType#, loan_bank=#loanBank#, busi_manager_id=#busiManagerId#, busi_manager_name=#busiManagerName#, risk_manager_id=#riskManagerId#, risk_manager_name=#riskManagerName#, reprot1=#reprot1#, reprot2=#reprot2#, reprot3=#reprot3#, reprot4=#reprot4#, reprot5=#reprot5#, report_type=#reportType#, report_time=#reportTime#, report_man_id=#reportManId#, report_man_name=#reportManName#, report_status=#reportStatus# where (report_id = #reportId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisProjectRiskReportDAO.findById -->
    <select id="MS-PROJECT-RISK-REPORT-FIND-BY-ID" resultMap="RM-PROJECT-RISK-REPORT">
    <![CDATA[
        select /*MS-YRD-PROJECT-RISK-REPORT-FIND-BY-ID*/ report_id, customer_id, customer_name, enterprise_type, project_code, project_name, time_limit, time_unit, amount, guarantee_fee, guarantee_fee_type, loan_bank, busi_manager_id, busi_manager_name, risk_manager_id, risk_manager_name, reprot1, reprot2, reprot3, reprot4, reprot5, report_type, report_time, report_man_id, report_man_name, report_status, raw_add_time, raw_update_time from project_risk_report where (report_id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisProjectRiskReportDAO.deleteById -->
    <delete id="MS-PROJECT-RISK-REPORT-DELETE-BY-ID">
    <![CDATA[
        delete /*MS-YRD-PROJECT-RISK-REPORT-DELETE-BY-ID*/ from project_risk_report where (report_id = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisProjectRiskReportDAO.findByCondition -->
    <select id="MS-PROJECT-RISK-REPORT-FIND-BY-CONDITION" resultMap="RM-PROJECT-RISK-REPORT">
        SELECT /*MS-YRD-PROJECT-RISK-REPORT-FIND-BY-CONDITION*/  report.* FROM project_risk_report report
			      <isNotEmpty property="deptIdList">
			            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user
			            	   WHERE is_del = 'NO' AND 
			            	   		(dept_id in 
			            	   		<iterate property="deptIdList" open="(" close=")" conjunction=",">
										#deptIdList[]#
									</iterate>
							 		<isGreaterThan property="loginUserId"  compareValue="0" prepend=" OR ">
					            	    (user_id = #loginUserId# 
								      	<isNotEmpty property="relatedRoleList" prepend=" and ">
								      		user_type in 
					            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
												#relatedRoleList[]#
											</iterate>
								      	</isNotEmpty>)  	            	   
								    </isGreaterThan>)
							   GROUP BY project_code) rl
		    			  ON rl.project_code = report.project_code AND rl.rnum > 0
			      </isNotEmpty>
			      <isEmpty property="deptIdList">    
			 		  <isGreaterThan property="loginUserId"  compareValue="0">
				            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
				            	   WHERE user_id = #loginUserId# AND is_del = 'NO'
							      	<isNotEmpty property="relatedRoleList" prepend=" and ">
							      		user_type in 
				            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
											#relatedRoleList[]#
										</iterate>
							      	</isNotEmpty>  	            	   
				            	   GROUP BY project_code) rl
			    			  ON rl.project_code = report.project_code AND rl.rnum > 0
				      </isGreaterThan>
			      </isEmpty>

	              WHERE 1=1
	        <dynamic>
	            <isGreaterThan property="projectRiskReport.customerId"  compareValue="0" prepend=" and ">
	                report.customer_id = #projectRiskReport.customerId#
	            </isGreaterThan>
	            <isNotEmpty property="projectRiskReport.customerName"  prepend=" and ">
	                report.customer_name LIKE CONCAT('%',#projectRiskReport.customerName#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="projectRiskReport.projectCode" prepend=" and ">
	               report.project_code LIKE CONCAT('%',#projectRiskReport.projectCode#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="projectRiskReport.projectName" prepend=" and ">
	               report.project_name LIKE CONCAT('%',#projectRiskReport.projectName#,'%')
	            </isNotEmpty>
	             <isGreaterThan property="projectRiskReport.busiManagerId"  compareValue="0" prepend=" and ">
	                   report.busi_manager_id = #projectRiskReport.busiManagerId#
	            </isGreaterThan>
	             <isNotEmpty property="projectRiskReport.busiManagerName" prepend=" and ">
	               report.busi_manager_name = #projectRiskReport.busiManagerName#
	            </isNotEmpty>

				 <isGreaterThan property="projectRiskReport.reportManId" compareValue="0"  prepend=" and ">
	               report.report_man_id = #projectRiskReport.reportManId#
	             </isGreaterThan>

                 <isNotEmpty property="projectRiskReport.reportManName" prepend=" and ">
	               report.report_man_name = #projectRiskReport.reportManName#
	            </isNotEmpty>

	            <isNotEmpty property="projectRiskReport.reportStatus" prepend=" and ">
	               report.report_status = #projectRiskReport.reportStatus#
	            </isNotEmpty>

	            <isNotEmpty property="projectRiskReport.reportType" prepend=" and ">
	                  report.report_type =#projectRiskReport.reportType#
	            </isNotEmpty>

	             <isNotEmpty property="startTimeBegin" prepend=" and ">
	            	<![CDATA[ report.raw_update_time >= #startTimeBegin#  ]]>
	             </isNotEmpty>
	             <isNotEmpty property="startTimeEnd" prepend=" and ">
	            	<![CDATA[ report.raw_update_time <= #startTimeEnd#  ]]>
	             </isNotEmpty>
	        </dynamic>

             <isEmpty property="sortCol" prepend=" order by ">
			    	report.raw_add_time DESC
			</isEmpty>

			 <isNotEmpty property="sortCol" prepend=" order by ">
	             $sortCol$
	                <isNotEmpty property="sortOrder">
              	 		$sortOrder$
             		</isNotEmpty>
	         </isNotEmpty>

            <isGreaterThan property="pageSize" compareValue="0" prepend="">
				LIMIT #limitStart#,#pageSize#
			</isGreaterThan>
    </select>

    <!-- mapped statement for IbatisProjectRiskReportDAO.findByConditionCount -->
    <select id="MS-PROJECT-RISK-REPORT-FIND-BY-CONDITION-COUNT" resultClass="long">
        SELECT /*MS-YRD-PROJECT-RISK-REPORT-FIND-BY-CONDITION-COUNT*/  count(*)  FROM project_risk_report report
				      <isNotEmpty property="deptIdList">
			            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user
			            	   WHERE is_del = 'NO' AND 
			            	   		(dept_id in 
			            	   		<iterate property="deptIdList" open="(" close=")" conjunction=",">
										#deptIdList[]#
									</iterate>
							 		<isGreaterThan property="loginUserId"  compareValue="0" prepend=" OR ">
					            	    (user_id = #loginUserId# 
								      	<isNotEmpty property="relatedRoleList" prepend=" and ">
								      		user_type in 
					            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
												#relatedRoleList[]#
											</iterate>
								      	</isNotEmpty>)  	            	   
								    </isGreaterThan>)
							   GROUP BY project_code) rl
		    			  ON rl.project_code = report.project_code AND rl.rnum > 0
			      </isNotEmpty>
			      <isEmpty property="deptIdList">    
			 		  <isGreaterThan property="loginUserId"  compareValue="0">
				            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
				            	   WHERE user_id = #loginUserId# AND is_del = 'NO'
							      	<isNotEmpty property="relatedRoleList" prepend=" and ">
							      		user_type in 
				            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
											#relatedRoleList[]#
										</iterate>
							      	</isNotEmpty>  	            	   
				            	   GROUP BY project_code) rl
			    			  ON rl.project_code = report.project_code AND rl.rnum > 0
				      </isGreaterThan>
			      </isEmpty>
	       WHERE  1=1
	        <dynamic>

	             <isGreaterThan property="projectRiskReport.customerId"  compareValue="0" prepend=" and ">
	                report.customer_id = #projectRiskReport.customerId#
	            </isGreaterThan>
	            <isNotEmpty property="projectRiskReport.customerName"  prepend=" and ">
	                report.customer_name LIKE CONCAT('%',#projectRiskReport.customerName#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="projectRiskReport.projectCode" prepend=" and ">
	               report.project_code LIKE CONCAT('%',#projectRiskReport.projectCode#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="projectRiskReport.projectName" prepend=" and ">
	               report.project_name LIKE CONCAT('%',#projectRiskReport.projectName#,'%')
	            </isNotEmpty>
	             <isGreaterThan property="projectRiskReport.busiManagerId"  compareValue="0" prepend=" and ">
	                   report.busi_manager_id = #projectRiskReport.busiManagerId#
	            </isGreaterThan>
	             <isNotEmpty property="projectRiskReport.busiManagerName" prepend=" and ">
	               report.busi_manager_name = #projectRiskReport.busiManagerName#
	            </isNotEmpty>

				 <isGreaterThan property="projectRiskReport.reportManId" compareValue="0"  prepend=" and ">
	               report.report_man_id = #projectRiskReport.reportManId#
	             </isGreaterThan>

                 <isNotEmpty property="projectRiskReport.reportManName" prepend=" and ">
	               report.report_man_name = #projectRiskReport.reportManName#
	            </isNotEmpty>

	            <isNotEmpty property="projectRiskReport.reportStatus" prepend=" and ">
	               report.report_status = #projectRiskReport.reportStatus#
	            </isNotEmpty>

	            <isNotEmpty property="projectRiskReport.reportType" prepend=" and ">
	                  report.report_type =#projectRiskReport.reportType#
	            </isNotEmpty>

	             <isNotEmpty property="startTimeBegin" prepend=" and ">
	            	<![CDATA[ report.raw_update_time >= #startTimeBegin#  ]]>
	             </isNotEmpty>
	             <isNotEmpty property="startTimeEnd" prepend=" and ">
	            	<![CDATA[ report.raw_update_time <= #startTimeEnd#  ]]>
	             </isNotEmpty>


	        </dynamic>
    </select>

</sqlMap>
