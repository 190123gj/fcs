<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>rent</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>specialmer-dalgen</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author peigen                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="specialmer">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table project_risk_log -->
    <resultMap id="RM-PROJECT-RISK-LOG" class="com.born.fcs.pm.dal.dataobject.ProjectRiskLogDO">
        <result property="logId" column="log_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="customerId" column="customer_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="customerName" column="customer_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="projectCode" column="project_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="projectName" column="project_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="busiManagerId" column="busi_manager_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="busiManagerName" column="busi_manager_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="occurTime" column="occur_time" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="eventTitle" column="event_title" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="eventDetail" column="event_detail" javaType="java.lang.String" jdbcType="TEXT"/>
        <result property="needAnnounce" column="need_announce" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="logStatus" column="log_status" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="rawAddTime" column="raw_add_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="rawUpdateTime" column="raw_update_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="createManId" column="create_man_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="createManName" column="create_man_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="participantIds" column="participant_ids" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="participantNames" column="participant_names" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="councilPlace" column="council_place" javaType="java.lang.String" jdbcType="VARCHAR"/>
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisProjectRiskLogDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisProjectRiskLogDAO.insert -->
    <insert id="MS-PROJECT-RISK-LOG-INSERT">
        insert /*MS-YRD-PROJECT-RISK-LOG-INSERT*/ /*MS-YRD-PROJECT-RISK-LOG-INSERT*/ into project_risk_log(log_id,customer_id,customer_name,project_code,project_name,busi_manager_id,busi_manager_name,occur_time,event_title,event_detail,need_announce,log_status,raw_add_time,create_man_id,create_man_name,participant_ids,participant_names,council_place) values (#logId#, #customerId#, #customerName#, #projectCode#, #projectName#, #busiManagerId#, #busiManagerName#, #occurTime#, #eventTitle#, #eventDetail#, #needAnnounce#, #logStatus#, #rawAddTime#, #createManId#, #createManName#,#participantIds#,#participantNames#,#councilPlace#)
			<selectKey  resultClass ="long"  keyProperty ="logId" >
		          		 SELECT LAST_INSERT_ID() AS ID
		    </selectKey>
    </insert>

    <!-- mapped statement for IbatisProjectRiskLogDAO.update -->
    <update id="MS-PROJECT-RISK-LOG-UPDATE">
    <![CDATA[
        update /*MS-YRD-PROJECT-RISK-LOG-UPDATE*/ project_risk_log set customer_id=#customerId#, customer_name=#customerName#, project_code=#projectCode#, project_name=#projectName#, busi_manager_id=#busiManagerId#, busi_manager_name=#busiManagerName#, occur_time=#occurTime#, event_title=#eventTitle#, event_detail=#eventDetail#, need_announce=#needAnnounce#, log_status=#logStatus#, create_man_id=#createManId#, create_man_name=#createManName#, participant_ids=#participantIds#, participant_names=#participantNames#, council_place=#councilPlace# where (log_id = #logId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisProjectRiskLogDAO.findById -->
    <select id="MS-PROJECT-RISK-LOG-FIND-BY-ID" resultMap="RM-PROJECT-RISK-LOG">
    <![CDATA[
        select /*MS-YRD-PROJECT-RISK-LOG-FIND-BY-ID*/ log_id, customer_id, customer_name, project_code, project_name, busi_manager_id, busi_manager_name, occur_time, event_title, event_detail, need_announce, log_status, raw_add_time, raw_update_time, create_man_id, create_man_name, participant_ids, participant_names, council_place from project_risk_log where (log_id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisProjectRiskLogDAO.deleteById -->
    <delete id="MS-PROJECT-RISK-LOG-DELETE-BY-ID">
    <![CDATA[
        delete /*MS-YRD-PROJECT-RISK-LOG-DELETE-BY-ID*/ from project_risk_log where (log_id = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisProjectRiskLogDAO.findByCondition -->
    <select id="MS-PROJECT-RISK-LOG-FIND-BY-CONDITION" resultMap="RM-PROJECT-RISK-LOG">
        SELECT /*MS-YRD-PROJECT-RISK-LOG-FIND-BY-CONDITION*/  lg.* FROM project_risk_log lg
			      <isNotEmpty property="deptIdList">
			            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user
			            	   WHERE is_del = 'NO' AND 
			            	   		(dept_id in 
			            	   		<iterate property="deptIdList" open="(" close=")" conjunction=",">
										#deptIdList[]#
									</iterate>
							 		<isGreaterThan property="loginUserId"  compareValue="0" prepend=" OR ">
					            	    (user_id = #loginUserId# 
								      	<isNotEmpty property="relatedRoleList" prepend=" and ">
								      		user_type in 
					            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
												#relatedRoleList[]#
											</iterate>
								      	</isNotEmpty>)  	            	   
								    </isGreaterThan>)
							   GROUP BY project_code) rl
		    			  ON rl.project_code = lg.project_code AND rl.rnum > 0
			      </isNotEmpty>
			      <isEmpty property="deptIdList">    
			 		  <isGreaterThan property="loginUserId"  compareValue="0">
				            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
				            	   WHERE user_id = #loginUserId# AND is_del = 'NO'
							      	<isNotEmpty property="relatedRoleList" prepend=" and ">
							      		user_type in 
				            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
											#relatedRoleList[]#
										</iterate>
							      	</isNotEmpty>  	            	   
				            	   GROUP BY project_code) rl
			    			  ON rl.project_code = lg.project_code AND rl.rnum > 0
				      </isGreaterThan>
			      </isEmpty>
	   	   WHERE 1=1
	        <dynamic>
	            <isGreaterThan property="projectRiskLog.customerId"  compareValue="0" prepend=" and ">
	                lg.customer_id = #projectRiskLog.customerId#
	            </isGreaterThan>
	            <isNotEmpty property="projectRiskLog.customerName"  prepend=" and ">
	                lg.customer_name LIKE CONCAT('%',#projectRiskLog.customerName#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="projectRiskLog.projectCode" prepend=" and ">
	               lg.project_code LIKE CONCAT('%',#projectRiskLog.projectCode#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="projectRiskLog.projectName" prepend=" and ">
	               lg.project_name LIKE CONCAT('%',#projectRiskLog.projectName#,'%')
	            </isNotEmpty>
	             <isGreaterThan property="projectRiskLog.busiManagerId"  compareValue="0" prepend=" and ">
	                   lg.busi_manager_id = #projectRiskLog.busiManagerId#
	            </isGreaterThan>
	             <isNotEmpty property="projectRiskLog.busiManagerName" prepend=" and ">
	               lg.busi_manager_name = #projectRiskLog.busiManagerName#
	            </isNotEmpty>


				 <isGreaterThan property="projectRiskLog.createManId" compareValue="0"  prepend=" and ">
	               lg.create_man_id = #projectRiskLog.createManId#
	             </isGreaterThan>

                 <isNotEmpty property="projectRiskLog.createManName" prepend=" and ">
	               lg.create_man_name = #projectRiskLog.createManName#
	            </isNotEmpty>

	            <isNotEmpty property="projectRiskLog.logStatus" prepend=" and ">
	               lg.log_status = #projectRiskLog.logStatus#
	            </isNotEmpty>

	            <isNotEmpty property="projectRiskLog.eventTitle" prepend=" and ">
	                  lg.event_title  like concat('%',#projectRiskLog.eventTitle#,'%')
	            </isNotEmpty>

	            <isNotEmpty property="projectRiskLog.eventDetail" prepend=" and ">
	                  lg.event_detail  like concat('%',#projectRiskLog.eventDetail#,'%')
	            </isNotEmpty>

	              <isNotEmpty property="titleDetail" prepend=" and ">
	                  (lg.event_detail  like concat('%',#titleDetail#,'%') or lg.event_title  like concat('%',#titleDetail#,'%'))
	            </isNotEmpty>

	             <isNotEmpty property="startTimeBegin" prepend=" and ">
	            	<![CDATA[ lg.raw_add_time >= #startTimeBegin#  ]]>
	             </isNotEmpty>
	             <isNotEmpty property="startTimeEnd" prepend=" and ">
	            	<![CDATA[ lg.raw_add_time <= #startTimeEnd#  ]]>
	             </isNotEmpty>

	             <isNotEmpty property="occurTimeBegin" prepend=" and ">
	            	<![CDATA[ lg.occur_time >= #occurTimeBegin#  ]]>
	             </isNotEmpty>
	             <isNotEmpty property="occurTimeEnd" prepend=" and ">
	            	<![CDATA[ lg.occur_time <= #occurTimeEnd#  ]]>
	             </isNotEmpty>


	        </dynamic>
            <isEmpty property="sortCol" prepend=" order by ">
			    	lg.raw_add_time DESC
			</isEmpty>

			 <isNotEmpty property="sortCol" prepend=" order by ">
	             $sortCol$
	                <isNotEmpty property="sortOrder">
              	 		$sortOrder$
             		</isNotEmpty>
	         </isNotEmpty>

            <isGreaterThan property="pageSize" compareValue="0" prepend="">
				LIMIT #limitStart#,#pageSize#
			</isGreaterThan>
    </select>

    <!-- mapped statement for IbatisProjectRiskLogDAO.findByConditionCount -->
    <select id="MS-PROJECT-RISK-LOG-FIND-BY-CONDITION-COUNT" resultClass="long">
        SELECT /*MS-YRD-PROJECT-RISK-LOG-FIND-BY-CONDITION-COUNT*/  count(*)  FROM project_risk_log lg
			      <isNotEmpty property="deptIdList">
			            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user
			            	   WHERE is_del = 'NO' AND 
			            	   		(dept_id in 
			            	   		<iterate property="deptIdList" open="(" close=")" conjunction=",">
										#deptIdList[]#
									</iterate>
							 		<isGreaterThan property="loginUserId"  compareValue="0" prepend=" OR ">
					            	    (user_id = #loginUserId# 
								      	<isNotEmpty property="relatedRoleList" prepend=" and ">
								      		user_type in 
					            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
												#relatedRoleList[]#
											</iterate>
								      	</isNotEmpty>)  	            	   
								    </isGreaterThan>)
							   GROUP BY project_code) rl
		    			  ON rl.project_code = lg.project_code AND rl.rnum > 0
			      </isNotEmpty>
			      <isEmpty property="deptIdList">    
			 		  <isGreaterThan property="loginUserId"  compareValue="0">
				            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
				            	   WHERE user_id = #loginUserId# AND is_del = 'NO'
							      	<isNotEmpty property="relatedRoleList" prepend=" and ">
							      		user_type in 
				            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
											#relatedRoleList[]#
										</iterate>
							      	</isNotEmpty>  	            	   
				            	   GROUP BY project_code) rl
			    			  ON rl.project_code = lg.project_code AND rl.rnum > 0
				      </isGreaterThan>
			      </isEmpty> WHERE  1=1
	        <dynamic>
	          <isGreaterThan property="projectRiskLog.customerId"  compareValue="0" prepend=" and ">
	                lg.customer_id = #projectRiskLog.customerId#
	            </isGreaterThan>
	            <isNotEmpty property="projectRiskLog.customerName"  prepend=" and ">
	                lg.customer_name LIKE CONCAT('%',#projectRiskLog.customerName#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="projectRiskLog.projectCode" prepend=" and ">
	               lg.project_code LIKE CONCAT('%',#projectRiskLog.projectCode#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="projectRiskLog.projectName" prepend=" and ">
	               lg.project_name LIKE CONCAT('%',#projectRiskLog.projectName#,'%')
	            </isNotEmpty>
	             <isGreaterThan property="projectRiskLog.busiManagerId"  compareValue="0" prepend=" and ">
	                   lg.busi_manager_id = #projectRiskLog.busiManagerId#
	            </isGreaterThan>
	             <isNotEmpty property="projectRiskLog.busiManagerName" prepend=" and ">
	               lg.busi_manager_name = #projectRiskLog.busiManagerName#
	            </isNotEmpty>

    			 <isGreaterThan property="projectRiskLog.createManId" compareValue="0"  prepend=" and ">
	               lg.create_man_id = #projectRiskLog.createManId#
	             </isGreaterThan>

                 <isNotEmpty property="projectRiskLog.createManName" prepend=" and ">
	               lg.create_man_name = #projectRiskLog.createManName#
	            </isNotEmpty>

	            <isNotEmpty property="projectRiskLog.logStatus" prepend=" and ">
	               lg.log_status = #projectRiskLog.logStatus#
	            </isNotEmpty>

	            <isNotEmpty property="projectRiskLog.eventTitle" prepend=" and ">
	                  lg.event_title  like concat('%',#projectRiskLog.eventTitle#,'%')
	            </isNotEmpty>


	            <isNotEmpty property="projectRiskLog.eventDetail" prepend=" and ">
	                  lg.event_detail  like concat('%',#projectRiskLog.eventDetail#,'%')
	            </isNotEmpty>


	              <isNotEmpty property="titleDetail" prepend=" and ">
	                  (lg.event_detail  like concat('%',#titleDetail#,'%') or lg.event_title  like concat('%',#titleDetail#,'%'))
	            </isNotEmpty>

	             <isNotEmpty property="startTimeBegin" prepend=" and ">
	            	<![CDATA[ lg.raw_add_time >= #startTimeBegin#  ]]>
	             </isNotEmpty>
	             <isNotEmpty property="startTimeEnd" prepend=" and ">
	            	<![CDATA[ lg.raw_add_time <= #startTimeEnd#  ]]>
	             </isNotEmpty>

	             <isNotEmpty property="occurTimeBegin" prepend=" and ">
	            	<![CDATA[ lg.occur_time >= #occurTimeBegin#  ]]>
	             </isNotEmpty>
	             <isNotEmpty property="occurTimeEnd" prepend=" and ">
	            	<![CDATA[ lg.occur_time <= #occurTimeEnd#  ]]>
	             </isNotEmpty>



	        </dynamic>
    </select>

</sqlMap>
