<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>rent</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>specialmer-dalgen</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author peigen                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="specialmer">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table contract_template -->
    <resultMap id="RM-CONTRACT-TEMPLATE" class="com.born.fcs.pm.dal.dataobject.ContractTemplateDO">
        <result property="templateId" column="template_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="name" column="name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="contractType" column="contract_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="busiType" column="busi_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="busiTypeName" column="busi_type_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="isMain" column="is_main" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="creditConditionType" column="credit_condition_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="pledgeType" column="pledge_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="stampPhase" column="stamp_phase" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="templateFile" column="template_file" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="status" column="status" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="templateContent" column="template_content" javaType="java.lang.String" jdbcType="MEDIUMTEXT"/>
        <result property="attachment" column="attachment" javaType="java.lang.String" jdbcType="TEXT"/>
        <result property="remark" column="remark" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="templateType" column="template_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="letterType" column="letter_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="formId" column="form_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="userId" column="user_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="userName" column="user_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="userAccount" column="user_account" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="legalManagerId" column="legal_manager_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="legalManagerAccount" column="legal_manager_account" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="legalManagerName" column="legal_manager_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="isProcess" column="is_process" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="parentId" column="parent_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="revised" column="revised" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="rawAddTime" column="raw_add_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="rawUpdateTime" column="raw_update_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisContractTemplateDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisContractTemplateDAO.insert -->
    <insert id="MS-CONTRACT-TEMPLATE-INSERT">
        INSERT /*MS-YRD-CONTRACT-TEMPLATE-INSERT*/ INTO contract_template(template_id,name,contract_type,busi_type,busi_type_name,is_main,credit_condition_type,pledge_type,stamp_phase,template_file,template_content,status,attachment,remark,template_type,letter_type,form_id,user_id,user_name,user_account,legal_manager_id,legal_manager_account,legal_manager_name,is_process,parent_id,revised,raw_add_time)
		   VALUES (#templateId#,#name#,#contractType#,#busiType#,#busiTypeName#,#isMain#,#creditConditionType#,#pledgeType#,#stampPhase#,#templateFile#,#templateContent#,#status#,#attachment#,#remark#,#templateType#,#letterType#,#formId#,#userId#,#userName#,#userAccount#,#legalManagerId#,#legalManagerAccount#,#legalManagerName#,#isProcess#,#parentId#,#revised#,#rawAddTime#)
	        <selectKey  resultClass ="long"  keyProperty ="templateId" >
	          		 SELECT LAST_INSERT_ID() AS ID 
	      	</selectKey>
    </insert>

    <!-- mapped statement for IbatisContractTemplateDAO.update -->
    <update id="MS-CONTRACT-TEMPLATE-UPDATE">
    <![CDATA[
        update /*MS-YRD-CONTRACT-TEMPLATE-UPDATE*/ contract_template set name=#name#, contract_type=#contractType#, busi_type=#busiType#, busi_type_name=#busiTypeName#, is_main=#isMain#, credit_condition_type=#creditConditionType#, pledge_type=#pledgeType#, stamp_phase=#stampPhase#, template_file=#templateFile#, template_content=#templateContent#, status=#status#, attachment=#attachment#, remark=#remark#, template_type=#templateType#, letter_type=#letterType#, legal_manager_id=#legalManagerId#, legal_manager_account=#legalManagerAccount#, legal_manager_name=#legalManagerName#, revised=#revised# where (template_id = #templateId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisContractTemplateDAO.findTemplates -->
    <select id="MS-CONTRACT-TEMPLATE-FIND-TEMPLATES" resultMap="RM-CONTRACT-TEMPLATE">
    <![CDATA[
        select /*MS-YRD-CONTRACT-TEMPLATE-FIND-TEMPLATES*/ * from contract_template where ((busi_type = #value#) AND (status = "IN_USE"))
    ]]>
    </select>

    <!-- mapped statement for IbatisContractTemplateDAO.findById -->
    <select id="MS-CONTRACT-TEMPLATE-FIND-BY-ID" resultMap="RM-CONTRACT-TEMPLATE">
    <![CDATA[
        select /*MS-YRD-CONTRACT-TEMPLATE-FIND-BY-ID*/ * from contract_template where (template_id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisContractTemplateDAO.findByFormId -->
    <select id="MS-CONTRACT-TEMPLATE-FIND-BY-FORM-ID" resultMap="RM-CONTRACT-TEMPLATE">
    <![CDATA[
        select /*MS-YRD-CONTRACT-TEMPLATE-FIND-BY-FORM-ID*/ * from contract_template where (form_id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisContractTemplateDAO.deleteById -->
    <delete id="MS-CONTRACT-TEMPLATE-DELETE-BY-ID">
    <![CDATA[
        delete /*MS-YRD-CONTRACT-TEMPLATE-DELETE-BY-ID*/ from contract_template where (template_id = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisContractTemplateDAO.findAllCount -->
    <select id="MS-CONTRACT-TEMPLATE-FIND-ALL-COUNT" resultClass="long">
    <![CDATA[
        select /*MS-YRD-CONTRACT-TEMPLATE-FIND-ALL-COUNT*/ COUNT(*) from contract_template where (status != 'DELETED')
    ]]>
    </select>

    <!-- mapped statement for IbatisContractTemplateDAO.findByCondition -->
    <select id="MS-CONTRACT-TEMPLATE-FIND-BY-CONDITION" resultMap="RM-CONTRACT-TEMPLATE">
        SELECT /*MS-YRD-CONTRACT-TEMPLATE-FIND-BY-CONDITION*/  * FROM contract_template
			WHERE 1=1  AND status != 'DELETED' AND (status != 'DRAFT' OR user_id = #contractTemplate.userId#)

			<dynamic>

			<isGreaterThan property="contractTemplate.templateId" compareValue="0" prepend=" and ">
				<![CDATA[ template_id = #contractTemplate.templateId# ]]>
			</isGreaterThan>

			<isNotEmpty property="contractTemplate.name"  prepend=" and ">
				<![CDATA[ name like concat('%',#contractTemplate.name# ,'%') ]]>
			</isNotEmpty>
			<isNotEmpty property="equalsName"  prepend=" and ">
				<![CDATA[ name =#equalsName# ]]>
			</isNotEmpty>
			<isNotEmpty property="nameList"  prepend=" and ">
						name in
						<iterate property="nameList" open="(" close=")" conjunction=",">
							#nameList[]#
						</iterate>
			</isNotEmpty>
			<isNotEmpty property="contractTemplate.templateType"  prepend=" and ">
			<isEqual property="contractTemplate.templateType" compareValue="CONTRACT">
				<![CDATA[ (template_type = #contractTemplate.templateType# OR template_type IS NULL OR template_type="") ]]>
			</isEqual>
			<isEqual property="contractTemplate.templateType" compareValue="LETTER">
				<![CDATA[ (template_type = #contractTemplate.templateType#) ]]>
			</isEqual>
			</isNotEmpty>

			<isNotEmpty property="contractTemplate.letterType"  prepend=" and ">
				<![CDATA[ letter_type = #contractTemplate.letterType# ]]>
			</isNotEmpty>

			<isNotEmpty property="contractTemplate.contractType"  prepend=" and ">
				<![CDATA[ contract_type = #contractTemplate.contractType# ]]>
			</isNotEmpty>

			<isNotEmpty property="contractTemplate.busiType"  prepend=" and ">
				<isEmpty property="needNullBusiType"  prepend="   ">
					<![CDATA[ busi_type = #contractTemplate.busiType# ]]>
		        </isEmpty>
		       <isNotEmpty property="needNullBusiType"  prepend="   ">
				    (
			busi_type in
			<iterate property="busiTypeList" open="(" close=")" conjunction=",">
				#busiTypeList[]#
			</iterate>
		    </isNotEmpty>
		<isNotEmpty property="needNullBusiType"  prepend=" or ">
			busi_type is null
		</isNotEmpty>
		<isNotEmpty property="needNullBusiType"  prepend=" or ">
			busi_type='' )
		</isNotEmpty>
		</isNotEmpty>
            <isNotEmpty property="conditionTypeList"  prepend=" and ">
			credit_condition_type in
			<iterate property="conditionTypeList" open="(" close=")" conjunction=",">
				#conditionTypeList[]#
			</iterate>
		    </isNotEmpty>
		    <isNotEmpty property="statusList"  prepend=" and ">
			status in
			<iterate property="statusList" open="(" close=")" conjunction=",">
				#statusList[]#
			</iterate>
		    </isNotEmpty>
			<isNotEmpty property="contractTemplate.isMain"  prepend=" and ">
				<![CDATA[ is_main = #contractTemplate.isMain# ]]>
			</isNotEmpty>

			<isNotEmpty property="contractTemplate.creditConditionType"  prepend=" and ">
				<![CDATA[ credit_condition_type = #contractTemplate.creditConditionType# ]]>
			</isNotEmpty>

            <isEmpty property="needNullPledgeType"  prepend="  ">
            <isNotEmpty property="contractTemplate.pledgeType"  prepend=" and ">
				<![CDATA[ pledge_type = #contractTemplate.pledgeType# ]]>
			</isNotEmpty>
            </isEmpty>

            <isNotEmpty property="needNullPledgeType"  prepend=" and  ">
                   (
            <isNotEmpty property="contractTemplate.pledgeType"  prepend=" ">
				<![CDATA[ pledge_type = #contractTemplate.pledgeType# ]]>
			</isNotEmpty>
			or pledge_type is null or pledge_type='' )
            </isNotEmpty>

			<isNotEmpty property="contractTemplate.stampPhase"  prepend=" and ">
				<![CDATA[ stamp_phase = #contractTemplate.stampPhase# ]]>
			</isNotEmpty>
                  <isNotEmpty property="contractTemplate.status"  prepend=" and ">
					<![CDATA[ status = #contractTemplate.status# ]]>
		    </isNotEmpty>
                  <isNotEmpty property="isGetTemplates"  prepend=" and ">
					(is_main='IS' or credit_condition_type is null or credit_condition_type='' or
					(
					<![CDATA[ credit_condition_type=#contractTemplate.creditConditionType# ]]>
					  <isNotEmpty property="notGuarantor"  prepend=" and ">
					<![CDATA[ pledge_type = #contractTemplate.pledgeType# ]]>
					</isNotEmpty>
					))
		    </isNotEmpty>
		    			</dynamic>
			 <isNotEmpty property="sortCol" prepend=" order by ">
			$sortCol$
			<isNotEmpty property="sortOrder">
				$sortOrder$
			</isNotEmpty>
		    </isNotEmpty>
		    <isEmpty property="sortCol" prepend=" ">
			order by raw_add_time desc
		    </isEmpty>
			<isGreaterThan property="pageSize" compareValue="0" prepend="">
				LIMIT #limitStart#,#pageSize#
			</isGreaterThan>
    </select>

    <!-- mapped statement for IbatisContractTemplateDAO.findByConditionCount -->
    <select id="MS-CONTRACT-TEMPLATE-FIND-BY-CONDITION-COUNT" resultClass="long">
        SELECT /*MS-YRD-CONTRACT-TEMPLATE-FIND-BY-CONDITION-COUNT*/  count(*) totalCount  FROM contract_template 
			WHERE 1=1 AND status != 'DELETED' AND (status != 'DRAFT' OR user_id = #contractTemplate.userId#)
			
			<dynamic>

			<isGreaterThan property="contractTemplate.templateId" compareValue="0" prepend=" and ">
				<![CDATA[ template_id = #contractTemplate.templateId# ]]>
			</isGreaterThan>

			<isNotEmpty property="contractTemplate.name"  prepend=" and ">
				<![CDATA[name like concat('%',#contractTemplate.name# ,'%') ]]>
			</isNotEmpty>
			<isNotEmpty property="equalsName"  prepend=" and ">
				<![CDATA[ name =#equalsName# ]]>
			</isNotEmpty>
			<isNotEmpty property="nameList"  prepend=" and ">
						name in
						<iterate property="nameList" open="(" close=")" conjunction=",">
							#nameList[]#
						</iterate>
			</isNotEmpty>
			<isNotEmpty property="contractTemplate.templateType"  prepend=" and ">
			<isEqual property="contractTemplate.templateType" compareValue="CONTRACT">
				<![CDATA[ (template_type = #contractTemplate.templateType# OR template_type IS NULL OR template_type="") ]]>
			</isEqual>
			<isEqual property="contractTemplate.templateType" compareValue="LETTER">
				<![CDATA[ (template_type = #contractTemplate.templateType#) ]]>
			</isEqual>
			</isNotEmpty>

			<isNotEmpty property="contractTemplate.letterType"  prepend=" and ">
				<![CDATA[ letter_type = #contractTemplate.letterType# ]]>
			</isNotEmpty>

			<isNotEmpty property="contractTemplate.contractType"  prepend=" and ">
				<![CDATA[ contract_type = #contractTemplate.contractType# ]]>
			</isNotEmpty>

			<isNotEmpty property="contractTemplate.busiType"  prepend=" and ">
				<isEmpty property="needNullBusiType"  prepend="   ">
					<![CDATA[ busi_type = #contractTemplate.busiType# ]]>
		        </isEmpty>
		       <isNotEmpty property="needNullBusiType"  prepend="   ">
				    (
			busi_type in
			<iterate property="busiTypeList" open="(" close=")" conjunction=",">
				#busiTypeList[]#
			</iterate>
		    </isNotEmpty>

		<isNotEmpty property="needNullBusiType"  prepend=" or ">
			busi_type is null
		</isNotEmpty>
		<isNotEmpty property="needNullBusiType"  prepend=" or ">
			busi_type='' )
		</isNotEmpty>
		</isNotEmpty>
            <isNotEmpty property="conditionTypeList"  prepend=" and ">
			credit_condition_type in
			<iterate property="conditionTypeList" open="(" close=")" conjunction=",">
				#conditionTypeList[]#
			</iterate>
		    </isNotEmpty>
			<isNotEmpty property="statusList"  prepend=" and ">
			status in
			<iterate property="statusList" open="(" close=")" conjunction=",">
				#statusList[]#
			</iterate>
		    </isNotEmpty>
			<isNotEmpty property="contractTemplate.isMain"  prepend=" and ">
				<![CDATA[ is_main = #contractTemplate.isMain# ]]>
			</isNotEmpty>

			<isNotEmpty property="contractTemplate.creditConditionType"  prepend=" and ">
				<![CDATA[ credit_condition_type = #contractTemplate.creditConditionType# ]]>
			</isNotEmpty>

			<isEmpty property="needNullPledgeType"  prepend="  ">
            <isNotEmpty property="contractTemplate.pledgeType"  prepend=" and ">
				<![CDATA[ pledge_type = #contractTemplate.pledgeType# ]]>
			</isNotEmpty>
            </isEmpty>

            <isNotEmpty property="needNullPledgeType"  prepend=" and  ">
                   (
            <isNotEmpty property="contractTemplate.pledgeType"  prepend=" ">
				<![CDATA[ pledge_type = #contractTemplate.pledgeType# ]]>
			</isNotEmpty>
			or pledge_type is null or pledge_type='' )
            </isNotEmpty>

			<isNotEmpty property="contractTemplate.stampPhase"  prepend=" and ">
				<![CDATA[ stamp_phase = #contractTemplate.stampPhase# ]]>
			</isNotEmpty>
                  <isNotEmpty property="contractTemplate.status"  prepend=" and ">
					<![CDATA[ status = #contractTemplate.status# ]]>
		    </isNotEmpty>
                  <isNotEmpty property="isGetTemplates"  prepend=" and ">
					(is_main='IS' or credit_condition_type is null or credit_condition_type='' or
					(
					<![CDATA[ credit_condition_type=#contractTemplate.creditConditionType# ]]>
					  <isNotEmpty property="notGuarantor"  prepend=" and ">
					<![CDATA[ pledge_type = #contractTemplate.pledgeType# ]]>
					</isNotEmpty>
					))
		    </isNotEmpty>
			</dynamic>
    </select>

</sqlMap>
