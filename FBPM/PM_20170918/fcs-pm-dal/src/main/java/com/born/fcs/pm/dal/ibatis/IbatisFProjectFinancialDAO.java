/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.pm.dal.daointerface.FProjectFinancialDAO;


// auto generated imports
import com.born.fcs.pm.dal.dataobject.FProjectFinancialDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.pm.dal.daointerface.FProjectFinancialDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/f_project_financial.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings("unchecked")

public class IbatisFProjectFinancialDAO extends SqlMapClientDaoSupport implements FProjectFinancialDAO {
	/**
	 *  Insert one <tt>FProjectFinancialDO</tt> object to DB table <tt>f_project_financial</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into f_project_financial(id,form_id,project_code,product_id,product_type,product_name,interest_type,term_type,time_limit,time_unit,issue_institution,interest_rate,rate_range_start,rate_range_end,interest_settlement_way,expect_buy_date,expect_expire_date,expect_buy_num,buy_num,buy_times,can_redeem,price,risk_level,risk_measure,create_user_id,create_user_account,create_user_name,dept_id,dept_code,dept_name,dept_path,dept_path_name,council_type,council_apply_id,council_status,is_roll,year_day_num,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param FProjectFinancial
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(FProjectFinancialDO FProjectFinancial) throws DataAccessException {
    	if (FProjectFinancial == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-F-PROJECT-FINANCIAL-INSERT", FProjectFinancial);

        return FProjectFinancial.getId();
    }

	/**
	 *  Update DB table <tt>f_project_financial</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update f_project_financial set form_id=?, project_code=?, product_id=?, product_type=?, product_name=?, interest_type=?, term_type=?, time_limit=?, time_unit=?, issue_institution=?, interest_rate=?, rate_range_start=?, rate_range_end=?, interest_settlement_way=?, expect_buy_date=?, expect_expire_date=?, expect_buy_num=?, buy_num=?, buy_times=?, can_redeem=?, price=?, risk_level=?, risk_measure=?, create_user_id=?, create_user_account=?, create_user_name=?, dept_id=?, dept_code=?, dept_name=?, dept_path=?, dept_path_name=?, council_type=?, council_apply_id=?, council_status=?, is_roll=?, year_day_num=? where (id = ?)</tt>
	 *
	 *	@param FProjectFinancial
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(FProjectFinancialDO FProjectFinancial) throws DataAccessException {
    	if (FProjectFinancial == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-F-PROJECT-FINANCIAL-UPDATE", FProjectFinancial);
    }

	/**
	 *  Update DB table <tt>f_project_financial</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update f_project_financial set project_code=?, product_id=?, product_type=?, product_name=?, interest_type=?, term_type=?, time_limit=?, time_unit=?, issue_institution=?, interest_rate=?, rate_range_start=?, rate_range_end=?, interest_settlement_way=?, expect_buy_date=?, expect_expire_date=?, expect_buy_num=?, buy_num=?, buy_times=?, can_redeem=?, price=?, risk_level=?, risk_measure=?, create_user_id=?, create_user_account=?, create_user_name=?, dept_id=?, dept_code=?, dept_name=?, dept_path=?, dept_path_name=?, council_type=?, council_apply_id=?, council_status=?, is_roll=?, year_day_num=? where (form_id = ?)</tt>
	 *
	 *	@param FProjectFinancial
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateByFormId(FProjectFinancialDO FProjectFinancial) throws DataAccessException {
    	if (FProjectFinancial == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-F-PROJECT-FINANCIAL-UPDATE-BY-FORM-ID", FProjectFinancial);
    }

	/**
	 *  Query DB table <tt>f_project_financial</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_project_financial where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return FProjectFinancialDO
	 *	@throws DataAccessException
	 */	 
    public FProjectFinancialDO findById(long id) throws DataAccessException {
        Long param = new Long(id);

        return (FProjectFinancialDO) getSqlMapClientTemplate().queryForObject("MS-F-PROJECT-FINANCIAL-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>f_project_financial</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_project_financial where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return FProjectFinancialDO
	 *	@throws DataAccessException
	 */	 
    public FProjectFinancialDO findByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return (FProjectFinancialDO) getSqlMapClientTemplate().queryForObject("MS-F-PROJECT-FINANCIAL-FIND-BY-FORM-ID", param);

    }

	/**
	 *  Query DB table <tt>f_project_financial</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_project_financial where (project_code = ?)</tt>
	 *
	 *	@param projectCode
	 *	@return FProjectFinancialDO
	 *	@throws DataAccessException
	 */	 
    public FProjectFinancialDO findByProjectCode(String projectCode) throws DataAccessException {

        return (FProjectFinancialDO) getSqlMapClientTemplate().queryForObject("MS-F-PROJECT-FINANCIAL-FIND-BY-PROJECT-CODE", projectCode);

    }

	/**
	 *  Delete records from DB table <tt>f_project_financial</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_project_financial where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException {
        Long param = new Long(id);

        return getSqlMapClientTemplate().delete("MS-F-PROJECT-FINANCIAL-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>f_project_financial</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_project_financial where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return getSqlMapClientTemplate().delete("MS-F-PROJECT-FINANCIAL-DELETE-BY-FORM-ID", param);
    }

	/**
	 *  Query DB table <tt>f_project_financial</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_project_financial where ((p.council_status = 'COUNCIL_WAITING') AND (council_type != 'SELF_PR'))</tt>
	 *
	 *	@param limit
	 *	@return List<FProjectFinancialDO>
	 *	@throws DataAccessException
	 */	 
    public List<FProjectFinancialDO> findCouncilWaitingApply(long limit) throws DataAccessException {
        Long param = new Long(limit);

        return getSqlMapClientTemplate().queryForList("MS-F-PROJECT-FINANCIAL-FIND-COUNCIL-WAITING-APPLY", param);

    }

}