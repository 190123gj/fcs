/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.pm.dal.daointerface.FStampBasicDataApplyFileDAO;


// auto generated imports
import com.born.fcs.pm.dal.dataobject.FStampBasicDataApplyFileDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.pm.dal.daointerface.FStampBasicDataApplyFileDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/f_stamp_basic_data_apply_file.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings("unchecked")

public class IbatisFStampBasicDataApplyFileDAO extends SqlMapClientDaoSupport implements FStampBasicDataApplyFileDAO {
	/**
	 *  Insert one <tt>FStampBasicDataApplyFileDO</tt> object to DB table <tt>f_stamp_basic_data_apply_file</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into f_stamp_basic_data_apply_file(apply_id,file_name,file_conent,legal_chapter_num,cachet_num,sort_order,remark,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param FStampBasicDataApplyFile
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(FStampBasicDataApplyFileDO FStampBasicDataApplyFile) throws DataAccessException {
    	if (FStampBasicDataApplyFile == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-F-STAMP-BASIC-DATA-APPLY-FILE-INSERT", FStampBasicDataApplyFile);

        return FStampBasicDataApplyFile.getId();
    }

	/**
	 *  Update DB table <tt>f_stamp_basic_data_apply_file</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update f_stamp_basic_data_apply_file set apply_id=?, file_name=?, file_conent=?, legal_chapter_num=?, cachet_num=?, sort_order=?, remark=? where (id = ?)</tt>
	 *
	 *	@param FStampBasicDataApplyFile
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(FStampBasicDataApplyFileDO FStampBasicDataApplyFile) throws DataAccessException {
    	if (FStampBasicDataApplyFile == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-F-STAMP-BASIC-DATA-APPLY-FILE-UPDATE", FStampBasicDataApplyFile);
    }

	/**
	 *  Query DB table <tt>f_stamp_basic_data_apply_file</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_stamp_basic_data_apply_file where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return FStampBasicDataApplyFileDO
	 *	@throws DataAccessException
	 */	 
    public FStampBasicDataApplyFileDO findById(long id) throws DataAccessException {
        Long param = new Long(id);

        return (FStampBasicDataApplyFileDO) getSqlMapClientTemplate().queryForObject("MS-F-STAMP-BASIC-DATA-APPLY-FILE-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>f_stamp_basic_data_apply_file</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_stamp_basic_data_apply_file where (apply_id = ?)</tt>
	 *
	 *	@param applyId
	 *	@return List<FStampBasicDataApplyFileDO>
	 *	@throws DataAccessException
	 */	 
    public List<FStampBasicDataApplyFileDO> findByApplyId(long applyId) throws DataAccessException {
        Long param = new Long(applyId);

        return getSqlMapClientTemplate().queryForList("MS-F-STAMP-BASIC-DATA-APPLY-FILE-FIND-BY-APPLY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>f_stamp_basic_data_apply_file</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_stamp_basic_data_apply_file where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException {
        Long param = new Long(id);

        return getSqlMapClientTemplate().delete("MS-F-STAMP-BASIC-DATA-APPLY-FILE-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>f_stamp_basic_data_apply_file</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_stamp_basic_data_apply_file where (apply_id = ?)</tt>
	 *
	 *	@param applyId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByApplyId(long applyId) throws DataAccessException {
        Long param = new Long(applyId);

        return getSqlMapClientTemplate().delete("MS-F-STAMP-BASIC-DATA-APPLY-FILE-DELETE-BY-APPLY-ID", param);
    }

}