/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.daointerface;

// auto generated imports
import com.born.fcs.pm.dal.dataobject.ShortMessageDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>short_message</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/short_message.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface ShortMessageDAO {
	/**
	 *  Insert one <tt>ShortMessageDO</tt> object to DB table <tt>short_message</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into short_message(message_sender_id,message_sender_name,message_sender_account,message_receiver,message_content,raw_add_time) values (?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param shortMessage
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(ShortMessageDO shortMessage) throws DataAccessException;

	/**
	 *  Update DB table <tt>short_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update short_message set message_sender_id=?, message_sender_name=?, message_sender_account=?, message_receiver=?, message_content=? where (id = ?)</tt>
	 *
	 *	@param shortMessage
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(ShortMessageDO shortMessage) throws DataAccessException;

	/**
	 *  Query DB table <tt>short_message</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from short_message where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return ShortMessageDO
	 *	@throws DataAccessException
	 */	 
    public ShortMessageDO findById(long id) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>short_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from short_message where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException;

	/**
	 *  Query DB table <tt>short_message</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from short_message where (1 = 1)</tt>
	 *
	 *	@param shortMessage
	 *	@param limitStart
	 *	@param pageSize
	 *	@param beginMessageSendDate
	 *	@param endMessageSendDate
	 *	@return List<ShortMessageDO>
	 *	@throws DataAccessException
	 */	 
    public List<ShortMessageDO> findByCondition(ShortMessageDO shortMessage, long limitStart, long pageSize, String beginMessageSendDate, String endMessageSendDate) throws DataAccessException;

	/**
	 *  Query DB table <tt>short_message</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from short_message where (1 = 1)</tt>
	 *
	 *	@param shortMessage
	 *	@param beginMessageSendDate
	 *	@param endMessageSendDate
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(ShortMessageDO shortMessage, String beginMessageSendDate, String endMessageSendDate) throws DataAccessException;

}