/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.pm.dal.daointerface.ProjectRecoveryDebtorReorganizationDAO;


// auto generated imports
import com.born.fcs.pm.dal.dataobject.ProjectRecoveryDebtorReorganizationDO;
import org.springframework.dao.DataAccessException;

/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.pm.dal.daointerface.ProjectRecoveryDebtorReorganizationDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/project_recovery_debtor_reorganization.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 

public class IbatisProjectRecoveryDebtorReorganizationDAO extends SqlMapClientDaoSupport implements ProjectRecoveryDebtorReorganizationDAO {
	/**
	 *  Insert one <tt>ProjectRecoveryDebtorReorganizationDO</tt> object to DB table <tt>project_recovery_debtor_reorganization</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into project_recovery_debtor_reorganization(project_recovery_id,applicant,accepting_court,debts_declare_end_time,division_we_declare_time,debts_confirm,council_circumstances,we_suggestion,re_execution_plan,settlement_scheme_content,liquidation_scheme,liquidation_situation,recovery_total_amount,memo,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param projectRecoveryDebtorReorganization
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(ProjectRecoveryDebtorReorganizationDO projectRecoveryDebtorReorganization) throws DataAccessException {
    	if (projectRecoveryDebtorReorganization == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-PROJECT-RECOVERY-DEBTOR-REORGANIZATION-INSERT", projectRecoveryDebtorReorganization);

        return projectRecoveryDebtorReorganization.getId();
    }

	/**
	 *  Update DB table <tt>project_recovery_debtor_reorganization</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update project_recovery_debtor_reorganization set project_recovery_id=?, applicant=?, accepting_court=?, debts_declare_end_time=?, division_we_declare_time=?, debts_confirm=?, council_circumstances=?, we_suggestion=?, re_execution_plan=?, settlement_scheme_content=?, liquidation_scheme=?, liquidation_situation=?, recovery_total_amount=?, memo=? where (id = ?)</tt>
	 *
	 *	@param projectRecoveryDebtorReorganization
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(ProjectRecoveryDebtorReorganizationDO projectRecoveryDebtorReorganization) throws DataAccessException {
    	if (projectRecoveryDebtorReorganization == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-PROJECT-RECOVERY-DEBTOR-REORGANIZATION-UPDATE", projectRecoveryDebtorReorganization);
    }

	/**
	 *  Query DB table <tt>project_recovery_debtor_reorganization</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from project_recovery_debtor_reorganization where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return ProjectRecoveryDebtorReorganizationDO
	 *	@throws DataAccessException
	 */	 
    public ProjectRecoveryDebtorReorganizationDO findById(long id) throws DataAccessException {
        Long param = new Long(id);

        return (ProjectRecoveryDebtorReorganizationDO) getSqlMapClientTemplate().queryForObject("MS-PROJECT-RECOVERY-DEBTOR-REORGANIZATION-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>project_recovery_debtor_reorganization</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from project_recovery_debtor_reorganization where (project_recovery_id = ?)</tt>
	 *
	 *	@param projectRecoveryId
	 *	@return ProjectRecoveryDebtorReorganizationDO
	 *	@throws DataAccessException
	 */	 
    public ProjectRecoveryDebtorReorganizationDO findByRecoveryId(long projectRecoveryId) throws DataAccessException {
        Long param = new Long(projectRecoveryId);

        return (ProjectRecoveryDebtorReorganizationDO) getSqlMapClientTemplate().queryForObject("MS-PROJECT-RECOVERY-DEBTOR-REORGANIZATION-FIND-BY-RECOVERY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>project_recovery_debtor_reorganization</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from project_recovery_debtor_reorganization where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException {
        Long param = new Long(id);

        return getSqlMapClientTemplate().delete("MS-PROJECT-RECOVERY-DEBTOR-REORGANIZATION-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>project_recovery_debtor_reorganization</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from project_recovery_debtor_reorganization where (project_recovery_id = ?)</tt>
	 *
	 *	@param projectRecoveryId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByRecoveryId(long projectRecoveryId) throws DataAccessException {
        Long param = new Long(projectRecoveryId);

        return getSqlMapClientTemplate().delete("MS-PROJECT-RECOVERY-DEBTOR-REORGANIZATION-DELETE-BY-RECOVERY-ID", param);
    }

}