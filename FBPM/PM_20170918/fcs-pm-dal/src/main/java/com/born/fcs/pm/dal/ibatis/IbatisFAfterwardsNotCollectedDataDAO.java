/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.pm.dal.daointerface.FAfterwardsNotCollectedDataDAO;


// auto generated imports
import com.born.fcs.pm.dal.dataobject.FAfterwardsNotCollectedDataDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.pm.dal.daointerface.FAfterwardsNotCollectedDataDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/f_afterwards_not_collected_data.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings("unchecked")

public class IbatisFAfterwardsNotCollectedDataDAO extends SqlMapClientDaoSupport implements FAfterwardsNotCollectedDataDAO {
	/**
	 *  Insert one <tt>FAfterwardsNotCollectedDataDO</tt> object to DB table <tt>f_afterwards_not_collected_data</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into f_afterwards_not_collected_data(form_id,type,remark,raw_add_time) values (?, ?, ?, ?)</tt>
	 *
	 *	@param FAfterwardsNotCollectedData
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(FAfterwardsNotCollectedDataDO FAfterwardsNotCollectedData) throws DataAccessException {
    	if (FAfterwardsNotCollectedData == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-F-AFTERWARDS-NOT-COLLECTED-DATA-INSERT", FAfterwardsNotCollectedData);

        return FAfterwardsNotCollectedData.getId();
    }

	/**
	 *  Update DB table <tt>f_afterwards_not_collected_data</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update f_afterwards_not_collected_data set form_id=?, type=?, remark=? where (id = ?)</tt>
	 *
	 *	@param FAfterwardsNotCollectedData
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(FAfterwardsNotCollectedDataDO FAfterwardsNotCollectedData) throws DataAccessException {
    	if (FAfterwardsNotCollectedData == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-F-AFTERWARDS-NOT-COLLECTED-DATA-UPDATE", FAfterwardsNotCollectedData);
    }

	/**
	 *  Query DB table <tt>f_afterwards_not_collected_data</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_afterwards_not_collected_data where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return FAfterwardsNotCollectedDataDO
	 *	@throws DataAccessException
	 */	 
    public FAfterwardsNotCollectedDataDO findById(long id) throws DataAccessException {
        Long param = new Long(id);

        return (FAfterwardsNotCollectedDataDO) getSqlMapClientTemplate().queryForObject("MS-F-AFTERWARDS-NOT-COLLECTED-DATA-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>f_afterwards_not_collected_data</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_afterwards_not_collected_data where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return List<FAfterwardsNotCollectedDataDO>
	 *	@throws DataAccessException
	 */	 
    public List<FAfterwardsNotCollectedDataDO> findByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return getSqlMapClientTemplate().queryForList("MS-F-AFTERWARDS-NOT-COLLECTED-DATA-FIND-BY-FORM-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>f_afterwards_not_collected_data</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_afterwards_not_collected_data where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException {
        Long param = new Long(id);

        return getSqlMapClientTemplate().delete("MS-F-AFTERWARDS-NOT-COLLECTED-DATA-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>f_afterwards_not_collected_data</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_afterwards_not_collected_data where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return getSqlMapClientTemplate().delete("MS-F-AFTERWARDS-NOT-COLLECTED-DATA-DELETE-BY-FORM-ID", param);
    }

}