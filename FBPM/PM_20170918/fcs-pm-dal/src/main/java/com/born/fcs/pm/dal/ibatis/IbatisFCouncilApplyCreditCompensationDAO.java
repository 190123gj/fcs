/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.pm.dal.daointerface.FCouncilApplyCreditCompensationDAO;


// auto generated imports
import com.born.fcs.pm.dal.dataobject.FCouncilApplyCreditCompensationDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.pm.dal.daointerface.FCouncilApplyCreditCompensationDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/f_council_apply_credit_compensation.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings("unchecked")

public class IbatisFCouncilApplyCreditCompensationDAO extends SqlMapClientDaoSupport implements FCouncilApplyCreditCompensationDAO {
	/**
	 *  Insert one <tt>FCouncilApplyCreditCompensationDO</tt> object to DB table <tt>f_council_apply_credit_compensation</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into f_council_apply_credit_compensation(id,handle_id,project_code,compensatory_principal,compensatory_interest,compensatory_interest_other,other_remark,expire_date,quasi_compensatory_time,json_data,sort_order,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param FCouncilApplyCreditCompensation
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(FCouncilApplyCreditCompensationDO FCouncilApplyCreditCompensation) throws DataAccessException {
    	if (FCouncilApplyCreditCompensation == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-F-COUNCIL-APPLY-CREDIT-COMPENSATION-INSERT", FCouncilApplyCreditCompensation);

        return FCouncilApplyCreditCompensation.getId();
    }

	/**
	 *  Update DB table <tt>f_council_apply_credit_compensation</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update f_council_apply_credit_compensation set handle_id=?, project_code=?, compensatory_principal=?, compensatory_interest=?, compensatory_interest_other=?, other_remark=?, expire_date=?, quasi_compensatory_time=?, json_data=?, sort_order=? where (id = ?)</tt>
	 *
	 *	@param FCouncilApplyCreditCompensation
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(FCouncilApplyCreditCompensationDO FCouncilApplyCreditCompensation) throws DataAccessException {
    	if (FCouncilApplyCreditCompensation == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-F-COUNCIL-APPLY-CREDIT-COMPENSATION-UPDATE", FCouncilApplyCreditCompensation);
    }

	/**
	 *  Query DB table <tt>f_council_apply_credit_compensation</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_council_apply_credit_compensation where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return FCouncilApplyCreditCompensationDO
	 *	@throws DataAccessException
	 */	 
    public FCouncilApplyCreditCompensationDO findById(long id) throws DataAccessException {
        Long param = new Long(id);

        return (FCouncilApplyCreditCompensationDO) getSqlMapClientTemplate().queryForObject("MS-F-COUNCIL-APPLY-CREDIT-COMPENSATION-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>f_council_apply_credit_compensation</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_council_apply_credit_compensation where (handle_id = ?)</tt>
	 *
	 *	@param handleId
	 *	@return List<FCouncilApplyCreditCompensationDO>
	 *	@throws DataAccessException
	 */	 
    public List<FCouncilApplyCreditCompensationDO> findByHandleId(long handleId) throws DataAccessException {
        Long param = new Long(handleId);

        return getSqlMapClientTemplate().queryForList("MS-F-COUNCIL-APPLY-CREDIT-COMPENSATION-FIND-BY-HANDLE-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>f_council_apply_credit_compensation</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_council_apply_credit_compensation where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException {
        Long param = new Long(id);

        return getSqlMapClientTemplate().delete("MS-F-COUNCIL-APPLY-CREDIT-COMPENSATION-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>f_council_apply_credit_compensation</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_council_apply_credit_compensation where (handle_id = ?)</tt>
	 *
	 *	@param handleId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByHandleId(long handleId) throws DataAccessException {
        Long param = new Long(handleId);

        return getSqlMapClientTemplate().delete("MS-F-COUNCIL-APPLY-CREDIT-COMPENSATION-DELETE-BY-HANDLE-ID", param);
    }

}