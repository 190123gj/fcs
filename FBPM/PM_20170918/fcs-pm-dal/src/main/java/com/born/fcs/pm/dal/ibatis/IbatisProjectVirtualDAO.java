/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.pm.dal.daointerface.ProjectVirtualDAO;


// auto generated imports
import com.born.fcs.pm.dal.dataobject.ProjectVirtualDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.pm.dal.daointerface.ProjectVirtualDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/project_virtual.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisProjectVirtualDAO extends SqlMapClientDaoSupport implements ProjectVirtualDAO {
	/**
	 *  Insert one <tt>ProjectVirtualDO</tt> object to DB table <tt>project_virtual</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into project_virtual(virtual_id,project_code,project_name,customer_id,customer_name,amount,busi_type,busi_type_name,apply_user_id,apply_user_account,apply_user_name,apply_dept_id,apply_dept_name,scheme,remark,attach,status,submit_time,form_names,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param projectVirtual
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(ProjectVirtualDO projectVirtual) throws DataAccessException {
    	if (projectVirtual == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-PROJECT-VIRTUAL-INSERT", projectVirtual);

        return projectVirtual.getVirtualId();
    }

	/**
	 *  Update DB table <tt>project_virtual</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update project_virtual set project_code=?, project_name=?, customer_id=?, customer_name=?, amount=?, busi_type=?, busi_type_name=?, apply_user_id=?, apply_user_account=?, apply_user_name=?, apply_dept_id=?, apply_dept_name=?, status=?, submit_time=?, remark=?, attach=? where (virtual_id = ?)</tt>
	 *
	 *	@param projectVirtual
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(ProjectVirtualDO projectVirtual) throws DataAccessException {
    	if (projectVirtual == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-PROJECT-VIRTUAL-UPDATE", projectVirtual);
    }

	/**
	 *  Update DB table <tt>project_virtual</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update project_virtual set project_code=?, status=? where (virtual_id = ?)</tt>
	 *
	 *	@param projectCode
	 *	@param status
	 *	@param virtualId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateProjectCodeAndStatus(String projectCode, String status, long virtualId) throws DataAccessException {
        Map param = new HashMap();

        param.put("projectCode", projectCode);
        param.put("status", status);
        param.put("virtualId", new Long(virtualId));

        return getSqlMapClientTemplate().update("MS-PROJECT-VIRTUAL-UPDATE-PROJECT-CODE-AND-STATUS", param);
    }

	/**
	 *  Query DB table <tt>project_virtual</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from project_virtual where (virtual_id = ?)</tt>
	 *
	 *	@param virtualId
	 *	@return ProjectVirtualDO
	 *	@throws DataAccessException
	 */	 
    public ProjectVirtualDO findById(long virtualId) throws DataAccessException {
        Long param = new Long(virtualId);

        return (ProjectVirtualDO) getSqlMapClientTemplate().queryForObject("MS-PROJECT-VIRTUAL-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>project_virtual</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from project_virtual where (project_code = ?)</tt>
	 *
	 *	@param projectCode
	 *	@return ProjectVirtualDO
	 *	@throws DataAccessException
	 */	 
    public ProjectVirtualDO findByProjectCode(String projectCode) throws DataAccessException {

        return (ProjectVirtualDO) getSqlMapClientTemplate().queryForObject("MS-PROJECT-VIRTUAL-FIND-BY-PROJECT-CODE", projectCode);

    }

	/**
	 *  Delete records from DB table <tt>project_virtual</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from project_virtual where (virtual_id = ?)</tt>
	 *
	 *	@param virtualId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long virtualId) throws DataAccessException {
        Long param = new Long(virtualId);

        return getSqlMapClientTemplate().delete("MS-PROJECT-VIRTUAL-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>project_virtual</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from project_virtual where (project_code = ?)</tt>
	 *
	 *	@param projectCode
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByProjectCode(String projectCode) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-PROJECT-VIRTUAL-DELETE-BY-PROJECT-CODE", projectCode);
    }

	/**
	 *  Query DB table <tt>project_virtual</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from project_virtual where (1 = 1)</tt>
	 *
	 *	@param projectVirtual
	 *	@param limitStart
	 *	@param pageSize
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param draftUserId
	 *	@param loginUserId
	 *	@param deptIdList
	 *	@param relatedRoleList
	 *	@return List<ProjectVirtualDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProjectVirtualDO> findByCondition(ProjectVirtualDO projectVirtual, long limitStart, long pageSize, String sortCol, String sortOrder, long draftUserId, long loginUserId, List deptIdList, List relatedRoleList) throws DataAccessException {
    	if (projectVirtual == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("projectVirtual", projectVirtual);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);
        param.put("draftUserId", new Long(draftUserId));
        param.put("loginUserId", new Long(loginUserId));
        param.put("deptIdList", deptIdList);
        param.put("relatedRoleList", relatedRoleList);

        return getSqlMapClientTemplate().queryForList("MS-PROJECT-VIRTUAL-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>project_virtual</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from project_virtual where (1 = 1)</tt>
	 *
	 *	@param projectVirtual
	 *	@param draftUserId
	 *	@param loginUserId
	 *	@param deptIdList
	 *	@param relatedRoleList
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(ProjectVirtualDO projectVirtual, long draftUserId, long loginUserId, List deptIdList, List relatedRoleList) throws DataAccessException {
    	if (projectVirtual == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("projectVirtual", projectVirtual);
        param.put("draftUserId", new Long(draftUserId));
        param.put("loginUserId", new Long(loginUserId));
        param.put("deptIdList", deptIdList);
        param.put("relatedRoleList", relatedRoleList);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-PROJECT-VIRTUAL-FIND-BY-CONDITION-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}