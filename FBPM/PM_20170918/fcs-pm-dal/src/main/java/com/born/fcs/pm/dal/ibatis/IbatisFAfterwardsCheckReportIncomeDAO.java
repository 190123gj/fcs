/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.pm.dal.daointerface.FAfterwardsCheckReportIncomeDAO;


// auto generated imports
import com.born.fcs.pm.dal.dataobject.FAfterwardsCheckReportIncomeDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.pm.dal.daointerface.FAfterwardsCheckReportIncomeDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/f_afterwards_check_report_income.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings("unchecked")

public class IbatisFAfterwardsCheckReportIncomeDAO extends SqlMapClientDaoSupport implements FAfterwardsCheckReportIncomeDAO {
	/**
	 *  Insert one <tt>FAfterwardsCheckReportIncomeDO</tt> object to DB table <tt>f_afterwards_check_report_income</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into f_afterwards_check_report_income(form_id,project_code,income_name,last_year,last_total_amount,last_total_day,last_average_day,last_accumulation,current_year,current_total_amount,current_total_day,current_average_day,current_accumulation,del_able,sort_order,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param FAfterwardsCheckReportIncome
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(FAfterwardsCheckReportIncomeDO FAfterwardsCheckReportIncome) throws DataAccessException {
    	if (FAfterwardsCheckReportIncome == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-F-AFTERWARDS-CHECK-REPORT-INCOME-INSERT", FAfterwardsCheckReportIncome);

        return FAfterwardsCheckReportIncome.getIncomeId();
    }

	/**
	 *  Update DB table <tt>f_afterwards_check_report_income</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update f_afterwards_check_report_income set form_id=?, project_code=?, income_name=?, last_year=?, last_total_amount=?, last_total_day=?, last_average_day=?, last_accumulation=?, current_year=?, current_total_amount=?, current_total_day=?, current_average_day=?, current_accumulation=?, del_able=?, sort_order=? where (income_id = ?)</tt>
	 *
	 *	@param FAfterwardsCheckReportIncome
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(FAfterwardsCheckReportIncomeDO FAfterwardsCheckReportIncome) throws DataAccessException {
    	if (FAfterwardsCheckReportIncome == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-F-AFTERWARDS-CHECK-REPORT-INCOME-UPDATE", FAfterwardsCheckReportIncome);
    }

	/**
	 *  Query DB table <tt>f_afterwards_check_report_income</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_afterwards_check_report_income where (income_id = ?)</tt>
	 *
	 *	@param incomeId
	 *	@return FAfterwardsCheckReportIncomeDO
	 *	@throws DataAccessException
	 */	 
    public FAfterwardsCheckReportIncomeDO findById(long incomeId) throws DataAccessException {
        Long param = new Long(incomeId);

        return (FAfterwardsCheckReportIncomeDO) getSqlMapClientTemplate().queryForObject("MS-F-AFTERWARDS-CHECK-REPORT-INCOME-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>f_afterwards_check_report_income</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_afterwards_check_report_income where (form_id = ?) order by sort_order ASC</tt>
	 *
	 *	@param formId
	 *	@return List<FAfterwardsCheckReportIncomeDO>
	 *	@throws DataAccessException
	 */	 
    public List<FAfterwardsCheckReportIncomeDO> findByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return getSqlMapClientTemplate().queryForList("MS-F-AFTERWARDS-CHECK-REPORT-INCOME-FIND-BY-FORM-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>f_afterwards_check_report_income</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_afterwards_check_report_income where (income_id = ?)</tt>
	 *
	 *	@param incomeId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long incomeId) throws DataAccessException {
        Long param = new Long(incomeId);

        return getSqlMapClientTemplate().delete("MS-F-AFTERWARDS-CHECK-REPORT-INCOME-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>f_afterwards_check_report_income</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_afterwards_check_report_income where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return getSqlMapClientTemplate().delete("MS-F-AFTERWARDS-CHECK-REPORT-INCOME-DELETE-BY-FORM-ID", param);
    }

}