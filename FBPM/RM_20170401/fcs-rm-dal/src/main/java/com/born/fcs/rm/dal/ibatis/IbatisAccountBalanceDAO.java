/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.rm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.rm.dal.daointerface.AccountBalanceDAO;


// auto generated imports
import com.born.fcs.rm.dal.dataobject.AccountBalanceDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.rm.dal.daointerface.AccountBalanceDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/account_balance.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisAccountBalanceDAO extends SqlMapClientDaoSupport implements AccountBalanceDAO {
	/**
	 *  Insert one <tt>AccountBalanceDO</tt> object to DB table <tt>account_balance</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into account_balance(report_year,report_month,version,operator_id,operator_account,operator_name,status,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param accountBalance
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(AccountBalanceDO accountBalance) throws DataAccessException {
    	if (accountBalance == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-ACCOUNT-BALANCE-INSERT", accountBalance);

        return accountBalance.getAccountBalanceId();
    }

	/**
	 *  Update DB table <tt>account_balance</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update account_balance set report_year=?, report_month=?, version=?, operator_id=?, operator_account=?, operator_name=?, status=? where (account_balance_id = ?)</tt>
	 *
	 *	@param accountBalance
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(AccountBalanceDO accountBalance) throws DataAccessException {
    	if (accountBalance == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-ACCOUNT-BALANCE-UPDATE", accountBalance);
    }

	/**
	 *  Update DB table <tt>account_balance</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update account_balance set version='HIS' where ((version = 'NOW') AND (report_year = ?) AND (report_month = ?))</tt>
	 *
	 *	@param accountBalance
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateToHis(AccountBalanceDO accountBalance) throws DataAccessException {
    	if (accountBalance == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-ACCOUNT-BALANCE-UPDATE-TO-HIS", accountBalance);
    }

	/**
	 *  Query DB table <tt>account_balance</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from account_balance where (account_balance_id = ?)</tt>
	 *
	 *	@param accountBalanceId
	 *	@return AccountBalanceDO
	 *	@throws DataAccessException
	 */	 
    public AccountBalanceDO findById(long accountBalanceId) throws DataAccessException {
        Long param = new Long(accountBalanceId);

        return (AccountBalanceDO) getSqlMapClientTemplate().queryForObject("MS-ACCOUNT-BALANCE-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>account_balance</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from account_balance where (account_balance_id = ?)</tt>
	 *
	 *	@param accountBalanceId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long accountBalanceId) throws DataAccessException {
        Long param = new Long(accountBalanceId);

        return getSqlMapClientTemplate().delete("MS-ACCOUNT-BALANCE-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>account_balance</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from account_balance where (1 = 1)</tt>
	 *
	 *	@param accountBalance
	 *	@param startTime
	 *	@param endTime
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(AccountBalanceDO accountBalance, Date startTime, Date endTime) throws DataAccessException {
    	if (accountBalance == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("accountBalance", accountBalance);
        param.put("startTime", startTime);
        param.put("endTime", endTime);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-ACCOUNT-BALANCE-FIND-BY-CONDITION-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>account_balance</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from account_balance where (1 = 1)</tt>
	 *
	 *	@param accountBalance
	 *	@param startTime
	 *	@param endTime
	 *	@param limitStart
	 *	@param pageSize
	 *	@param sortCol
	 *	@param sortOrder
	 *	@return List<AccountBalanceDO>
	 *	@throws DataAccessException
	 */	 
    public List<AccountBalanceDO> findByCondition(AccountBalanceDO accountBalance, Date startTime, Date endTime, long limitStart, long pageSize, String sortCol, String sortOrder) throws DataAccessException {
    	if (accountBalance == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("accountBalance", accountBalance);
        param.put("startTime", startTime);
        param.put("endTime", endTime);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);

        return getSqlMapClientTemplate().queryForList("MS-ACCOUNT-BALANCE-FIND-BY-CONDITION", param);

    }

}