/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.pm.dal.daointerface.FAfterwardsCheckLoanDAO;


// auto generated imports
import com.born.fcs.pm.dal.dataobject.FAfterwardsCheckLoanDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.pm.dal.daointerface.FAfterwardsCheckLoanDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/f_afterwards_check_loans.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisFAfterwardsCheckLoanDAO extends SqlMapClientDaoSupport implements FAfterwardsCheckLoanDAO {
	/**
	 *  Insert one <tt>FAfterwardsCheckLoanDO</tt> object to DB table <tt>f_afterwards_check_loans</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into f_afterwards_check_loans(form_id,loan_institution,loan_type,loan_amount,loan_balance,loan_time_limit,interest_rate,cash_deposit_rate,loan_expire_date,guarantee_way,del_able,remark,sort_order,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param FAfterwardsCheckLoan
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(FAfterwardsCheckLoanDO FAfterwardsCheckLoan) throws DataAccessException {
    	if (FAfterwardsCheckLoan == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-F-AFTERWARDS-CHECK-LOAN-INSERT", FAfterwardsCheckLoan);

        return FAfterwardsCheckLoan.getId();
    }

	/**
	 *  Update DB table <tt>f_afterwards_check_loans</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update f_afterwards_check_loans set form_id=?, loan_institution=?, loan_type=?, loan_amount=?, loan_balance=?, loan_time_limit=?, interest_rate=?, cash_deposit_rate=?, loan_expire_date=?, guarantee_way=?, del_able=?, remark=?, sort_order=? where (id = ?)</tt>
	 *
	 *	@param FAfterwardsCheckLoan
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(FAfterwardsCheckLoanDO FAfterwardsCheckLoan) throws DataAccessException {
    	if (FAfterwardsCheckLoan == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-F-AFTERWARDS-CHECK-LOAN-UPDATE", FAfterwardsCheckLoan);
    }

	/**
	 *  Query DB table <tt>f_afterwards_check_loans</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_afterwards_check_loans where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return FAfterwardsCheckLoanDO
	 *	@throws DataAccessException
	 */	 
    public FAfterwardsCheckLoanDO findById(long id) throws DataAccessException {
        Long param = new Long(id);

        return (FAfterwardsCheckLoanDO) getSqlMapClientTemplate().queryForObject("MS-F-AFTERWARDS-CHECK-LOAN-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>f_afterwards_check_loans</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_afterwards_check_loans where (form_id = ?) order by sort_order ASC</tt>
	 *
	 *	@param formId
	 *	@return List<FAfterwardsCheckLoanDO>
	 *	@throws DataAccessException
	 */	 
    public List<FAfterwardsCheckLoanDO> findByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return getSqlMapClientTemplate().queryForList("MS-F-AFTERWARDS-CHECK-LOAN-FIND-BY-FORM-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>f_afterwards_check_loans</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_afterwards_check_loans where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException {
        Long param = new Long(id);

        return getSqlMapClientTemplate().delete("MS-F-AFTERWARDS-CHECK-LOAN-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>f_afterwards_check_loans</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_afterwards_check_loans where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return getSqlMapClientTemplate().delete("MS-F-AFTERWARDS-CHECK-LOAN-DELETE-BY-FORM-ID", param);
    }

	/**
	 *  Query DB table <tt>f_afterwards_check_loans</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_afterwards_check_loans where (id = ?)</tt>
	 *
	 *	@param FAfterwardsCheckLoan
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<FAfterwardsCheckLoanDO>
	 *	@throws DataAccessException
	 */	 
    public List<FAfterwardsCheckLoanDO> findByCondition(FAfterwardsCheckLoanDO FAfterwardsCheckLoan, long limitStart, long pageSize) throws DataAccessException {
    	if (FAfterwardsCheckLoan == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("FAfterwardsCheckLoan", FAfterwardsCheckLoan);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-F-AFTERWARDS-CHECK-LOAN-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>f_afterwards_check_loans</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_afterwards_check_loans where (id = ?)</tt>
	 *
	 *	@param FAfterwardsCheckLoan
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(FAfterwardsCheckLoanDO FAfterwardsCheckLoan) throws DataAccessException {
    	if (FAfterwardsCheckLoan == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-F-AFTERWARDS-CHECK-LOAN-FIND-BY-CONDITION-COUNT", FAfterwardsCheckLoan);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}