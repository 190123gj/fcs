/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.pm.dal.daointerface.DbTableDAO;


// auto generated imports
import com.born.fcs.pm.dal.dataobject.DbTableDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.pm.dal.daointerface.DbTableDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/db_table.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisDbTableDAO extends SqlMapClientDaoSupport implements DbTableDAO {
	/**
	 *  Insert one <tt>DbTableDO</tt> object to DB table <tt>db_table</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into db_table(table_id,table_name,project_phase,table_for_short,class_name,remark,is_delete,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param dbTable
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(DbTableDO dbTable) throws DataAccessException {
    	if (dbTable == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-DB-TABLE-INSERT", dbTable);

        return dbTable.getTableId();
    }

	/**
	 *  Update DB table <tt>db_table</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update db_table set table_name=?, project_phase=?, table_for_short=?, class_name=?, remark=?, is_delete=? where (table_id = ?)</tt>
	 *
	 *	@param dbTable
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(DbTableDO dbTable) throws DataAccessException {
    	if (dbTable == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-DB-TABLE-UPDATE", dbTable);
    }

	/**
	 *  Query DB table <tt>db_table</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from db_table where ((table_id = ?) AND (is_delete = "NO"))</tt>
	 *
	 *	@param tableId
	 *	@return DbTableDO
	 *	@throws DataAccessException
	 */	 
    public DbTableDO findById(long tableId) throws DataAccessException {
        Long param = new Long(tableId);

        return (DbTableDO) getSqlMapClientTemplate().queryForObject("MS-DB-TABLE-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>db_table</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from db_table where (table_id = ?)</tt>
	 *
	 *	@param tableId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long tableId) throws DataAccessException {
        Long param = new Long(tableId);

        return getSqlMapClientTemplate().delete("MS-DB-TABLE-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>db_table</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from db_table where ((table_name = ?) AND (is_delete = "NO"))</tt>
	 *
	 *	@param dbTable
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByName(DbTableDO dbTable) throws DataAccessException {
    	if (dbTable == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-DB-TABLE-FIND-BY-NAME", dbTable);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>db_table</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from db_table where ((1 = 1) AND (is_delete = "NO"))</tt>
	 *
	 *	@param dbTable
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(DbTableDO dbTable) throws DataAccessException {
    	if (dbTable == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-DB-TABLE-FIND-BY-CONDITION-COUNT", dbTable);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>db_table</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from db_table where ((1 = 1) AND (is_delete = "NO"))</tt>
	 *
	 *	@param dbTable
	 *	@param limitStart
	 *	@param pageSize
	 *	@param sortCol
	 *	@param sortOrder
	 *	@return List<DbTableDO>
	 *	@throws DataAccessException
	 */	 
    public List<DbTableDO> findByCondition(DbTableDO dbTable, long limitStart, long pageSize, String sortCol, String sortOrder) throws DataAccessException {
    	if (dbTable == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("dbTable", dbTable);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);

        return getSqlMapClientTemplate().queryForList("MS-DB-TABLE-FIND-BY-CONDITION", param);

    }

}