/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.pm.dal.daointerface.FInvestigationMabilityReviewLeadingTeamDAO;


// auto generated imports
import com.born.fcs.pm.dal.dataobject.FInvestigationMabilityReviewLeadingTeamDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.pm.dal.daointerface.FInvestigationMabilityReviewLeadingTeamDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/f_investigation_mability_review_leading_team.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisFInvestigationMabilityReviewLeadingTeamDAO extends SqlMapClientDaoSupport implements FInvestigationMabilityReviewLeadingTeamDAO {
	/**
	 *  Insert one <tt>FInvestigationMabilityReviewLeadingTeamDO</tt> object to DB table <tt>f_investigation_mability_review_leading_team</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into f_investigation_mability_review_leading_team(ma_review_id,owner,name,sex,age,degree,title,resume,sort_order,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param FInvestigationMabilityReviewLeadingTeam
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(FInvestigationMabilityReviewLeadingTeamDO FInvestigationMabilityReviewLeadingTeam) throws DataAccessException {
    	if (FInvestigationMabilityReviewLeadingTeam == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-F-INVESTIGATION-MABILITY-REVIEW-LEADING-TEAM-INSERT", FInvestigationMabilityReviewLeadingTeam);

        return FInvestigationMabilityReviewLeadingTeam.getId();
    }

	/**
	 *  Update DB table <tt>f_investigation_mability_review_leading_team</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update f_investigation_mability_review_leading_team set ma_review_id=?, owner=?, name=?, sex=?, age=?, degree=?, title=?, resume=?, sort_order=? where (id = ?)</tt>
	 *
	 *	@param FInvestigationMabilityReviewLeadingTeam
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(FInvestigationMabilityReviewLeadingTeamDO FInvestigationMabilityReviewLeadingTeam) throws DataAccessException {
    	if (FInvestigationMabilityReviewLeadingTeam == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-F-INVESTIGATION-MABILITY-REVIEW-LEADING-TEAM-UPDATE", FInvestigationMabilityReviewLeadingTeam);
    }

	/**
	 *  Query DB table <tt>f_investigation_mability_review_leading_team</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_investigation_mability_review_leading_team where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return FInvestigationMabilityReviewLeadingTeamDO
	 *	@throws DataAccessException
	 */	 
    public FInvestigationMabilityReviewLeadingTeamDO findById(long id) throws DataAccessException {
        Long param = new Long(id);

        return (FInvestigationMabilityReviewLeadingTeamDO) getSqlMapClientTemplate().queryForObject("MS-F-INVESTIGATION-MABILITY-REVIEW-LEADING-TEAM-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>f_investigation_mability_review_leading_team</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_investigation_mability_review_leading_team where ((owner = ?) AND (ma_review_id = ?)) order by sort_order ASC</tt>
	 *
	 *	@param owner
	 *	@param maReviewId
	 *	@return List<FInvestigationMabilityReviewLeadingTeamDO>
	 *	@throws DataAccessException
	 */	 
    public List<FInvestigationMabilityReviewLeadingTeamDO> findByOwnerAndReviewId(String owner, long maReviewId) throws DataAccessException {
        Map param = new HashMap();

        param.put("owner", owner);
        param.put("maReviewId", new Long(maReviewId));

        return getSqlMapClientTemplate().queryForList("MS-F-INVESTIGATION-MABILITY-REVIEW-LEADING-TEAM-FIND-BY-OWNER-AND-REVIEW-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>f_investigation_mability_review_leading_team</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_investigation_mability_review_leading_team where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException {
        Long param = new Long(id);

        return getSqlMapClientTemplate().delete("MS-F-INVESTIGATION-MABILITY-REVIEW-LEADING-TEAM-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>f_investigation_mability_review_leading_team</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_investigation_mability_review_leading_team where ((owner = ?) AND (ma_review_id = ?))</tt>
	 *
	 *	@param owner
	 *	@param maReviewId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByOwnerAndReviewId(String owner, long maReviewId) throws DataAccessException {
        Map param = new HashMap();

        param.put("owner", owner);
        param.put("maReviewId", new Long(maReviewId));

        return getSqlMapClientTemplate().delete("MS-F-INVESTIGATION-MABILITY-REVIEW-LEADING-TEAM-DELETE-BY-OWNER-AND-REVIEW-ID", param);
    }

}