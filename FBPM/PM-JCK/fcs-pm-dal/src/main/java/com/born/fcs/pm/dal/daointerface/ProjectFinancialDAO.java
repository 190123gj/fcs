/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.daointerface;

// auto generated imports
import com.born.fcs.pm.dal.dataobject.ProjectFinancialDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Date;

/**
 * A dao interface provides methods to access database table <tt>project_financial</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/project_financial.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface ProjectFinancialDAO {
	/**
	 *  Insert one <tt>ProjectFinancialDO</tt> object to DB table <tt>project_financial</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into project_financial(project_id,project_code,project_name,product_id,product_type,product_name,term_type,interest_type,time_limit,time_unit,issue_institution,interest_rate,interest_settlement_way,expect_buy_date,expect_expire_date,price,buy_num,risk_level,risk_measure,attach_name,attach_url,create_user_id,create_user_account,create_user_name,dept_id,dept_code,dept_name,dept_path,dept_path_name,actual_buy_date,actual_expire_date,actual_price,actual_buy_num,original_hold_num,actual_hold_num,actual_principal,actual_interest,actual_interest_rate,transfered_num,buy_back_num,redeemed_num,status,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param projectFinancial
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(ProjectFinancialDO projectFinancial) throws DataAccessException;

	/**
	 *  Update DB table <tt>project_financial</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update project_financial set project_code=?, project_name=?, product_id=?, product_type=?, product_name=?, term_type=?, interest_type=?, time_limit=?, time_unit=?, issue_institution=?, interest_rate=?, interest_settlement_way=?, expect_buy_date=?, expect_expire_date=?, price=?, buy_num=?, risk_level=?, risk_measure=?, attach_name=?, attach_url=?, create_user_id=?, create_user_account=?, create_user_name=?, dept_id=?, dept_code=?, dept_name=?, dept_path=?, dept_path_name=?, actual_buy_date=?, actual_expire_date=?, actual_price=?, actual_buy_num=?, actual_hold_num=?, original_hold_num=?, actual_principal=?, actual_interest=?, actual_interest_rate=?, transfered_num=?, buy_back_num=?, redeemed_num=?, status=? where (project_id = ?)</tt>
	 *
	 *	@param projectFinancial
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(ProjectFinancialDO projectFinancial) throws DataAccessException;

	/**
	 *  Query DB table <tt>project_financial</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from project_financial where (project_id = ?)</tt>
	 *
	 *	@param projectId
	 *	@return ProjectFinancialDO
	 *	@throws DataAccessException
	 */	 
    public ProjectFinancialDO findById(long projectId) throws DataAccessException;

	/**
	 *  Query DB table <tt>project_financial</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from project_financial where (project_code = ?)</tt>
	 *
	 *	@param projectCode
	 *	@return ProjectFinancialDO
	 *	@throws DataAccessException
	 */	 
    public ProjectFinancialDO findByCode(String projectCode) throws DataAccessException;

	/**
	 *  Query DB table <tt>project_financial</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from project_financial where (project_code = ?) for update</tt>
	 *
	 *	@param projectCode
	 *	@return ProjectFinancialDO
	 *	@throws DataAccessException
	 */	 
    public ProjectFinancialDO findByCodeForUpdate(String projectCode) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>project_financial</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from project_financial where (project_id = ?)</tt>
	 *
	 *	@param projectId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long projectId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>project_financial</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from project_financial where (project_code = ?)</tt>
	 *
	 *	@param projectCode
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByCode(String projectCode) throws DataAccessException;

	/**
	 *  Query DB table <tt>project_financial</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from project_financial where (1 = 1)</tt>
	 *
	 *	@param projectFinancial
	 *	@param loginUserId
	 *	@param deptIdList
	 *	@param status
	 *	@param hasHoldNum
	 *	@param hasOrignalHoldNum
	 *	@param buyDateStart
	 *	@param buyDateEnd
	 *	@param expireDateStart
	 *	@param expireDateEnd
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<ProjectFinancialDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProjectFinancialDO> findByCondition(ProjectFinancialDO projectFinancial, long loginUserId, List deptIdList, List status, String hasHoldNum, String hasOrignalHoldNum, Date buyDateStart, Date buyDateEnd, Date expireDateStart, Date expireDateEnd, String sortCol, String sortOrder, long limitStart, long pageSize) throws DataAccessException;

	/**
	 *  Query DB table <tt>project_financial</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from project_financial where (1 = 1)</tt>
	 *
	 *	@param projectFinancial
	 *	@param loginUserId
	 *	@param deptIdList
	 *	@param status
	 *	@param hasHoldNum
	 *	@param hasOrignalHoldNum
	 *	@param buyDateStart
	 *	@param buyDateEnd
	 *	@param expireDateStart
	 *	@param expireDateEnd
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(ProjectFinancialDO projectFinancial, long loginUserId, List deptIdList, List status, String hasHoldNum, String hasOrignalHoldNum, Date buyDateStart, Date buyDateEnd, Date expireDateStart, Date expireDateEnd) throws DataAccessException;

}