/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.pm.dal.daointerface.FFileDAO;


// auto generated imports
import com.born.fcs.pm.dal.dataobject.FFileDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.pm.dal.daointerface.FFileDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/f_file.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisFFileDAO extends SqlMapClientDaoSupport implements FFileDAO {
	/**
	 *  Insert one <tt>FFileDO</tt> object to DB table <tt>f_file</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into f_file(form_id,file_code,type,project_code,project_name,customer_id,customer_name,busi_manager_id,busi_manager_name,first_loan_time,filing_time,hand_over_dept_code,hand_over_dept,hand_over_man_id,hand_over_man,hand_over_time,principal_man,vice_manager,receive_dept_code,receive_dept,receive_man_id,receive_man,receive_time,status,file_check_status,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param FFile
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(FFileDO FFile) throws DataAccessException {
    	if (FFile == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-F-FILE-INSERT", FFile);

        return FFile.getFileId();
    }

	/**
	 *  Update DB table <tt>f_file</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update f_file set form_id=?, file_code=?, type=?, project_code=?, project_name=?, customer_id=?, customer_name=?, busi_manager_id=?, busi_manager_name=?, first_loan_time=?, filing_time=?, hand_over_dept_code=?, hand_over_dept=?, hand_over_man_id=?, hand_over_man=?, hand_over_time=?, principal_man=?, vice_manager=?, receive_dept_code=?, receive_dept=?, receive_man_id=?, receive_man=?, receive_time=?, status=?, file_check_status=? where (file_id = ?)</tt>
	 *
	 *	@param FFile
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(FFileDO FFile) throws DataAccessException {
    	if (FFile == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-F-FILE-UPDATE", FFile);
    }

	/**
	 *  Update DB table <tt>f_file</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update f_file set file_code=?, type=?, project_code=?, project_name=?, customer_id=?, customer_name=?, busi_manager_id=?, busi_manager_name=?, first_loan_time=?, filing_time=?, hand_over_dept_code=?, hand_over_dept=?, hand_over_man_id=?, hand_over_man=?, hand_over_time=?, principal_man=?, vice_manager=?, receive_dept_code=?, receive_dept=?, receive_man_id=?, receive_man=?, receive_time=?, status=?, file_check_status=? where (form_id = ?)</tt>
	 *
	 *	@param FFile
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateByFormId(FFileDO FFile) throws DataAccessException {
    	if (FFile == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-F-FILE-UPDATE-BY-FORM-ID", FFile);
    }

	/**
	 *  Query DB table <tt>f_file</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_file where (file_id = ?)</tt>
	 *
	 *	@param fileId
	 *	@return FFileDO
	 *	@throws DataAccessException
	 */	 
    public FFileDO findById(long fileId) throws DataAccessException {
        Long param = new Long(fileId);

        return (FFileDO) getSqlMapClientTemplate().queryForObject("MS-F-FILE-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>f_file</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_file where ((form_id = ?) AND (type = ?))</tt>
	 *
	 *	@param formId
	 *	@param type
	 *	@return FFileDO
	 *	@throws DataAccessException
	 */	 
    public FFileDO findByFormId(long formId, String type) throws DataAccessException {
        Map param = new HashMap();

        param.put("formId", new Long(formId));
        param.put("type", type);

        return (FFileDO) getSqlMapClientTemplate().queryForObject("MS-F-FILE-FIND-BY-FORM-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>f_file</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_file where (file_id = ?)</tt>
	 *
	 *	@param fileId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long fileId) throws DataAccessException {
        Long param = new Long(fileId);

        return getSqlMapClientTemplate().delete("MS-F-FILE-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>f_file</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_file where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return getSqlMapClientTemplate().delete("MS-F-FILE-DELETE-BY-FORM-ID", param);
    }

	/**
	 *  Query DB table <tt>f_file</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_file where (1 = 1)</tt>
	 *
	 *	@param FFile
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<FFileDO>
	 *	@throws DataAccessException
	 */	 
    public List<FFileDO> findByCondition(FFileDO FFile, long limitStart, long pageSize) throws DataAccessException {
    	if (FFile == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("FFile", FFile);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-F-FILE-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>f_file</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from f_file where (1 = 1)</tt>
	 *
	 *	@param FFile
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(FFileDO FFile) throws DataAccessException {
    	if (FFile == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-F-FILE-FIND-BY-CONDITION-COUNT", FFile);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}