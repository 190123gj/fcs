/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.pm.dal.daointerface.FFileInputDAO;


// auto generated imports
import com.born.fcs.pm.dal.dataobject.FFileInputDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.pm.dal.daointerface.FFileInputDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/f_file_input.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisFFileInputDAO extends SqlMapClientDaoSupport implements FFileInputDAO {
	/**
	 *  Insert one <tt>FFileInputDO</tt> object to DB table <tt>f_file_input</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into f_file_input(file_id,file_code,type,form_id,project_code,project_name,customer_id,customer_name,first_loan_time,filing_time,hand_over_dept,hand_over_man,hand_over_time,principal_man,vice_manager,receive_dept,receive_man,receive_time,status,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param FFileInput
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(FFileInputDO FFileInput) throws DataAccessException {
    	if (FFileInput == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-F-FILE-INPUT-INSERT", FFileInput);

        return FFileInput.getInputId();
    }

	/**
	 *  Update DB table <tt>f_file_input</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update f_file_input set first_loan_time=?, filing_time=?, hand_over_dept=?, hand_over_man=?, hand_over_time=?, principal_man=?, vice_manager=?, receive_dept=?, receive_man=?, receive_time=?, status=? where (input_id = ?)</tt>
	 *
	 *	@param FFileInput
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(FFileInputDO FFileInput) throws DataAccessException {
    	if (FFileInput == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-F-FILE-INPUT-UPDATE", FFileInput);
    }

	/**
	 *  Query DB table <tt>f_file_input</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_file_input where (input_id = ?)</tt>
	 *
	 *	@param inputId
	 *	@return FFileInputDO
	 *	@throws DataAccessException
	 */	 
    public FFileInputDO findById(long inputId) throws DataAccessException {
        Long param = new Long(inputId);

        return (FFileInputDO) getSqlMapClientTemplate().queryForObject("MS-F-FILE-INPUT-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>f_file_input</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_file_input where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return List<FFileInputDO>
	 *	@throws DataAccessException
	 */	 
    public List<FFileInputDO> findByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return getSqlMapClientTemplate().queryForList("MS-F-FILE-INPUT-FIND-BY-FORM-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>f_file_input</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_file_input where (input_id = ?)</tt>
	 *
	 *	@param inputId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long inputId) throws DataAccessException {
        Long param = new Long(inputId);

        return getSqlMapClientTemplate().delete("MS-F-FILE-INPUT-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>f_file_input</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_file_input where (1 = 1)</tt>
	 *
	 *	@param FFileInput
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<FFileInputDO>
	 *	@throws DataAccessException
	 */	 
    public List<FFileInputDO> findByCondition(FFileInputDO FFileInput, long limitStart, long pageSize) throws DataAccessException {
    	if (FFileInput == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("FFileInput", FFileInput);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-F-FILE-INPUT-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>f_file_input</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from f_file_input where (1 = 1)</tt>
	 *
	 *	@param FFileInput
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(FFileInputDO FFileInput) throws DataAccessException {
    	if (FFileInput == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-F-FILE-INPUT-FIND-BY-CONDITION-COUNT", FFileInput);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}