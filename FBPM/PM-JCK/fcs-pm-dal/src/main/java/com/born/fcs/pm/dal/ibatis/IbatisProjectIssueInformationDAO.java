/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.dao.DataAccessException;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.born.fcs.pm.dal.daointerface.ProjectIssueInformationDAO;
// auto generated imports
import com.born.fcs.pm.dal.dataobject.ProjectIssueInformationDO;

/**
 * An ibatis based implementation of dao interface
 * <tt>com.born.fcs.pm.dal.daointerface.ProjectIssueInformationDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access
 * Layer) code generation utility specially developed for <tt>paygw</tt>
 * project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be
 * OVERWRITTEN by someone else. To modify the file, you should go to directory
 * <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding
 * configuration file (<tt>tables/project_issue_information.xml</tt>). Modify
 * the configuration file according to your needs, then run
 * <tt>specialmer-dalgen</tt> to generate this file.
 *
 * @author peigen
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public class IbatisProjectIssueInformationDAO extends SqlMapClientDaoSupport implements
																			ProjectIssueInformationDAO {
	/**
	 * Insert one <tt>ProjectIssueInformationDO</tt> object to DB table
	 * <tt>project_issue_information</tt>, return primary key
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>insert into project_issue_information(project_code,project_name,customer_id,customer_name,customer_type,busi_type,busi_type_name,time_limit,time_unit,amount,institution_id,institution_name,issue_rate,project_gist,bond_code,letter_url,voucher_url,actual_amount,issue_date,expire_time,is_continue,status,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 * @param projectIssueInformation
	 * @return long
	 * @throws DataAccessException
	 */
	public long insert(ProjectIssueInformationDO projectIssueInformation)
																			throws DataAccessException {
		if (projectIssueInformation == null) {
			throw new IllegalArgumentException("Can't insert a null data object into db.");
		}
		
		getSqlMapClientTemplate().insert("MS-PROJECT-ISSUE-INFORMATION-INSERT",
			projectIssueInformation);
		
		return projectIssueInformation.getId();
	}
	
	/**
	 * Update DB table <tt>project_issue_information</tt>.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>update project_issue_information set project_code=?, project_name=?, customer_id=?, customer_name=?, customer_type=?, busi_type=?, busi_type_name=?, time_limit=?, time_unit=?, amount=?, institution_id=?, institution_name=?, issue_rate=?, project_gist=?, bond_code=?, letter_url=?, voucher_url=?, actual_amount=?, issue_date=?, expire_time=?, is_continue=?, status=? where (id = ?)</tt>
	 *
	 * @param projectIssueInformation
	 * @return int
	 * @throws DataAccessException
	 */
	public int update(ProjectIssueInformationDO projectIssueInformation) throws DataAccessException {
		if (projectIssueInformation == null) {
			throw new IllegalArgumentException("Can't update by a null data object.");
		}
		
		return getSqlMapClientTemplate().update("MS-PROJECT-ISSUE-INFORMATION-UPDATE",
			projectIssueInformation);
	}
	
	/**
	 * Query DB table <tt>project_issue_information</tt> for records.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>select * from project_issue_information where (id = ?)</tt>
	 *
	 * @param id
	 * @return ProjectIssueInformationDO
	 * @throws DataAccessException
	 */
	public ProjectIssueInformationDO findById(long id) throws DataAccessException {
		Long param = new Long(id);
		
		return (ProjectIssueInformationDO) getSqlMapClientTemplate().queryForObject(
			"MS-PROJECT-ISSUE-INFORMATION-FIND-BY-ID", param);
		
	}
	
	/**
	 * Query DB table <tt>project_issue_information</tt> for records.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>select * from project_issue_information where (project_code = ?)</tt>
	 *
	 * @param projectCode
	 * @return List<ProjectIssueInformationDO>
	 * @throws DataAccessException
	 */
	public List<ProjectIssueInformationDO> findByProjectCode(String projectCode)
																				throws DataAccessException {
		
		return getSqlMapClientTemplate().queryForList(
			"MS-PROJECT-ISSUE-INFORMATION-FIND-BY-PROJECT-CODE", projectCode);
		
	}
	
	/**
	 * Delete records from DB table <tt>project_issue_information</tt>.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>delete from project_issue_information where (id = ?)</tt>
	 *
	 * @param id
	 * @return int
	 * @throws DataAccessException
	 */
	public int deleteById(long id) throws DataAccessException {
		Long param = new Long(id);
		
		return getSqlMapClientTemplate().delete("MS-PROJECT-ISSUE-INFORMATION-DELETE-BY-ID", param);
	}
	
	/**
	 * Query DB table <tt>project_issue_information</tt> for records.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>select * from project_issue_information where (1 = 1)</tt>
	 *
	 * @param projectIssueInformation
	 * @param limitStart
	 * @param pageSize
	 * @return List<ProjectIssueInformationDO>
	 * @throws DataAccessException
	 */
	public List<ProjectIssueInformationDO> findByCondition(	ProjectIssueInformationDO projectIssueInformation,
															long limitStart, long pageSize)
																							throws DataAccessException {
		if (projectIssueInformation == null) {
			throw new IllegalArgumentException("Can't select by a null data object.");
		}
		
		Map param = new HashMap();
		
		param.put("projectIssueInformation", projectIssueInformation);
		param.put("limitStart", new Long(limitStart));
		param.put("pageSize", new Long(pageSize));
		
		return getSqlMapClientTemplate().queryForList(
			"MS-PROJECT-ISSUE-INFORMATION-FIND-BY-CONDITION", param);
		
	}
	
	/**
	 * Query DB table <tt>project_issue_information</tt> for records.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>select COUNT(*) from project_issue_information where (1 = 1)</tt>
	 *
	 * @param projectIssueInformation
	 * @return long
	 * @throws DataAccessException
	 */
	public long findByConditionCount(ProjectIssueInformationDO projectIssueInformation)
																						throws DataAccessException {
		if (projectIssueInformation == null) {
			throw new IllegalArgumentException("Can't select by a null data object.");
		}
		Map param = new HashMap();
		
		param.put("projectIssueInformation", projectIssueInformation);
		
		Long retObj = (Long) getSqlMapClientTemplate().queryForObject(
			"MS-PROJECT-ISSUE-INFORMATION-FIND-BY-CONDITION-COUNT", param);
		
		if (retObj == null) {
			return 0;
		} else {
			return retObj.longValue();
		}
		
	}
	
}