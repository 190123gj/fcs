<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>rent</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>specialmer-dalgen</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author peigen                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="specialmer">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table project -->
    <resultMap id="RM-PROJECT" class="com.born.fcs.pm.dal.dataobject.ProjectDO">
        <result property="projectId" column="project_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="projectCode" column="project_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="projectName" column="project_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="customerId" column="customer_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="customerName" column="customer_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="customerType" column="customer_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="busiType" column="busi_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="busiTypeName" column="busi_type_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="busiSubType" column="busi_sub_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="busiSubTypeName" column="busi_sub_type_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="industryCode" column="industry_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="industryName" column="industry_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="loanPurpose" column="loan_purpose" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="timeLimit" column="time_limit" javaType="int" jdbcType="INT" nullValue="0"/>
        <result property="timeUnit" column="time_unit" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="startTime" column="start_time" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="endTime" column="end_time" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="amount" column="amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="accumulatedIssueAmount" column="accumulated_issue_amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="loanedAmount" column="loaned_amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="usedAmount" column="used_amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="repayedAmount" column="repayed_amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="chargedAmount" column="charged_amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="refundAmount" column="refund_amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="isMaximumAmount" column="is_maximum_amount" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="releasedAmount" column="released_amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="releasableAmount" column="releasable_amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="releasingAmount" column="releasing_amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="customerDepositAmount" column="customer_deposit_amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="selfDepositAmount" column="self_deposit_amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="compPrincipalAmount" column="comp_principal_amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="compInterestAmount" column="comp_interest_amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="contractNo" column="contract_no" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="contractTime" column="contract_time" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="spId" column="sp_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="spCode" column="sp_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="isApproval" column="is_approval" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="isApprovalDel" column="is_approval_del" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="approvalTime" column="approval_time" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="busiManagerId" column="busi_manager_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="busiManagerAccount" column="busi_manager_account" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="busiManagerName" column="busi_manager_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="busiManagerbId" column="busi_managerb_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="busiManagerbAccount" column="busi_managerb_account" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="busiManagerbName" column="busi_managerb_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="deptId" column="dept_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="deptCode" column="dept_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="deptName" column="dept_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="deptPath" column="dept_path" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="deptPathName" column="dept_path_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="phases" column="phases" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="phasesStatus" column="phases_status" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="status" column="status" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="isContinue" column="is_continue" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="isRecouncil" column="is_recouncil" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="lastRecouncilTime" column="last_recouncil_time" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="rawAddTime" column="raw_add_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="rawUpdateTime" column="raw_update_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisProjectDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisProjectDAO.insert -->
    <insert id="MS-PROJECT-INSERT">
        insert /*MS-YRD-PROJECT-INSERT*/ into project(project_id,project_code,project_name,customer_id,customer_name,customer_type,busi_type,busi_type_name,busi_sub_type,busi_sub_type_name,industry_code,industry_name,loan_purpose,time_limit,time_unit,start_time,end_time,amount,accumulated_issue_amount,loaned_amount,used_amount,repayed_amount,charged_amount,refund_amount,is_maximum_amount,releasable_amount,released_amount,releasing_amount,customer_deposit_amount,self_deposit_amount,comp_principal_amount,comp_interest_amount,contract_no,contract_time,sp_id,sp_code,is_approval,is_approval_del,approval_time,busi_manager_id,busi_manager_account,busi_manager_name,busi_managerb_id,busi_managerb_account,busi_managerb_name,dept_id,dept_code,dept_name,dept_path,dept_path_name,phases,phases_status,status,is_continue,is_recouncil,last_recouncil_time,raw_add_time) values (#projectId#, #projectCode#, #projectName#, #customerId#, #customerName#, #customerType#, #busiType#, #busiTypeName#, #busiSubType#,#busiSubTypeName#,#industryCode#, #industryName#, #loanPurpose#, #timeLimit#, #timeUnit#, #startTime#, #endTime#, #amount.cent#, #accumulatedIssueAmount.cent#, #loanedAmount.cent#, #usedAmount.cent#, #repayedAmount.cent#,#chargedAmount.cent#,#refundAmount.cent#, #isMaximumAmount#, #releasableAmount.cent#, #releasedAmount.cent#, #releasingAmount.cent#, #customerDepositAmount.cent#, #selfDepositAmount.cent#, #compPrincipalAmount.cent#, #compInterestAmount.cent#, #contractNo#, #contractTime#, #spId#, #spCode#, #isApproval#, #isApprovalDel#, #approvalTime#, #busiManagerId#, #busiManagerAccount#, #busiManagerName#, #busiManagerbId#, #busiManagerbAccount#, #busiManagerbName#, #deptId#, #deptCode#, #deptName#, #deptPath#, #deptPathName#, #phases#, #phasesStatus#, #status#, #isContinue#, #isRecouncil#, #lastRecouncilTime#, SYSDATE())
				<selectKey  resultClass ="long"  keyProperty ="projectId" >   
		          		 SELECT LAST_INSERT_ID() AS ID 
		      	</selectKey>
    </insert>

    <!-- mapped statement for IbatisProjectDAO.update -->
    <update id="MS-PROJECT-UPDATE">
    <![CDATA[
        update /*MS-YRD-PROJECT-UPDATE*/ project set project_code=#projectCode#, project_name=#projectName#, customer_id=#customerId#, customer_name=#customerName#, customer_type=#customerType#, busi_type=#busiType#, busi_type_name=#busiTypeName#, busi_sub_type=#busiSubType#, busi_sub_type_name=#busiSubTypeName#, industry_code=#industryCode#, industry_name=#industryName#, loan_purpose=#loanPurpose#, time_limit=#timeLimit#, time_unit=#timeUnit#, start_time=#startTime#, end_time=#endTime#, amount=#amount.cent#, accumulated_issue_amount=#accumulatedIssueAmount.cent#, loaned_amount=#loanedAmount.cent#, used_amount=#usedAmount.cent#, repayed_amount=#repayedAmount.cent#, charged_amount=#chargedAmount.cent#, refund_amount=#refundAmount.cent#, is_maximum_amount=#isMaximumAmount#, releasable_amount=#releasableAmount.cent#, released_amount=#releasedAmount.cent#, releasing_amount=#releasingAmount.cent#, customer_deposit_amount=#customerDepositAmount.cent#, self_deposit_amount=#selfDepositAmount.cent#, comp_principal_amount=#compPrincipalAmount.cent#, comp_interest_amount=#compInterestAmount.cent#, contract_no=#contractNo#, contract_time=#contractTime#, sp_id=#spId#, sp_code=#spCode#, is_approval=#isApproval#, is_approval_del=#isApprovalDel#, approval_time=#approvalTime#, busi_manager_id=#busiManagerId#, busi_manager_account=#busiManagerAccount#, busi_manager_name=#busiManagerName#, busi_managerb_id=#busiManagerbId#, busi_managerb_account=#busiManagerbAccount#, busi_managerb_name=#busiManagerbName#, dept_id=#deptId#, dept_code=#deptCode#, dept_name=#deptName#, dept_path=#deptPath#, dept_path_name=#deptPathName#, phases=#phases#, phases_status=#phasesStatus#, status=#status#, is_continue=#isContinue#, is_recouncil=#isRecouncil#, last_recouncil_time=#lastRecouncilTime# where (project_id = #projectId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisProjectDAO.updateByProjectCode -->
    <update id="MS-PROJECT-UPDATE-BY-PROJECT-CODE">
    <![CDATA[
        update /*MS-YRD-PROJECT-UPDATE-BY-PROJECT-CODE*/ project set project_name=#projectName#, customer_id=#customerId#, customer_name=#customerName#, customer_type=#customerType#, busi_type=#busiType#, busi_type_name=#busiTypeName#, busi_sub_type=#busiSubType#, busi_sub_type_name=#busiSubTypeName#, industry_code=#industryCode#, industry_name=#industryName#, loan_purpose=#loanPurpose#, time_limit=#timeLimit#, time_unit=#timeUnit#, start_time=#startTime#, end_time=#endTime#, amount=#amount.cent#, accumulated_issue_amount=#accumulatedIssueAmount.cent#, loaned_amount=#loanedAmount.cent#, used_amount=#usedAmount.cent#, repayed_amount=#repayedAmount.cent#, charged_amount=#chargedAmount.cent#, refund_amount=#refundAmount.cent#, is_maximum_amount=#isMaximumAmount#, releasable_amount=#releasableAmount.cent#, released_amount=#releasedAmount.cent#, releasing_amount=#releasingAmount.cent#, customer_deposit_amount=#customerDepositAmount.cent#, self_deposit_amount=#selfDepositAmount.cent#, comp_principal_amount=#compPrincipalAmount.cent#, comp_interest_amount=#compInterestAmount.cent#, contract_no=#contractNo#, contract_time=#contractTime#, sp_id=#spId#, sp_code=#spCode#, is_approval=#isApproval#, is_approval_del=#isApprovalDel#, approval_time=#approvalTime#, busi_manager_id=#busiManagerId#, busi_manager_account=#busiManagerAccount#, busi_manager_name=#busiManagerName#, busi_managerb_id=#busiManagerbId#, busi_managerb_account=#busiManagerbAccount#, busi_managerb_name=#busiManagerbName#, dept_id=#deptId#, dept_code=#deptCode#, dept_name=#deptName#, dept_path=#deptPath#, dept_path_name=#deptPathName#, phases=#phases#, phases_status=#phasesStatus#, status=#status#, is_continue=#isContinue#, is_recouncil=#isRecouncil#, last_recouncil_time=#lastRecouncilTime# where (project_code = #projectCode#)
    ]]>
    </update>

    <!-- mapped statement for IbatisProjectDAO.findById -->
    <select id="MS-PROJECT-FIND-BY-ID" resultMap="RM-PROJECT">
    <![CDATA[
        select /*MS-YRD-PROJECT-FIND-BY-ID*/ * from project where (project_id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisProjectDAO.findByIdForUpdate -->
    <select id="MS-PROJECT-FIND-BY-ID-FOR-UPDATE" resultMap="RM-PROJECT">
    <![CDATA[
        select /*MS-YRD-PROJECT-FIND-BY-ID-FOR-UPDATE*/ * from project where (project_id = #value#) for update
    ]]>
    </select>

    <!-- mapped statement for IbatisProjectDAO.findByProjectCode -->
    <select id="MS-PROJECT-FIND-BY-PROJECT-CODE" resultMap="RM-PROJECT">
    <![CDATA[
        select /*MS-YRD-PROJECT-FIND-BY-PROJECT-CODE*/ * from project where (project_code = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisProjectDAO.findByProjectCodeForUpdate -->
    <select id="MS-PROJECT-FIND-BY-PROJECT-CODE-FOR-UPDATE" resultMap="RM-PROJECT">
    <![CDATA[
        select /*MS-YRD-PROJECT-FIND-BY-PROJECT-CODE-FOR-UPDATE*/ * from project where (project_code = #value#) for update
    ]]>
    </select>

    <!-- mapped statement for IbatisProjectDAO.deleteById -->
    <delete id="MS-PROJECT-DELETE-BY-ID">
    <![CDATA[
        delete /*MS-YRD-PROJECT-DELETE-BY-ID*/ from project where (project_id = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisProjectDAO.deleteByProjectCode -->
    <delete id="MS-PROJECT-DELETE-BY-PROJECT-CODE">
    <![CDATA[
        delete /*MS-YRD-PROJECT-DELETE-BY-PROJECT-CODE*/ from project where (project_code = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisProjectDAO.findByCondition -->
    <select id="MS-PROJECT-FIND-BY-CONDITION" resultMap="RM-PROJECT">
        SELECT /*MS-YRD-PROJECT-FIND-BY-CONDITION*/ * from project p
	         <isGreaterThan property="loginUserId"  compareValue="0">
	            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
	            	   WHERE user_id = #loginUserId# AND is_del = 'NO'
				      	<isNotEmpty property="relatedRoleList" prepend=" and " >
				      		user_type in 
	            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
								#relatedRoleList[]#
							</iterate>
				      	</isNotEmpty>  	            	   
	            	   GROUP BY project_code) r
    			  ON r.project_code = p.project_code AND r.rnum > 0
	      	</isGreaterThan>
	         <isGreaterThan property="project.busiManagerId"  compareValue="0">
	            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
	            	   WHERE user_id = #project.busiManagerId# AND user_type = 'BUSI_MANAGER'  AND is_current = 'IS' AND is_del = 'NO'  GROUP BY project_code) r1
    			  ON r1.project_code = p.project_code AND r1.rnum > 0
	      	</isGreaterThan>
	         <isGreaterThan property="project.busiManagerbId"  compareValue="0">
	            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
	            	   WHERE user_id = #project.busiManagerbId# AND user_type = 'BUSI_MANAGERB'  AND is_current = 'IS' AND is_del = 'NO'  GROUP BY project_code) r2
    			  ON r2.project_code = p.project_code AND r2.rnum > 0
	      	</isGreaterThan>	
	      	<isNotEmpty property="deptIdList">
	            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user
	            	   WHERE is_del = 'NO' AND dept_id in 
	            	   		<iterate property="deptIdList" open="(" close=")" conjunction=",">
								#deptIdList[]#
							</iterate>
					   GROUP BY project_code) rl
    			  ON rl.project_code = p.project_code AND rl.rnum > 0
	      </isNotEmpty>   
	          	
	      <isNotEmpty property="dockFormType">
  				<![CDATA[ LEFT join subsystem_dock_project w ON p.project_code=w.project_code ]]> 
	      </isNotEmpty>     	 
	       	  <isNotEmpty property="recoverySelecterId">
	       	  
	       	   JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
	            	   WHERE user_id = #recoverySelecterId# AND user_type = 'LEGAL_MANAGER'  AND is_current = 'IS' AND is_del = 'NO'  GROUP BY project_code) r3
    			  ON r3.project_code = p.project_code AND r3.rnum > 0
	       	  
  				 JOIN project_risk_handle_team  t 
  				 on p.project_code = t.project_code  
	  		    </isNotEmpty>   
	       	 
	         WHERE p.project_code is not null
	        <dynamic>
	        
	        	 <isNotEmpty property="recoverySelecterId" prepend=" and " >
		  				( t.chief_leader_id = #recoverySelecterId#
                 		or t.vice_leader_id = #recoverySelecterId# 
                 		or t.member_ids like concat('%',#recoverySelecterId#,'%')   )
			      </isNotEmpty>   
	        
	            <isGreaterThan property="project.projectId"  compareValue="0" prepend=" and ">
	                p.project_id = #project.projectId#
	            </isGreaterThan>
	            <isGreaterThan property="project.customerId"  compareValue="0" prepend=" and ">
	                p.customer_id = #project.customerId#
	            </isGreaterThan>
	            <isGreaterThan property="project.deptId"  compareValue="0" prepend=" and ">
	                p.dept_id = #project.deptId#
	            </isGreaterThan>
	             <isNotEmpty property="project.projectCode" prepend=" and ">
	               p.project_code = #project.projectCode#
	            </isNotEmpty>
	             <isNotEmpty property="project.busiManagerName" prepend=" and ">
	               p.busi_manager_name like concat('%',#project.busiManagerName#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="project.isRecouncil" prepend=" and ">
	               <isEqual property="project.isRecouncil" compareValue="YES">
	               		<![CDATA[ 
							p.is_recouncil = 'IS' AND
							(p.is_approval = 'IS' OR
							(p.is_approval = 'NO'
							AND
							(p.last_recouncil_time IS NULL OR p.last_recouncil_time <= DATE_ADD(SYSDATE(), INTERVAL - 6 MONTH))))
	               		]]>
	               </isEqual>
	               <isNotEqual property="project.isRecouncil" compareValue="YES">
	               		p.is_recouncil = #project.isRecouncil#
	               </isNotEqual>	               	             
	            </isNotEmpty>
	             <isNotEmpty property="project.isApproval" prepend=" and ">
	               p.is_approval = #project.isApproval#
	            </isNotEmpty>
	             <isNotEmpty property="project.isApprovalDel" prepend=" and ">
	               p.is_approval_del = #project.isApprovalDel#
	            </isNotEmpty>
	             <isNotEmpty property="project.projectName" prepend=" and ">
	               p.project_name like concat('%',#project.projectName#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="projectCodeOrName" prepend=" and ">
	               (p.project_code like concat('%',#projectCodeOrName#,'%') 
	               	OR p.project_name like concat('%',#projectCodeOrName#,'%') )
	            </isNotEmpty>  	            
	             <isNotEmpty property="project.customerName" prepend=" and ">
	               p.customer_name like concat('%',#project.customerName#,'%')
	            </isNotEmpty>
	            <isNotEmpty property="project.customerType" prepend=" and ">
					p.customer_type = #project.customerType#
				</isNotEmpty>
	            <isNotEmpty property="project.deptName" prepend=" and ">
	               p.dept_name like concat('%',#project.deptName#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="project.busiType" prepend=" and ">
	               p.busi_type like concat(#project.busiType#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="project.busiSubType" prepend=" and ">
	               p.busi_sub_type like concat(#project.busiSubType#,'%')
	            </isNotEmpty>	            
	            <isNotEmpty property="project.deptCode" prepend=" and ">
	               p.dept_code = #project.deptCode#
	            </isNotEmpty>
	            <isNotEmpty property="busiTypeList" prepend=" and ">
					<iterate property="busiTypeList" open="(" close=")" conjunction=" or ">
						p.busi_type like concat(#busiTypeList[]#,'%')
					</iterate>
				</isNotEmpty>	            
	             <isNotEmpty property="project.phases" prepend=" and ">
	                 p.phases = #project.phases#
	            </isNotEmpty>
	             <isNotEmpty property="project.status" prepend=" and ">
	                 p.status = #project.status#
	            </isNotEmpty>
	             <isNotEmpty property="project.phasesStatus" prepend=" and ">
	                 p.phases_status = #project.phasesStatus#
	            </isNotEmpty>
	            <isNotEmpty property="project.isContinue" prepend=" and ">
	                 p.is_continue = #project.isContinue#
	            </isNotEmpty>  
	            <isNotEmpty property="phases" prepend=" and ">
						 p.phases in 
						<iterate property="phases" open="(" close=")" conjunction=",">
							#phases[]#
						</iterate>
				</isNotEmpty>
	            <isNotEmpty property="phasesStatus" prepend=" and ">
						 p.phases_status in 
						<iterate property="phasesStatus" open="(" close=")" conjunction=",">
							#phasesStatus[]#
						</iterate>
				</isNotEmpty>
	            <isNotEmpty property="status" prepend=" and ">
						 p.status in 
						<iterate property="status" open="(" close=")" conjunction=",">
							#status[]#
						</iterate>
				</isNotEmpty>
				<isNotEmpty property="hasLoanAmount" prepend=" and ">
	               <isEqual property="hasLoanAmount" compareValue="IS">
	               		<![CDATA[((p.is_maximum_amount = 'IS' AND p.amount + p.released_amount > p.loaned_amount) OR ((p.is_maximum_amount = 'NO' OR p.is_maximum_amount is null) AND p.amount > p.loaned_amount))]]>
	               </isEqual>
               </isNotEmpty>
 			   <isNotEmpty property="hasUseAmount" prepend=" and ">
	               <isEqual property="hasUseAmount" compareValue="IS">
	               		<![CDATA[loaned_amount > used_amount]]>
	               </isEqual>
               </isNotEmpty> 				
 			   <isNotEmpty property="hasChargeAmount" prepend=" and ">
	               <isEqual property="hasChargeAmount" compareValue="IS">
	               		<![CDATA[charged_amount > 0]]>
	               </isEqual>
	               <isEqual property="hasChargeAmount" compareValue="NO">
	               		<![CDATA[charged_amount = 0]]>
	               </isEqual>
               </isNotEmpty>
 			   <isNotEmpty property="hasIssueAmount" prepend=" and ">
	               <isEqual property="hasIssueAmount" compareValue="IS">
	               		<![CDATA[
	               			(
	               			(accumulated_issue_amount > 0 AND (busi_type like '12%' OR busi_type like '5%'))
	               			 OR
	               			(busi_type not like '12%' AND busi_type not like '5%')
	               			)
	               		]]>
	               </isEqual>
	               <isEqual property="hasIssueAmount" compareValue="YES">
	               		<![CDATA[accumulated_issue_amount > 0]]>
	               </isEqual>
	               <isEqual property="hasIssueAmount" compareValue="NO">
	               		<![CDATA[accumulated_issue_amount = 0]]>
	               </isEqual>
               </isNotEmpty>                				
 			   <isNotEmpty property="hasBothAmount" prepend=" and ">
	               <isEqual property="hasBothAmount" compareValue="IS">
	               		<![CDATA[((p.is_maximum_amount = 'IS' AND p.amount + p.released_amount > p.loaned_amount) OR ((is_maximum_amount = 'NO' OR p.is_maximum_amount is null) AND p.amount > p.loaned_amount) OR (p.loaned_amount > p.used_amount))]]>
	               </isEqual>
               </isNotEmpty> 
                <isNotEmpty property="hasCompensatoryAmount" prepend=" and ">
	               <isEqual property="hasCompensatoryAmount" compareValue="IS">
	               		(comp_principal_amount > 0 OR comp_interest_amount > 0)
	               </isEqual>
	               <isEqual property="hasCompensatoryAmount" compareValue="NO">
	               		comp_principal_amount = 0 AND comp_interest_amount = 0
	               </isEqual>
               </isNotEmpty>                              				
 			   <isNotEmpty property="hasContract" prepend=" and ">
	               <isEqual property="hasContract" compareValue="IS">
	               		p.contract_no is not null and p.contract_no != ''
	               </isEqual>
	               <isEqual property="hasContract" compareValue="NO">
	               		(p.contract_no is null or p.contract_no = '')
	               </isEqual>
               </isNotEmpty>  
               
               <isNotEmpty property="dockFormType" prepend=" and ">
	               <![CDATA[ p.project_code NOT IN (SELECT d.project_code as subsystem_project_code FROM subsystem_dock_project d where dock_form_type=#dockFormType#  group by d.project_code) ]]>
               </isNotEmpty> 
                
                <isNotEmpty property="isReleasing" prepend=" and ">
	               <![CDATA[ p.project_code NOT IN (SELECT r.project_code as release_project_code FROM release_project r where r.status=#isReleasing#  group by r.project_code) ]]>
               </isNotEmpty> 
                                         				
 			   <isNotEmpty property="approvalTimeStart" prepend=" and ">
	               <![CDATA[p.approval_time >= #approvalTimeStart#]]>
               </isNotEmpty>                             				
 			   <isNotEmpty property="approvalTimeEnd" prepend=" and ">
	               <![CDATA[p.approval_time <= #approvalTimeEnd#]]>
               </isNotEmpty>                             				
 			   <isNotEmpty property="contractTimeStart" prepend=" and ">
	               <![CDATA[p.contract_time >= #contractTimeStart#]]>
               </isNotEmpty>                             				
 			   <isNotEmpty property="contractTimeEnd" prepend=" and ">
	               <![CDATA[p.contract_time <= #contractTimeEnd#]]>
               </isNotEmpty>                             				
	        </dynamic>
	         <isNotEmpty property="sortCol" prepend=" order by ">
	             $sortCol$
	                <isNotEmpty property="sortOrder">
              	 		$sortOrder$
             		</isNotEmpty>
	         </isNotEmpty>
            LIMIT #limitStart#,#pageSize#;
    </select>

    <!-- mapped statement for IbatisProjectDAO.findByConditionCount -->
    <select id="MS-PROJECT-FIND-BY-CONDITION-COUNT" resultClass="long">
        SELECT /*MS-YRD-PROJECT-FIND-BY-CONDITION-COUNT*/  count(*)  FROM project p
	         <isGreaterThan property="loginUserId"  compareValue="0">
	            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
	            	   WHERE user_id = #loginUserId# AND is_del = 'NO'
				      	<isNotEmpty property="relatedRoleList" prepend=" and " >
				      		user_type in 
	            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
								#relatedRoleList[]#
							</iterate>
				      	</isNotEmpty>
	            	   GROUP BY project_code) r
    			  ON r.project_code = p.project_code AND r.rnum > 0
	      	</isGreaterThan>
	         <isGreaterThan property="project.busiManagerId"  compareValue="0">
	            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
	            	   WHERE user_id = #project.busiManagerId# AND user_type = 'BUSI_MANAGER'  AND is_current = 'IS' AND is_del = 'NO'  GROUP BY project_code) r1
    			  ON r1.project_code = p.project_code AND r1.rnum > 0
	      	</isGreaterThan>
	         <isGreaterThan property="project.busiManagerbId"  compareValue="0">
	            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
	            	   WHERE user_id = #project.busiManagerbId# AND user_type = 'BUSI_MANAGERB'  AND is_current = 'IS' AND is_del = 'NO'  GROUP BY project_code) r2
    			  ON r2.project_code = p.project_code AND r2.rnum > 0
	      	</isGreaterThan>	
	      <isNotEmpty property="deptIdList">
	            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user
	            	   WHERE is_del = 'NO' AND dept_id in 
	            	   		<iterate property="deptIdList" open="(" close=")" conjunction=",">
								#deptIdList[]#
							</iterate>
					   GROUP BY project_code) rl
    			  ON rl.project_code = p.project_code AND rl.rnum > 0
	      </isNotEmpty> 
	      <isNotEmpty property="dockFormType">
  				<![CDATA[ LEFT join subsystem_dock_project w ON p.project_code=w.project_code ]]> 
	      </isNotEmpty>  	
	      
	      	 <isNotEmpty property="recoverySelecterId">
	      	 
	      	  JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
	            	   WHERE user_id = #recoverySelecterId# AND user_type = 'LEGAL_MANAGER'  AND is_current = 'IS' AND is_del = 'NO'  GROUP BY project_code) r3
    			  ON r3.project_code = p.project_code AND r3.rnum > 0
	      	 
  				 JOIN project_risk_handle_team  t 
  				 on p.project_code = t.project_code  
	      </isNotEmpty> 
	            	 	         
	         WHERE p.project_code is not null
	        <dynamic>
	        
	        	 <isNotEmpty property="recoverySelecterId" prepend=" and " >
		  				( t.chief_leader_id = #recoverySelecterId#
                 		or t.vice_leader_id = #recoverySelecterId# 
                 		or t.member_ids like concat('%',#recoverySelecterId#,'%')   )
			      </isNotEmpty>   
	        
	            <isGreaterThan property="project.projectId"  compareValue="0" prepend=" and ">
	                p.project_id = #project.projectId#
	            </isGreaterThan>
	            <isGreaterThan property="project.customerId"  compareValue="0" prepend=" and ">
	                p.customer_id = #project.customerId#
	            </isGreaterThan>
	            <isGreaterThan property="project.deptId"  compareValue="0" prepend=" and ">
	                p.dept_id = #project.deptId#
	            </isGreaterThan>
	             <isNotEmpty property="project.projectCode" prepend=" and ">
	               p.project_code = #project.projectCode#
	            </isNotEmpty>
	             <isNotEmpty property="project.busiManagerName" prepend=" and ">
	               p.busi_manager_name like concat('%',#project.busiManagerName#,'%')
	            </isNotEmpty>            
	             <isNotEmpty property="project.isRecouncil" prepend=" and ">
	               <isEqual property="project.isRecouncil" compareValue="YES">
	               		<![CDATA[ 
							p.is_recouncil = 'IS' AND
							(p.is_approval = 'IS' OR
							(p.is_approval = 'NO'
							AND
							(p.last_recouncil_time IS NULL OR p.last_recouncil_time <= DATE_ADD(SYSDATE(), INTERVAL - 6 MONTH))))
	               		]]>
	               </isEqual>
	               <isNotEqual property="project.isRecouncil" compareValue="YES">
	               		p.is_recouncil = #project.isRecouncil#
	               </isNotEqual>	               	             
	            </isNotEmpty>
	             <isNotEmpty property="project.isApproval" prepend=" and ">
	               p.is_approval = #project.isApproval#
	            </isNotEmpty>
	             <isNotEmpty property="project.isApprovalDel" prepend=" and ">
	               p.is_approval_del = #project.isApprovalDel#
	            </isNotEmpty>	
	             <isNotEmpty property="projectCodeOrName" prepend=" and ">
	               (p.project_code like concat('%',#projectCodeOrName#,'%') 
	               	OR p.project_name like concat('%',#projectCodeOrName#,'%') )
	            </isNotEmpty>   	                        	            
	             <isNotEmpty property="project.projectName" prepend=" and ">
	               p.project_name like concat('%',#project.projectName#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="project.customerName" prepend=" and ">
	               p.customer_name like concat('%',#project.customerName#,'%')
	            </isNotEmpty>
	            <isNotEmpty property="project.customerType" prepend=" and ">
				   p.customer_type = #project.customerType#
				</isNotEmpty>
	            <isNotEmpty property="project.deptName" prepend=" and ">
	               p.dept_name like concat('%',#project.deptName#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="project.busiType" prepend=" and ">
	               p.busi_type like concat(#project.busiType#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="project.busiSubType" prepend=" and ">
	               p.busi_sub_type like concat(#project.busiSubType#,'%')
	            </isNotEmpty>
	            <isNotEmpty property="project.deptCode" prepend=" and ">
	               p.dept_code = #project.deptCode#
	            </isNotEmpty>
	            <isNotEmpty property="busiTypeList" prepend=" and ">
					<iterate property="busiTypeList" open="(" close=")" conjunction=" or ">
						p.busi_type like concat(#busiTypeList[]#,'%')
					</iterate>
				</isNotEmpty>	            
	             <isNotEmpty property="project.phases" prepend=" and ">
	                 p.phases = #project.phases#
	            </isNotEmpty>
	             <isNotEmpty property="project.status" prepend=" and ">
	                 p.status = #project.status#
	            </isNotEmpty>
	             <isNotEmpty property="project.phasesStatus" prepend=" and ">
	                 p.phases_status = #project.phasesStatus#
	            </isNotEmpty>
	            <isNotEmpty property="project.isContinue" prepend=" and ">
	                 p.is_continue = #project.isContinue#
	            </isNotEmpty>  
	            <isNotEmpty property="phases" prepend=" and ">
						 p.phases in 
						<iterate property="phases" open="(" close=")" conjunction=",">
							#phases[]#
						</iterate>
				</isNotEmpty>
	            <isNotEmpty property="phasesStatus" prepend=" and ">
						 p.phases_status in 
						<iterate property="phasesStatus" open="(" close=")" conjunction=",">
							#phasesStatus[]#
						</iterate>
				</isNotEmpty>
	            <isNotEmpty property="status" prepend=" and ">
						 p.status in 
						<iterate property="status" open="(" close=")" conjunction=",">
							#status[]#
						</iterate>
				</isNotEmpty>
				<isNotEmpty property="hasLoanAmount" prepend=" and ">
	               <isEqual property="hasLoanAmount" compareValue="IS">
	               		<![CDATA[((p.is_maximum_amount = 'IS' AND p.amount + p.released_amount > p.loaned_amount) OR ((p.is_maximum_amount = 'NO' OR p.is_maximum_amount is null) AND p.amount > p.loaned_amount))]]>
	               </isEqual>
               </isNotEmpty>
 			   <isNotEmpty property="hasUseAmount" prepend=" and ">
	               <isEqual property="hasUseAmount" compareValue="IS">
	               		<![CDATA[loaned_amount > used_amount]]>
	               </isEqual>
               </isNotEmpty> 
 			   <isNotEmpty property="hasChargeAmount" prepend=" and ">
	               <isEqual property="hasChargeAmount" compareValue="IS">
	               		<![CDATA[charged_amount > 0]]>
	               </isEqual>
	               <isEqual property="hasChargeAmount" compareValue="NO">
	               		<![CDATA[charged_amount = 0]]>
	               </isEqual>
               </isNotEmpty>                				
 			   <isNotEmpty property="hasIssueAmount" prepend=" and ">
	               <isEqual property="hasIssueAmount" compareValue="IS">
	               		<![CDATA[
	               			(
	               			(accumulated_issue_amount > 0 AND (busi_type like '12%' OR busi_type like '5%'))
	               			 OR
	               			(busi_type not like '12%' AND busi_type not like '5%')
	               			)
	               		]]>
	               </isEqual>
	               <isEqual property="hasIssueAmount" compareValue="YES">
	               		<![CDATA[accumulated_issue_amount > 0]]>
	               </isEqual>
	               <isEqual property="hasIssueAmount" compareValue="NO">
	               		<![CDATA[accumulated_issue_amount = 0]]>
	               </isEqual>
               </isNotEmpty>                				
 			   <isNotEmpty property="hasBothAmount" prepend=" and ">
	               <isEqual property="hasBothAmount" compareValue="IS">
	               		<![CDATA[((p.is_maximum_amount = 'IS' AND p.amount + p.released_amount > p.loaned_amount) OR ((is_maximum_amount = 'NO' OR p.is_maximum_amount is null) AND p.amount > p.loaned_amount) OR (p.loaned_amount > p.used_amount))]]>
	               </isEqual>
               </isNotEmpty>
 			   <isNotEmpty property="hasContract" prepend=" and ">
	               <isEqual property="hasContract" compareValue="IS">
	               		p.contract_no is not null and p.contract_no != ''
	               </isEqual>
	               <isEqual property="hasContract" compareValue="NO">
	               		(p.contract_no is null or p.contract_no = '')
	               </isEqual>
               </isNotEmpty> 
               
               <isNotEmpty property="hasCompensatoryAmount" prepend=" and ">
	               <isEqual property="hasCompensatoryAmount" compareValue="IS">
	               		(comp_principal_amount > 0 OR comp_interest_amount > 0)
	               </isEqual>
	               <isEqual property="hasCompensatoryAmount" compareValue="NO">
	               		comp_principal_amount = 0 AND comp_interest_amount = 0
	               </isEqual>
               </isNotEmpty>  
               
               <isNotEmpty property="dockFormType" prepend=" and ">
	               <![CDATA[ p.project_code NOT IN (SELECT d.project_code as subsystem_project_code FROM subsystem_dock_project d where dock_form_type=#dockFormType#  group by d.project_code) ]]>
               </isNotEmpty> 
                <isNotEmpty property="isReleasing" prepend=" and ">
	               <![CDATA[ p.project_code NOT IN (SELECT r.project_code as release_project_code FROM release_project r where r.status=#isReleasing# group by r.project_code) ]]>
               </isNotEmpty>            				
 			   <isNotEmpty property="approvalTimeStart" prepend=" and ">
	               <![CDATA[p.approval_time >= #approvalTimeStart#]]>
               </isNotEmpty>                             				
 			   <isNotEmpty property="approvalTimeEnd" prepend=" and ">
	               <![CDATA[p.approval_time <= #approvalTimeEnd#]]>
               </isNotEmpty>                             				
 			   <isNotEmpty property="contractTimeStart" prepend=" and ">
	               <![CDATA[p.contract_time >= #contractTimeStart#]]>
               </isNotEmpty>                             				
 			   <isNotEmpty property="contractTimeEnd" prepend=" and ">
	               <![CDATA[p.contract_time <= #contractTimeEnd#]]>
               </isNotEmpty>                                            				
	        </dynamic>
    </select>

    <!-- mapped statement for IbatisProjectDAO.findCountGroupByPhases -->
    <select id="MS-PROJECT-FIND-COUNT-GROUP-BY-PHASES" resultMap="RM-PROJECT">
        SELECT /*MS-YRD-PROJECT-FIND-COUNT-GROUP-BY-PHASES*/  NULL AS   project_id ,
				 NULL AS    project_code ,
				 NULL AS   project_name ,
				 NULL AS   customer_id ,
				 NULL AS   customer_name ,
				 NULL AS   customer_type ,
				 NULL AS   busi_type ,
				 NULL AS   busi_type_name ,
				 NULL AS   busi_sub_type ,
				 NULL AS   busi_sub_type_name ,
				 NULL AS   industry_code ,
				 NULL AS   industry_name ,
				 NULL AS   loan_purpose ,
				COUNT(*) AS  time_limit ,
				 NULL AS   time_unit ,
				 NULL AS   start_time ,
				 NULL AS   end_time ,
				 NULL AS   amount ,
				 NULL AS   accumulated_issue_amount ,
				 NULL AS   loaned_amount ,
				 NULL AS   used_amount ,
				 NULL AS   repayed_amount ,
				 NULL AS   charged_amount ,
				 NULL AS   refund_amount ,
				 NULL AS   is_maximum_amount ,
				 NULL AS   released_amount ,
				 NULL AS   releasable_amount ,
				 NULL AS   releasing_amount ,
				 NULL AS   customer_deposit_amount ,
				 NULL AS   self_deposit_amount ,
				 NULL AS   comp_principal_amount ,
				 NULL AS   comp_interest_amount ,
				 NULL AS   contract_no ,
				 NULL AS   contract_time ,
				 NULL AS   sp_id ,
				 NULL AS   sp_code ,
				 NULL AS   is_approval ,
				 NULL AS   is_approval_del ,
				 NULL AS   approval_time ,
				 NULL AS   busi_manager_id ,
				 NULL AS   busi_manager_account ,
				 NULL AS   busi_manager_name ,
				 NULL AS   busi_managerb_id ,
				 NULL AS   busi_managerb_account ,
				 NULL AS   busi_managerb_name ,
				 NULL AS   dept_id ,
				 NULL AS   dept_code ,
				 NULL AS   dept_name ,
				 NULL AS   dept_path ,
				 NULL AS   dept_path_name ,
				phases , 
				 NULL AS   phases_status ,
				 NULL AS   status ,
				 NULL AS   is_continue ,
				 NULL AS   is_recouncil ,
				 NULL AS   last_recouncil_time ,
				 NULL AS   raw_add_time ,
				 NULL AS   project_code ,
				 NULL AS   raw_update_time 
				
				FROM project GROUP BY phases
    </select>

</sqlMap>
