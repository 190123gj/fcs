/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.am.dal.daointerface;

// auto generated imports
import com.born.fcs.am.dal.dataobject.PledgeTypeAttributeDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>pledge_type_attribute</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/pledge_type_attribute.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface PledgeTypeAttributeDAO {
	/**
	 *  Insert one <tt>PledgeTypeAttributeDO</tt> object to DB table <tt>pledge_type_attribute</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into pledge_type_attribute(assets_id,type_id,attribute_key,attribute_value,custom_type,raw_add_time) values (?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param pledgeTypeAttribute
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(PledgeTypeAttributeDO pledgeTypeAttribute) throws DataAccessException;

	/**
	 *  Update DB table <tt>pledge_type_attribute</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update pledge_type_attribute set assets_id=?, type_id=?, attribute_key=?, attribute_value=?, custom_type=? where (attribute_id = ?)</tt>
	 *
	 *	@param pledgeTypeAttribute
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(PledgeTypeAttributeDO pledgeTypeAttribute) throws DataAccessException;

	/**
	 *  Query DB table <tt>pledge_type_attribute</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_type_attribute where (attribute_id = ?)</tt>
	 *
	 *	@param attributeId
	 *	@return PledgeTypeAttributeDO
	 *	@throws DataAccessException
	 */	 
    public PledgeTypeAttributeDO findById(long attributeId) throws DataAccessException;

	/**
	 *  Query DB table <tt>pledge_type_attribute</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_type_attribute where ((assets_id = ?) AND (attribute_key = ?) AND (custom_type = ?))</tt>
	 *
	 *	@param assetsId
	 *	@param attributeKey
	 *	@param customType
	 *	@return PledgeTypeAttributeDO
	 *	@throws DataAccessException
	 */	 
    public PledgeTypeAttributeDO findByassetsIdAndAttributeKeyAndCustomType(long assetsId, String attributeKey, String customType) throws DataAccessException;

	/**
	 *  Query DB table <tt>pledge_type_attribute</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_type_attribute where (type_id = ?)</tt>
	 *
	 *	@param typeId
	 *	@return List<PledgeTypeAttributeDO>
	 *	@throws DataAccessException
	 */	 
    public List<PledgeTypeAttributeDO> findByTypeId(long typeId) throws DataAccessException;

	/**
	 *  Query DB table <tt>pledge_type_attribute</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_type_attribute where ((type_id = ?) AND (custom_type = ?))</tt>
	 *
	 *	@param typeId
	 *	@param customType
	 *	@return List<PledgeTypeAttributeDO>
	 *	@throws DataAccessException
	 */	 
    public List<PledgeTypeAttributeDO> findByTypeIdAndCustomType(long typeId, String customType) throws DataAccessException;

	/**
	 *  Query DB table <tt>pledge_type_attribute</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_type_attribute where ((type_id = ?) AND (custom_type = ?) AND (attribute_key = ?))</tt>
	 *
	 *	@param typeId
	 *	@param customType
	 *	@param attributeKey
	 *	@return List<PledgeTypeAttributeDO>
	 *	@throws DataAccessException
	 */	 
    public List<PledgeTypeAttributeDO> findByTypeIdAndCustomTypeAndAttributeKey(long typeId, String customType, String attributeKey) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>pledge_type_attribute</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from pledge_type_attribute where (attribute_id = ?)</tt>
	 *
	 *	@param attributeId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long attributeId) throws DataAccessException;

	/**
	 *  Query DB table <tt>pledge_type_attribute</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_type_attribute where (1 = 1)</tt>
	 *
	 *	@param pledgeTypeAttribute
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<PledgeTypeAttributeDO>
	 *	@throws DataAccessException
	 */	 
    public List<PledgeTypeAttributeDO> findByCondition(PledgeTypeAttributeDO pledgeTypeAttribute, long limitStart, long pageSize) throws DataAccessException;

	/**
	 *  Query DB table <tt>pledge_type_attribute</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from pledge_type_attribute where (1 = 1)</tt>
	 *
	 *	@param pledgeTypeAttribute
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(PledgeTypeAttributeDO pledgeTypeAttribute) throws DataAccessException;

}