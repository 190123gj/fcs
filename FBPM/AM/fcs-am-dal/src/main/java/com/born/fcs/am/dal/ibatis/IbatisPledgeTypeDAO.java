/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.am.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.am.dal.daointerface.PledgeTypeDAO;


// auto generated imports
import com.born.fcs.am.dal.dataobject.PledgeTypeDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.am.dal.daointerface.PledgeTypeDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/pledge_type.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisPledgeTypeDAO extends SqlMapClientDaoSupport implements PledgeTypeDAO {
	/**
	 *  Insert one <tt>PledgeTypeDO</tt> object to DB table <tt>pledge_type</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into pledge_type(level_one,level_one_desc,level_two,level_two_desc,level_three,level_three_desc,pledge_rate,is_map_position,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param pledgeType
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(PledgeTypeDO pledgeType) throws DataAccessException {
    	if (pledgeType == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-PLEDGE-TYPE-INSERT", pledgeType);

        return pledgeType.getTypeId();
    }

	/**
	 *  Update DB table <tt>pledge_type</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update pledge_type set level_one=?, level_one_desc=?, level_two=?, level_two_desc=?, level_three=?, level_three_desc=?, pledge_rate=?, is_map_position=? where (type_id = ?)</tt>
	 *
	 *	@param pledgeType
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(PledgeTypeDO pledgeType) throws DataAccessException {
    	if (pledgeType == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-PLEDGE-TYPE-UPDATE", pledgeType);
    }

	/**
	 *  Query DB table <tt>pledge_type</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_type where (type_id = ?)</tt>
	 *
	 *	@param typeId
	 *	@return PledgeTypeDO
	 *	@throws DataAccessException
	 */	 
    public PledgeTypeDO findById(long typeId) throws DataAccessException {
        Long param = new Long(typeId);

        return (PledgeTypeDO) getSqlMapClientTemplate().queryForObject("MS-PLEDGE-TYPE-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>pledge_type</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_type where ((level_one = ?) AND (level_two = ?) AND (level_three = ?))</tt>
	 *
	 *	@param levelOne
	 *	@param levelTwo
	 *	@param levelThree
	 *	@return PledgeTypeDO
	 *	@throws DataAccessException
	 */	 
    public PledgeTypeDO findByLevelOneTwoThree(String levelOne, String levelTwo, String levelThree) throws DataAccessException {
        Map param = new HashMap();

        param.put("levelOne", levelOne);
        param.put("levelTwo", levelTwo);
        param.put("levelThree", levelThree);

        return (PledgeTypeDO) getSqlMapClientTemplate().queryForObject("MS-PLEDGE-TYPE-FIND-BY-LEVEL-ONE-TWO-THREE", param);

    }

	/**
	 *  Query DB table <tt>pledge_type</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_type where (level_one = ?) group by level_three</tt>
	 *
	 *	@param levelOne
	 *	@return List<PledgeTypeDO>
	 *	@throws DataAccessException
	 */	 
    public List<PledgeTypeDO> findLevelThreeByLevelOne(String levelOne) throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-PLEDGE-TYPE-FIND-LEVEL-THREE-BY-LEVEL-ONE", levelOne);

    }

	/**
	 *  Query DB table <tt>pledge_type</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_type where ((level_one = ?) AND (level_two = ?)) group by level_three</tt>
	 *
	 *	@param levelOne
	 *	@param levelTwo
	 *	@return List<PledgeTypeDO>
	 *	@throws DataAccessException
	 */	 
    public List<PledgeTypeDO> findLevelThreeByLevelOneAndLevelTwo(String levelOne, String levelTwo) throws DataAccessException {
        Map param = new HashMap();

        param.put("levelOne", levelOne);
        param.put("levelTwo", levelTwo);

        return getSqlMapClientTemplate().queryForList("MS-PLEDGE-TYPE-FIND-LEVEL-THREE-BY-LEVEL-ONE-AND-LEVEL-TWO", param);

    }

	/**
	 *  Query DB table <tt>pledge_type</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_type where (level_one = ?) group by level_two</tt>
	 *
	 *	@param levelOne
	 *	@return List<PledgeTypeDO>
	 *	@throws DataAccessException
	 */	 
    public List<PledgeTypeDO> findLevelTwoByLevelOne(String levelOne) throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-PLEDGE-TYPE-FIND-LEVEL-TWO-BY-LEVEL-ONE", levelOne);

    }

	/**
	 *  Query DB table <tt>pledge_type</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_type where (level_one = ?) group by level_one</tt>
	 *
	 *	@param levelOne
	 *	@return List<PledgeTypeDO>
	 *	@throws DataAccessException
	 */	 
    public List<PledgeTypeDO> findLevelOneByLevelOne(String levelOne) throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-PLEDGE-TYPE-FIND-LEVEL-ONE-BY-LEVEL-ONE", levelOne);

    }

	/**
	 *  Query DB table <tt>pledge_type</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_type group by level_one</tt>
	 *
	 *	@return List<PledgeTypeDO>
	 *	@throws DataAccessException
	 */	 
    public List<PledgeTypeDO> findByLevelOne() throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-PLEDGE-TYPE-FIND-BY-LEVEL-ONE", null);

    }

	/**
	 *  Query DB table <tt>pledge_type</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_type where (level_three IS NOT NULL) group by level_one</tt>
	 *
	 *	@return List<PledgeTypeDO>
	 *	@throws DataAccessException
	 */	 
    public List<PledgeTypeDO> findByOneAndThreeNotNull() throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-PLEDGE-TYPE-FIND-BY-ONE-AND-THREE-NOT-NULL", null);

    }

	/**
	 *  Delete records from DB table <tt>pledge_type</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from pledge_type where (type_id = ?)</tt>
	 *
	 *	@param typeId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long typeId) throws DataAccessException {
        Long param = new Long(typeId);

        return getSqlMapClientTemplate().delete("MS-PLEDGE-TYPE-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>pledge_type</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from pledge_type where (level_one = ?)</tt>
	 *
	 *	@param levelOne
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByLevelOne(String levelOne) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-PLEDGE-TYPE-DELETE-BY-LEVEL-ONE", levelOne);
    }

	/**
	 *  Query DB table <tt>pledge_type</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_type where (1 = 1)</tt>
	 *
	 *	@param pledgeType
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<PledgeTypeDO>
	 *	@throws DataAccessException
	 */	 
    public List<PledgeTypeDO> findByCondition(PledgeTypeDO pledgeType, long limitStart, long pageSize) throws DataAccessException {
    	if (pledgeType == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("pledgeType", pledgeType);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-PLEDGE-TYPE-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>pledge_type</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from pledge_type where (1 = 1)</tt>
	 *
	 *	@param pledgeType
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(PledgeTypeDO pledgeType) throws DataAccessException {
    	if (pledgeType == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-PLEDGE-TYPE-FIND-BY-CONDITION-COUNT", pledgeType);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}