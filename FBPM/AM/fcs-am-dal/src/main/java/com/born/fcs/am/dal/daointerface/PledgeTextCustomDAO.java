/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.am.dal.daointerface;

// auto generated imports
import com.born.fcs.am.dal.dataobject.PledgeTextCustomDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>pledge_text_custom</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/pledge_text_custom.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface PledgeTextCustomDAO {
	/**
	 *  Insert one <tt>PledgeTextCustomDO</tt> object to DB table <tt>pledge_text_custom</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into pledge_text_custom(type_id,field_name,field_name_desc,field_type,control_length,measurement_unit,most_complete_selection,time_selection_range,condition_item,relation_condition_item,relation_field_name,is_required,latest_entry_form,sort_order,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param pledgeTextCustom
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(PledgeTextCustomDO pledgeTextCustom) throws DataAccessException;

	/**
	 *  Update DB table <tt>pledge_text_custom</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update pledge_text_custom set type_id=?, field_name=?, field_name_desc=?, field_type=?, control_length=?, measurement_unit=?, most_complete_selection=?, time_selection_range=?, condition_item=?, relation_condition_item=?, relation_field_name=?, is_required=?, latest_entry_form=?, is_by_relation=?, sort_order=? where (type_id = ?)</tt>
	 *
	 *	@param pledgeTextCustom
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(PledgeTextCustomDO pledgeTextCustom) throws DataAccessException;

	/**
	 *  Query DB table <tt>pledge_text_custom</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_text_custom where (text_id = ?)</tt>
	 *
	 *	@param textId
	 *	@return PledgeTextCustomDO
	 *	@throws DataAccessException
	 */	 
    public PledgeTextCustomDO findById(long textId) throws DataAccessException;

	/**
	 *  Query DB table <tt>pledge_text_custom</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_text_custom where ((type_id = ?) AND (field_name = ?))</tt>
	 *
	 *	@param typeId
	 *	@param fieldName
	 *	@return PledgeTextCustomDO
	 *	@throws DataAccessException
	 */	 
    public PledgeTextCustomDO findByTypeIdAndFieldName(long typeId, String fieldName) throws DataAccessException;

	/**
	 *  Query DB table <tt>pledge_text_custom</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_text_custom where (type_id = ?)</tt>
	 *
	 *	@param typeId
	 *	@return List<PledgeTextCustomDO>
	 *	@throws DataAccessException
	 */	 
    public List<PledgeTextCustomDO> findByTypeId(long typeId) throws DataAccessException;

	/**
	 *  Query DB table <tt>pledge_text_custom</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_text_custom where ((is_by_relation = 'IS') AND (relation_field_name IS NOT NULL))</tt>
	 *
	 *	@return List<PledgeTextCustomDO>
	 *	@throws DataAccessException
	 */	 
    public List<PledgeTextCustomDO> findByRelationFieldName() throws DataAccessException;

	/**
	 *  Query DB table <tt>pledge_text_custom</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_text_custom where ((is_by_relation = 'NO') AND (relation_field_name IS NULL))</tt>
	 *
	 *	@return List<PledgeTextCustomDO>
	 *	@throws DataAccessException
	 */	 
    public List<PledgeTextCustomDO> findNotByRelationFieldName() throws DataAccessException;

	/**
	 *  Query DB table <tt>pledge_text_custom</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_text_custom where (field_name = ?)</tt>
	 *
	 *	@param fieldName
	 *	@return List<PledgeTextCustomDO>
	 *	@throws DataAccessException
	 */	 
    public List<PledgeTextCustomDO> findByFieldName(String fieldName) throws DataAccessException;

	/**
	 *  Query DB table <tt>pledge_text_custom</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_text_custom</tt>
	 *
	 *	@param typeId
	 *	@return List<PledgeTextCustomDO>
	 *	@throws DataAccessException
	 */	 
    public List<PledgeTextCustomDO> findMtextByTypeId(long typeId) throws DataAccessException;

	/**
	 *  Query DB table <tt>pledge_text_custom</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_text_custom</tt>
	 *
	 *	@param typeId
	 *	@return List<PledgeTextCustomDO>
	 *	@throws DataAccessException
	 */	 
    public List<PledgeTextCustomDO> findNotMtextByTypeId(long typeId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>pledge_text_custom</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from pledge_text_custom where (text_id = ?)</tt>
	 *
	 *	@param textId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long textId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>pledge_text_custom</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from pledge_text_custom where (type_id = ?)</tt>
	 *
	 *	@param typeId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByTypeId(long typeId) throws DataAccessException;

	/**
	 *  Query DB table <tt>pledge_text_custom</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from pledge_text_custom where (1 = 1)</tt>
	 *
	 *	@param pledgeTextCustom
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<PledgeTextCustomDO>
	 *	@throws DataAccessException
	 */	 
    public List<PledgeTextCustomDO> findByCondition(PledgeTextCustomDO pledgeTextCustom, long limitStart, long pageSize) throws DataAccessException;

	/**
	 *  Query DB table <tt>pledge_text_custom</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from pledge_text_custom where (1 = 1)</tt>
	 *
	 *	@param pledgeTextCustom
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(PledgeTextCustomDO pledgeTextCustom) throws DataAccessException;

}