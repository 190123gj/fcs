/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.pm.dal.daointerface.ViewChannelProjectAllPhasDAO;


// auto generated imports
import com.born.fcs.pm.dal.dataobject.ViewChannelProjectAllPhasDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.pm.dal.daointerface.ViewChannelProjectAllPhasDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/view_channel_project_all_phases.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisViewChannelProjectAllPhasDAO extends SqlMapClientDaoSupport implements ViewChannelProjectAllPhasDAO {
	/**
	 *  Query DB table <tt>view_channel_project_all_phases</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from view_channel_project_all_phases where ((project_code = ?) AND (phases = ?))</tt>
	 *
	 *	@param projectCode
	 *	@param phases
	 *	@return ViewChannelProjectAllPhasDO
	 *	@throws DataAccessException
	 */	 
    public ViewChannelProjectAllPhasDO findByProjectCodeAndPhase(String projectCode, long phases) throws DataAccessException {
        Map param = new HashMap();

        param.put("projectCode", projectCode);
        param.put("phases", new Long(phases));

        return (ViewChannelProjectAllPhasDO) getSqlMapClientTemplate().queryForObject("MS-VIEW-CHANNEL-PROJECT-ALL-PHAS-FIND-BY-PROJECT-CODE-AND-PHASE", param);

    }

	/**
	 *  Query DB table <tt>view_channel_project_all_phases</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select project_code, capital_channel_id, capital_channel_name, phases, phasesName from view_channel_project_all_phases</tt>
	 *
	 *	@param viewChannelProjectAllPha
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<ViewChannelProjectAllPhasDO>
	 *	@throws DataAccessException
	 */	 
    public List<ViewChannelProjectAllPhasDO> findByCondition(ViewChannelProjectAllPhasDO viewChannelProjectAllPha, long limitStart, long pageSize) throws DataAccessException {
    	if (viewChannelProjectAllPha == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("viewChannelProjectAllPha", viewChannelProjectAllPha);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-VIEW-CHANNEL-PROJECT-ALL-PHAS-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>view_channel_project_all_phases</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from view_channel_project_all_phases</tt>
	 *
	 *	@param viewChannelProjectAllPha
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(ViewChannelProjectAllPhasDO viewChannelProjectAllPha) throws DataAccessException {
    	if (viewChannelProjectAllPha == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-VIEW-CHANNEL-PROJECT-ALL-PHAS-FIND-BY-CONDITION-COUNT", viewChannelProjectAllPha);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}