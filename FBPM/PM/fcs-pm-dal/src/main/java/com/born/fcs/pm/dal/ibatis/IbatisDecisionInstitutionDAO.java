/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.dao.DataAccessException;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.born.fcs.pm.dal.daointerface.DecisionInstitutionDAO;
// auto generated imports
import com.born.fcs.pm.dal.dataobject.DecisionInstitutionDO;

/**
 * An ibatis based implementation of dao interface
 * <tt>com.born.fcs.pm.dal.daointerface.DecisionInstitutionDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access
 * Layer) code generation utility specially developed for <tt>paygw</tt>
 * project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be
 * OVERWRITTEN by someone else. To modify the file, you should go to directory
 * <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding
 * configuration file (<tt>tables/decision_institution.xml</tt>). Modify the
 * configuration file according to your needs, then run
 * <tt>specialmer-dalgen</tt> to generate this file.
 *
 * @author peigen
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public class IbatisDecisionInstitutionDAO extends SqlMapClientDaoSupport implements
																		DecisionInstitutionDAO {
	/**
	 * Insert one <tt>DecisionInstitutionDO</tt> object to DB table
	 * <tt>decision_institution</tt>, return primary key
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>insert into decision_institution(institution_id,institution_name,institution_members,raw_add_time) values (?, ?, ?, ?)</tt>
	 *
	 * @param decisionInstitution
	 * @return long
	 * @throws DataAccessException
	 */
	public long insert(DecisionInstitutionDO decisionInstitution) throws DataAccessException {
		if (decisionInstitution == null) {
			throw new IllegalArgumentException("Can't insert a null data object into db.");
		}
		
		getSqlMapClientTemplate().insert("MS-DECISION-INSTITUTION-INSERT", decisionInstitution);
		
		return decisionInstitution.getInstitutionId();
	}
	
	/**
	 * Update DB table <tt>decision_institution</tt>.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>update decision_institution set institution_name=?, institution_members=? where (institution_id = ?)</tt>
	 *
	 * @param decisionInstitution
	 * @return int
	 * @throws DataAccessException
	 */
	public int update(DecisionInstitutionDO decisionInstitution) throws DataAccessException {
		if (decisionInstitution == null) {
			throw new IllegalArgumentException("Can't update by a null data object.");
		}
		
		return getSqlMapClientTemplate().update("MS-DECISION-INSTITUTION-UPDATE",
			decisionInstitution);
	}
	
	/**
	 * Query DB table <tt>decision_institution</tt> for records.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>select * from decision_institution where (institution_id = ?)</tt>
	 *
	 * @param institutionId
	 * @return DecisionInstitutionDO
	 * @throws DataAccessException
	 */
	public DecisionInstitutionDO findById(long institutionId) throws DataAccessException {
		Long param = new Long(institutionId);
		
		return (DecisionInstitutionDO) getSqlMapClientTemplate().queryForObject(
			"MS-DECISION-INSTITUTION-FIND-BY-ID", param);
		
	}
	
	/**
	 * Delete records from DB table <tt>decision_institution</tt>.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>delete from decision_institution where (institution_id = ?)</tt>
	 *
	 * @param institutionId
	 * @return int
	 * @throws DataAccessException
	 */
	public int deleteById(long institutionId) throws DataAccessException {
		Long param = new Long(institutionId);
		
		return getSqlMapClientTemplate().delete("MS-DECISION-INSTITUTION-DELETE-BY-ID", param);
	}
	
	/**
	 * Query DB table <tt>decision_institution</tt> for records.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>select * from decision_institution where (1 = 1)</tt>
	 *
	 * @param institutionName
	 * @return DecisionInstitutionDO
	 * @throws DataAccessException
	 */
	public DecisionInstitutionDO findDecisionInstitutionByInstitutionName(String institutionName)
																									throws DataAccessException {
		String param = new String(institutionName);
		return (DecisionInstitutionDO) getSqlMapClientTemplate().queryForObject(
			"MS-DECISION-INSTITUTION-FIND-DECISION-INSTITUTION-BY-INSTITUTION-NAME", param);
		
	}
	
	/**
	 * Query DB table <tt>decision_institution</tt> for records.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>select COUNT(*) from decision_institution where (1 = 1)</tt>
	 *
	 * @param decisionInstitution
	 * @return long
	 * @throws DataAccessException
	 */
	public long findByConditionCount(DecisionInstitutionDO decisionInstitution)
																				throws DataAccessException {
		if (decisionInstitution == null) {
			throw new IllegalArgumentException("Can't select by a null data object.");
		}
		Map param = new HashMap();
		
		param.put("decisionInstitution", decisionInstitution);
		
		Long retObj = (Long) getSqlMapClientTemplate().queryForObject(
			"MS-DECISION-INSTITUTION-FIND-BY-CONDITION-COUNT", param);
		
		if (retObj == null) {
			return 0;
		} else {
			return retObj.longValue();
		}
		
	}
	
	/**
	 * Query DB table <tt>decision_institution</tt> for records.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>select * from decision_institution where (1 = 1)</tt>
	 *
	 * @param decisionInstitution
	 * @param limitStart
	 * @param pageSize
	 * @return List<DecisionInstitutionDO>
	 * @throws DataAccessException
	 */
	public List<DecisionInstitutionDO> findByCondition(DecisionInstitutionDO decisionInstitution,
														long limitStart, long pageSize,
														String sortOrder, String sortCol)
																							throws DataAccessException {
		if (decisionInstitution == null) {
			throw new IllegalArgumentException("Can't select by a null data object.");
		}
		
		Map param = new HashMap();
		
		param.put("decisionInstitution", decisionInstitution);
		param.put("limitStart", new Long(limitStart));
		param.put("pageSize", new Long(pageSize));
		param.put("sortOrder", sortOrder);
		param.put("sortCol", sortCol);
		return getSqlMapClientTemplate().queryForList("MS-DECISION-INSTITUTION-FIND-BY-CONDITION",
			param);
		
	}
	
}