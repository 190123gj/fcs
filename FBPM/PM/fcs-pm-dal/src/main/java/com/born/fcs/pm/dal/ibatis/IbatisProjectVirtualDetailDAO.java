/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.pm.dal.daointerface.ProjectVirtualDetailDAO;


// auto generated imports
import com.born.fcs.pm.dal.dataobject.ProjectVirtualDetailDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.pm.dal.daointerface.ProjectVirtualDetailDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/project_virtual_detail.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisProjectVirtualDetailDAO extends SqlMapClientDaoSupport implements ProjectVirtualDetailDAO {
	/**
	 *  Insert one <tt>ProjectVirtualDetailDO</tt> object to DB table <tt>project_virtual_detail</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into project_virtual_detail(detail_id,virtual_id,virtual_project_code,project_code,project_name,customer_id,customer_name,amount,balance,busi_type,busi_type_name,busi_manager_id,busi_manager_account,busi_manager_name,dept_id,dept_name,remark,attach,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param projectVirtualDetail
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(ProjectVirtualDetailDO projectVirtualDetail) throws DataAccessException {
    	if (projectVirtualDetail == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-PROJECT-VIRTUAL-DETAIL-INSERT", projectVirtualDetail);

        return projectVirtualDetail.getDetailId();
    }

	/**
	 *  Update DB table <tt>project_virtual_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update project_virtual_detail set virtual_id=?, virtual_project_code=?, project_code=?, project_name=?, customer_id=?, customer_name=?, amount=?, balance=?, busi_type=?, busi_type_name=?, busi_manager_id=?, busi_manager_account=?, busi_manager_name=?, dept_id=?, dept_name=?, remark=?, attach=? where (detail_id = ?)</tt>
	 *
	 *	@param projectVirtualDetail
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(ProjectVirtualDetailDO projectVirtualDetail) throws DataAccessException {
    	if (projectVirtualDetail == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-PROJECT-VIRTUAL-DETAIL-UPDATE", projectVirtualDetail);
    }

	/**
	 *  Update DB table <tt>project_virtual_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update project_virtual_detail set virtual_project_code=? where (virtual_id = ?)</tt>
	 *
	 *	@param virtualProjectCode
	 *	@param virtualId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateVirtualProjectCode(String virtualProjectCode, long virtualId) throws DataAccessException {
        Map param = new HashMap();

        param.put("virtualProjectCode", virtualProjectCode);
        param.put("virtualId", new Long(virtualId));

        return getSqlMapClientTemplate().update("MS-PROJECT-VIRTUAL-DETAIL-UPDATE-VIRTUAL-PROJECT-CODE", param);
    }

	/**
	 *  Query DB table <tt>project_virtual_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from project_virtual_detail where (detail_id = ?)</tt>
	 *
	 *	@param detailId
	 *	@return ProjectVirtualDetailDO
	 *	@throws DataAccessException
	 */	 
    public ProjectVirtualDetailDO findById(long detailId) throws DataAccessException {
        Long param = new Long(detailId);

        return (ProjectVirtualDetailDO) getSqlMapClientTemplate().queryForObject("MS-PROJECT-VIRTUAL-DETAIL-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>project_virtual_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from project_virtual_detail where (virtual_id = ?)</tt>
	 *
	 *	@param virtualId
	 *	@return List<ProjectVirtualDetailDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProjectVirtualDetailDO> findByVirtualId(long virtualId) throws DataAccessException {
        Long param = new Long(virtualId);

        return getSqlMapClientTemplate().queryForList("MS-PROJECT-VIRTUAL-DETAIL-FIND-BY-VIRTUAL-ID", param);

    }

	/**
	 *  Query DB table <tt>project_virtual_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from project_virtual_detail where (virtual_project_code = ?)</tt>
	 *
	 *	@param virtualProjectCode
	 *	@return List<ProjectVirtualDetailDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProjectVirtualDetailDO> findByVirtualProjectCode(String virtualProjectCode) throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-PROJECT-VIRTUAL-DETAIL-FIND-BY-VIRTUAL-PROJECT-CODE", virtualProjectCode);

    }

	/**
	 *  Delete records from DB table <tt>project_virtual_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from project_virtual_detail where (detail_id = ?)</tt>
	 *
	 *	@param detailId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long detailId) throws DataAccessException {
        Long param = new Long(detailId);

        return getSqlMapClientTemplate().delete("MS-PROJECT-VIRTUAL-DETAIL-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>project_virtual_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from project_virtual_detail where (virtual_id = ?)</tt>
	 *
	 *	@param virtualId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByVirtualId(long virtualId) throws DataAccessException {
        Long param = new Long(virtualId);

        return getSqlMapClientTemplate().delete("MS-PROJECT-VIRTUAL-DETAIL-DELETE-BY-VIRTUAL-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>project_virtual_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from project_virtual_detail where (virtual_project_code = ?)</tt>
	 *
	 *	@param virtualProjectCode
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByVirtualProjectCode(String virtualProjectCode) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-PROJECT-VIRTUAL-DETAIL-DELETE-BY-VIRTUAL-PROJECT-CODE", virtualProjectCode);
    }

}