/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.pm.dal.daointerface.ExpireProjectNoticeTemplateDAO;


// auto generated imports
import com.born.fcs.pm.dal.dataobject.ExpireProjectNoticeTemplateDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.pm.dal.daointerface.ExpireProjectNoticeTemplateDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/expire_project_notice_template.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisExpireProjectNoticeTemplateDAO extends SqlMapClientDaoSupport implements ExpireProjectNoticeTemplateDAO {
	/**
	 *  Insert one <tt>ExpireProjectNoticeTemplateDO</tt> object to DB table <tt>expire_project_notice_template</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into expire_project_notice_template(expire_id,status,year,sequence,project_code,project_name,exhibition_period_protocol_no,borrow_money,operator_id,operator,issue_date,expiration_date,interest,full_in_numbers,return_numbers,receipt,remark,html,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param expireProjectNoticeTemplate
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(ExpireProjectNoticeTemplateDO expireProjectNoticeTemplate) throws DataAccessException {
    	if (expireProjectNoticeTemplate == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-EXPIRE-PROJECT-NOTICE-TEMPLATE-INSERT", expireProjectNoticeTemplate);

        return expireProjectNoticeTemplate.getId();
    }

	/**
	 *  Update DB table <tt>expire_project_notice_template</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update expire_project_notice_template set expire_id=?, status=?, year=?, sequence=?, project_code=?, project_name=?, exhibition_period_protocol_no=?, borrow_money=?, operator_id=?, operator=?, issue_date=?, expiration_date=?, interest=?, full_in_numbers=?, return_numbers=?, receipt=?, remark=?, html=? where (id = ?)</tt>
	 *
	 *	@param expireProjectNoticeTemplate
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(ExpireProjectNoticeTemplateDO expireProjectNoticeTemplate) throws DataAccessException {
    	if (expireProjectNoticeTemplate == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-EXPIRE-PROJECT-NOTICE-TEMPLATE-UPDATE", expireProjectNoticeTemplate);
    }

	/**
	 *  Query DB table <tt>expire_project_notice_template</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from expire_project_notice_template where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return ExpireProjectNoticeTemplateDO
	 *	@throws DataAccessException
	 */	 
    public ExpireProjectNoticeTemplateDO findById(long id) throws DataAccessException {
        Long param = new Long(id);

        return (ExpireProjectNoticeTemplateDO) getSqlMapClientTemplate().queryForObject("MS-EXPIRE-PROJECT-NOTICE-TEMPLATE-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>expire_project_notice_template</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from expire_project_notice_template where (project_code = ?)</tt>
	 *
	 *	@param projectCode
	 *	@return ExpireProjectNoticeTemplateDO
	 *	@throws DataAccessException
	 */	 
    public ExpireProjectNoticeTemplateDO findByProjectCode(String projectCode) throws DataAccessException {

        return (ExpireProjectNoticeTemplateDO) getSqlMapClientTemplate().queryForObject("MS-EXPIRE-PROJECT-NOTICE-TEMPLATE-FIND-BY-PROJECT-CODE", projectCode);

    }

	/**
	 *  Query DB table <tt>expire_project_notice_template</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from expire_project_notice_template where ((expire_id = ?) AND (status = ?))</tt>
	 *
	 *	@param expireId
	 *	@param status
	 *	@return ExpireProjectNoticeTemplateDO
	 *	@throws DataAccessException
	 */	 
    public ExpireProjectNoticeTemplateDO findByExpireIdAndStatus(long expireId, String status) throws DataAccessException {
        Map param = new HashMap();

        param.put("expireId", new Long(expireId));
        param.put("status", status);

        return (ExpireProjectNoticeTemplateDO) getSqlMapClientTemplate().queryForObject("MS-EXPIRE-PROJECT-NOTICE-TEMPLATE-FIND-BY-EXPIRE-ID-AND-STATUS", param);

    }

	/**
	 *  Delete records from DB table <tt>expire_project_notice_template</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from expire_project_notice_template where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException {
        Long param = new Long(id);

        return getSqlMapClientTemplate().delete("MS-EXPIRE-PROJECT-NOTICE-TEMPLATE-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>expire_project_notice_template</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from expire_project_notice_template where (1 = 1)</tt>
	 *
	 *	@param expireProjectNoticeTemplate
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(ExpireProjectNoticeTemplateDO expireProjectNoticeTemplate) throws DataAccessException {
    	if (expireProjectNoticeTemplate == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-EXPIRE-PROJECT-NOTICE-TEMPLATE-FIND-BY-CONDITION-COUNT", expireProjectNoticeTemplate);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>expire_project_notice_template</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from expire_project_notice_template where (1 = 1)</tt>
	 *
	 *	@param expireProjectNoticeTemplate
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<ExpireProjectNoticeTemplateDO>
	 *	@throws DataAccessException
	 */	 
    public List<ExpireProjectNoticeTemplateDO> findByCondition(ExpireProjectNoticeTemplateDO expireProjectNoticeTemplate, long limitStart, long pageSize) throws DataAccessException {
    	if (expireProjectNoticeTemplate == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("expireProjectNoticeTemplate", expireProjectNoticeTemplate);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-EXPIRE-PROJECT-NOTICE-TEMPLATE-FIND-BY-CONDITION", param);

    }

}