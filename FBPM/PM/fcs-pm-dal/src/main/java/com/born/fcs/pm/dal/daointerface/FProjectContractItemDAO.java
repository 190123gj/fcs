/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.daointerface;

// auto generated imports
import com.born.fcs.pm.dal.dataobject.FProjectContractItemDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>f_project_contract_item</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/f_project_contract_item.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface FProjectContractItemDAO {
	/**
	 *  Insert one <tt>FProjectContractItemDO</tt> object to DB table <tt>f_project_contract_item</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into f_project_contract_item(id,contract_id,contract_code,contract_code2,contract_name,contract_status,pledge_id,template_id,contract_type,is_main,stamp_phase,cnt,file_url,credit_measure,content,content_message,remark,audit_info,signed_time,sign_person_a,sign_person_b,sign_person_a_id,sign_person_b_id,contract_scan_url,invalid_reason,approved_amount,approved_time,approved_url,basis_of_decision,basis_of_decision_type,letter_type,credit_condition_type,pledge_type,court_ruling_url,court_ruling_time,court_ruling_add_time,contract_amount,form_change,risk_council_summary,project_approval,project_set_up,refer_attachment,return_remark,return_add_time,is_need_stamp,sort_order,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param FProjectContractItem
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(FProjectContractItemDO FProjectContractItem) throws DataAccessException;

	/**
	 *  Update DB table <tt>f_project_contract_item</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update f_project_contract_item set contract_id=?, contract_code=?, contract_code2=?, contract_name=?, contract_status=?, pledge_id=?, template_id=?, contract_type=?, is_main=?, stamp_phase=?, cnt=?, file_url=?, credit_measure=?, content=?, content_message=?, remark=?, audit_info=?, signed_time=?, sign_person_a=?, sign_person_b=?, sign_person_a_id=?, sign_person_b_id=?, contract_scan_url=?, invalid_reason=?, approved_amount=?, approved_time=?, approved_url=?, basis_of_decision=?, basis_of_decision_type=?, letter_type=?, credit_condition_type=?, pledge_type=?, court_ruling_url=?, court_ruling_time=?, contract_amount=?, form_change=?, risk_council_summary=?, project_approval=?, project_set_up=?, refer_attachment=?, return_remark=?, sort_order=?, return_add_time=?, is_need_stamp=?, court_ruling_add_time=? where (id = ?)</tt>
	 *
	 *	@param FProjectContractItem
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(FProjectContractItemDO FProjectContractItem) throws DataAccessException;

	/**
	 *  Query DB table <tt>f_project_contract_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, contract_id, contract_code, contract_code2, contract_name, contract_status, pledge_id, template_id, contract_type, is_main, stamp_phase, cnt, file_url, credit_measure, content, content_message, remark, audit_info, signed_time, sign_person_a, sign_person_b, sign_person_a_id, sign_person_b_id, contract_scan_url, invalid_reason, approved_amount, approved_time, approved_url, basis_of_decision, basis_of_decision_type, letter_type, credit_condition_type, pledge_type, court_ruling_url, court_ruling_time, contract_amount, form_change, risk_council_summary, project_approval, project_set_up, refer_attachment, return_remark, sort_order, raw_add_time, raw_update_time, return_add_time, court_ruling_add_time, is_need_stamp from f_project_contract_item where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return FProjectContractItemDO
	 *	@throws DataAccessException
	 */	 
    public FProjectContractItemDO findById(long id) throws DataAccessException;

	/**
	 *  Query DB table <tt>f_project_contract_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, contract_id, contract_code, contract_code2, contract_name, contract_status, pledge_id, template_id, contract_type, is_main, stamp_phase, cnt, file_url, credit_measure, content, content_message, remark, audit_info, signed_time, sign_person_a, sign_person_b, sign_person_a_id, sign_person_b_id, contract_scan_url, invalid_reason, approved_amount, approved_time, approved_url, basis_of_decision, basis_of_decision_type, letter_type, credit_condition_type, pledge_type, court_ruling_url, court_ruling_time, contract_amount, form_change, risk_council_summary, project_approval, project_set_up, refer_attachment, return_remark, sort_order, raw_add_time, raw_update_time, return_add_time, court_ruling_add_time, is_need_stamp from f_project_contract_item where (contract_id = ?)</tt>
	 *
	 *	@param contractId
	 *	@return List<FProjectContractItemDO>
	 *	@throws DataAccessException
	 */	 
    public List<FProjectContractItemDO> findByFormContractId(long contractId) throws DataAccessException;

	/**
	 *  Query DB table <tt>f_project_contract_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, contract_id, contract_code, contract_code2, contract_name, contract_status, pledge_id, template_id, contract_type, is_main, stamp_phase, cnt, file_url, credit_measure, content, content_message, remark, audit_info, signed_time, sign_person_a, sign_person_b, sign_person_a_id, sign_person_b_id, contract_scan_url, invalid_reason, approved_amount, approved_time, approved_url, basis_of_decision, basis_of_decision_type, letter_type, credit_condition_type, pledge_type, court_ruling_url, court_ruling_time, contract_amount, form_change, risk_council_summary, project_approval, project_set_up, refer_attachment, return_remark, sort_order, raw_add_time, raw_update_time, return_add_time, court_ruling_add_time, is_need_stamp from f_project_contract_item where (contract_code = ?)</tt>
	 *
	 *	@param contractCode
	 *	@return FProjectContractItemDO
	 *	@throws DataAccessException
	 */	 
    public FProjectContractItemDO findByContractCode(String contractCode) throws DataAccessException;

	/**
	 *  Query DB table <tt>f_project_contract_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, contract_id, contract_code, contract_code2, contract_name, contract_status, pledge_id, template_id, contract_type, is_main, stamp_phase, cnt, file_url, credit_measure, content, content_message, remark, audit_info, signed_time, sign_person_a, sign_person_b, sign_person_a_id, sign_person_b_id, contract_scan_url, invalid_reason, approved_amount, approved_time, approved_url, basis_of_decision, basis_of_decision_type, letter_type, credit_condition_type, pledge_type, court_ruling_url, court_ruling_time, contract_amount, form_change, risk_council_summary, project_approval, project_set_up, refer_attachment, return_remark, sort_order, raw_add_time, raw_update_time, return_add_time, court_ruling_add_time, is_need_stamp from f_project_contract_item where ((contract_code2 = ?) AND (contract_status NOT IN ('DELETED', 'END')))</tt>
	 *
	 *	@param contractCode2
	 *	@return FProjectContractItemDO
	 *	@throws DataAccessException
	 */	 
    public FProjectContractItemDO findByContractCode2(String contractCode2) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>f_project_contract_item</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_project_contract_item where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>f_project_contract_item</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_project_contract_item where (contract_id = ?)</tt>
	 *
	 *	@param contractId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByContractId(long contractId) throws DataAccessException;

	/**
	 *  Query DB table <tt>f_project_contract_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from f_project_contract_item</tt>
	 *
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findAllCount() throws DataAccessException;

	/**
	 *  Query DB table <tt>f_project_contract_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_project_contract_item where (id = ?)</tt>
	 *
	 *	@param FProjectContractItem
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<FProjectContractItemDO>
	 *	@throws DataAccessException
	 */	 
    public List<FProjectContractItemDO> findByCondition(FProjectContractItemDO FProjectContractItem, long limitStart, long pageSize) throws DataAccessException;

	/**
	 *  Query DB table <tt>f_project_contract_item</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_project_contract_item where (id = ?)</tt>
	 *
	 *	@param FProjectContractItem
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(FProjectContractItemDO FProjectContractItem) throws DataAccessException;

}