/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.daointerface;

// auto generated imports
import com.born.fcs.pm.dal.dataobject.FInvestigationCsRationalityReviewGuarantorDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>f_investigation_cs_rationality_review_guarantor</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/f_investigation_cs_rationality_review_guarantor.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface FInvestigationCsRationalityReviewGuarantorDAO {
	/**
	 *  Insert one <tt>FInvestigationCsRationalityReviewGuarantorDO</tt> object to DB table <tt>f_investigation_cs_rationality_review_guarantor</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into f_investigation_cs_rationality_review_guarantor(form_id,guarantor_type,guarantor_name,established_time,operating_term,legal_persion,org_code,living_address,actual_control_person,enterprise_type,work_address,is_one_cert,busi_license_no,tax_certificate_no,local_tax_no,loan_card_no,last_check_year,busi_scope,leader_review,event_desc,guarantor_cert_type,guarantor_sex,guarantor_cert_no,guarantor_contact_no,guarantor_address,marital_status,spouse_name,spouse_cert_type,spouse_cert_no,spouse_contact_no,name,sex,cert_no,house_num,car_num,invest_amount,deposit_amount,marriage,mate_name,mate_cert_type,mate_cert_no,mate_contact_no,spouse_address,spouse_immovable_property,spouse_movable_property,has_bank_loan,has_folk_loan,bank_loan_amount,folk_loan_amount,consumer_loan_bank,consumer_loan_amount,consumer_loan_start_date,consumer_loan_end_date,busines_loan_bank,busines_loan_amount,busines_loan_start_date,busines_loan_end_date,mortgage_loan_bank,mortgage_loan_amount,mortgage_loan_start_date,mortgage_loan_end_date,sort_order,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param FInvestigationCsRationalityReviewGuarantor
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(FInvestigationCsRationalityReviewGuarantorDO FInvestigationCsRationalityReviewGuarantor) throws DataAccessException;

	/**
	 *  Update DB table <tt>f_investigation_cs_rationality_review_guarantor</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update f_investigation_cs_rationality_review_guarantor set form_id=?, guarantor_type=?, guarantor_name=?, established_time=?, operating_term=?, legal_persion=?, org_code=?, living_address=?, actual_control_person=?, enterprise_type=?, work_address=?, is_one_cert=?, busi_license_no=?, tax_certificate_no=?, local_tax_no=?, loan_card_no=?, last_check_year=?, busi_scope=?, leader_review=?, event_desc=?, guarantor_cert_type=?, guarantor_sex=?, guarantor_cert_no=?, guarantor_contact_no=?, guarantor_address=?, marital_status=?, spouse_name=?, spouse_cert_type=?, spouse_cert_no=?, spouse_contact_no=?, name=?, sex=?, cert_no=?, house_num=?, car_num=?, invest_amount=?, deposit_amount=?, marriage=?, mate_name=?, mate_cert_type=?, mate_cert_no=?, mate_contact_no=?, spouse_address=?, spouse_immovable_property=?, spouse_movable_property=?, has_bank_loan=?, has_folk_loan=?, bank_loan_amount=?, folk_loan_amount=?, consumer_loan_bank=?, consumer_loan_amount=?, consumer_loan_start_date=?, consumer_loan_end_date=?, busines_loan_bank=?, busines_loan_amount=?, busines_loan_start_date=?, busines_loan_end_date=?, mortgage_loan_bank=?, mortgage_loan_amount=?, mortgage_loan_start_date=?, mortgage_loan_end_date=?, sort_order=? where (guarantor_id = ?)</tt>
	 *
	 *	@param FInvestigationCsRationalityReviewGuarantor
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(FInvestigationCsRationalityReviewGuarantorDO FInvestigationCsRationalityReviewGuarantor) throws DataAccessException;

	/**
	 *  Query DB table <tt>f_investigation_cs_rationality_review_guarantor</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_investigation_cs_rationality_review_guarantor where (guarantor_id = ?)</tt>
	 *
	 *	@param guarantorId
	 *	@return FInvestigationCsRationalityReviewGuarantorDO
	 *	@throws DataAccessException
	 */	 
    public FInvestigationCsRationalityReviewGuarantorDO findById(long guarantorId) throws DataAccessException;

	/**
	 *  Query DB table <tt>f_investigation_cs_rationality_review_guarantor</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_investigation_cs_rationality_review_guarantor where (form_id = ?) order by sort_order ASC</tt>
	 *
	 *	@param formId
	 *	@return List<FInvestigationCsRationalityReviewGuarantorDO>
	 *	@throws DataAccessException
	 */	 
    public List<FInvestigationCsRationalityReviewGuarantorDO> findByFormId(long formId) throws DataAccessException;

	/**
	 *  Query DB table <tt>f_investigation_cs_rationality_review_guarantor</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_investigation_cs_rationality_review_guarantor where ((form_id = ?) AND (guarantor_type = ?)) order by sort_order ASC</tt>
	 *
	 *	@param formId
	 *	@param guarantorType
	 *	@return List<FInvestigationCsRationalityReviewGuarantorDO>
	 *	@throws DataAccessException
	 */	 
    public List<FInvestigationCsRationalityReviewGuarantorDO> findByFormIdAndType(long formId, String guarantorType) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>f_investigation_cs_rationality_review_guarantor</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_investigation_cs_rationality_review_guarantor where (guarantor_id = ?)</tt>
	 *
	 *	@param guarantorId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long guarantorId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>f_investigation_cs_rationality_review_guarantor</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_investigation_cs_rationality_review_guarantor where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByFormId(long formId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>f_investigation_cs_rationality_review_guarantor</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_investigation_cs_rationality_review_guarantor where ((form_id = ?) AND (guarantor_type = ?))</tt>
	 *
	 *	@param formId
	 *	@param guarantorType
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByFormIdAndType(long formId, String guarantorType) throws DataAccessException;

}