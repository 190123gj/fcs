/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.daointerface;

// auto generated imports
import com.born.fcs.pm.dal.dataobject.FInvestigationUnderwritingDO;
import org.springframework.dao.DataAccessException;

/**
 * A dao interface provides methods to access database table <tt>f_investigation_underwriting</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/f_investigation_underwriting.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */

public interface FInvestigationUnderwritingDAO {
	/**
	 *  Insert one <tt>FInvestigationUnderwritingDO</tt> object to DB table <tt>f_investigation_underwriting</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into f_investigation_underwriting(form_id,project_code,project_name,customer_id,customer_name,project_source,project_gist,financing_amount,demand_date,setup_date,issue_date,collect_scale,time_limit,time_unit,total_cost,issue_rate,has_credit,exchange_id,exchange_name,charge_rate,charge_unit,law_office_rate,law_office_unit,club_rate,club_unit,other_rate,other_unit,underwriting_rate,underwriting_unit,charge_way,balance,intro,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param FInvestigationUnderwriting
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(FInvestigationUnderwritingDO FInvestigationUnderwriting) throws DataAccessException;

	/**
	 *  Update DB table <tt>f_investigation_underwriting</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update f_investigation_underwriting set form_id=?, project_code=?, project_name=?, customer_id=?, customer_name=?, project_source=?, project_gist=?, financing_amount=?, demand_date=?, setup_date=?, issue_date=?, collect_scale=?, time_limit=?, time_unit=?, total_cost=?, issue_rate=?, has_credit=?, exchange_id=?, exchange_name=?, charge_rate=?, charge_unit=?, law_office_rate=?, law_office_unit=?, club_rate=?, club_unit=?, other_rate=?, other_unit=?, underwriting_rate=?, underwriting_unit=?, charge_way=?, balance=?, intro=? where (underwriting_id = ?)</tt>
	 *
	 *	@param FInvestigationUnderwriting
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(FInvestigationUnderwritingDO FInvestigationUnderwriting) throws DataAccessException;

	/**
	 *  Update DB table <tt>f_investigation_underwriting</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update f_investigation_underwriting set project_code=?, project_name=?, customer_id=?, customer_name=?, project_source=?, project_gist=?, financing_amount=?, demand_date=?, setup_date=?, issue_date=?, collect_scale=?, time_limit=?, time_unit=?, total_cost=?, issue_rate=?, has_credit=?, exchange_id=?, exchange_name=?, charge_rate=?, charge_unit=?, law_office_rate=?, law_office_unit=?, club_rate=?, club_unit=?, other_rate=?, other_unit=?, underwriting_rate=?, underwriting_unit=?, charge_way=?, balance=?, intro=? where (form_id = ?)</tt>
	 *
	 *	@param FInvestigationUnderwriting
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateByFormId(FInvestigationUnderwritingDO FInvestigationUnderwriting) throws DataAccessException;

	/**
	 *  Update DB table <tt>f_investigation_underwriting</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update f_investigation_underwriting set form_id=?, project_name=?, customer_id=?, customer_name=?, project_source=?, project_gist=?, financing_amount=?, demand_date=?, setup_date=?, issue_date=?, collect_scale=?, time_limit=?, time_unit=?, total_cost=?, issue_rate=?, has_credit=?, exchange_id=?, exchange_name=?, charge_rate=?, charge_unit=?, law_office_rate=?, law_office_unit=?, club_rate=?, club_unit=?, other_rate=?, other_unit=?, underwriting_rate=?, underwriting_unit=?, charge_way=?, balance=?, intro=? where (project_code = ?)</tt>
	 *
	 *	@param FInvestigationUnderwriting
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateProjectCode(FInvestigationUnderwritingDO FInvestigationUnderwriting) throws DataAccessException;

	/**
	 *  Query DB table <tt>f_investigation_underwriting</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_investigation_underwriting where (underwriting_id = ?)</tt>
	 *
	 *	@param underwritingId
	 *	@return FInvestigationUnderwritingDO
	 *	@throws DataAccessException
	 */	 
    public FInvestigationUnderwritingDO findById(long underwritingId) throws DataAccessException;

	/**
	 *  Query DB table <tt>f_investigation_underwriting</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_investigation_underwriting where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return FInvestigationUnderwritingDO
	 *	@throws DataAccessException
	 */	 
    public FInvestigationUnderwritingDO findByFormId(long formId) throws DataAccessException;

	/**
	 *  Query DB table <tt>f_investigation_underwriting</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_investigation_underwriting where (project_code = ?)</tt>
	 *
	 *	@param projectCode
	 *	@return FInvestigationUnderwritingDO
	 *	@throws DataAccessException
	 */	 
    public FInvestigationUnderwritingDO findByProjectCode(String projectCode) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>f_investigation_underwriting</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_investigation_underwriting where (underwriting_id = ?)</tt>
	 *
	 *	@param underwritingId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long underwritingId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>f_investigation_underwriting</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_investigation_underwriting where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByFormId(long formId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>f_investigation_underwriting</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_investigation_underwriting where (project_code = ?)</tt>
	 *
	 *	@param projectCode
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByProjectCode(String projectCode) throws DataAccessException;

}