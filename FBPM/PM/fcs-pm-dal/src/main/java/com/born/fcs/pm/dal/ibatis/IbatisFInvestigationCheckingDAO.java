/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.pm.dal.daointerface.FInvestigationCheckingDAO;


// auto generated imports
import com.born.fcs.pm.dal.dataobject.FInvestigationCheckingDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.pm.dal.daointerface.FInvestigationCheckingDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/f_investigation_checking.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisFInvestigationCheckingDAO extends SqlMapClientDaoSupport implements FInvestigationCheckingDAO {
	/**
	 *  Insert one <tt>FInvestigationCheckingDO</tt> object to DB table <tt>f_investigation_checking</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into f_investigation_checking(form_id,project_code,related_form_id,check_point,form_code,user_id,user_account,user_name,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param FInvestigationChecking
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(FInvestigationCheckingDO FInvestigationChecking) throws DataAccessException {
    	if (FInvestigationChecking == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-F-INVESTIGATION-CHECKING-INSERT", FInvestigationChecking);

        return FInvestigationChecking.getId();
    }

	/**
	 *  Update DB table <tt>f_investigation_checking</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update f_investigation_checking set form_id=?, project_code=?, related_form_id=?, check_point=?, form_code=?, user_id=?, user_account=?, user_name=? where (id = ?)</tt>
	 *
	 *	@param FInvestigationChecking
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(FInvestigationCheckingDO FInvestigationChecking) throws DataAccessException {
    	if (FInvestigationChecking == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-F-INVESTIGATION-CHECKING-UPDATE", FInvestigationChecking);
    }

	/**
	 *  Update DB table <tt>f_investigation_checking</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update f_investigation_checking set project_code=?, related_form_id=?, check_point=?, form_code=?, user_id=?, user_account=?, user_name=? where (form_id = ?)</tt>
	 *
	 *	@param FInvestigationChecking
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateByFormId(FInvestigationCheckingDO FInvestigationChecking) throws DataAccessException {
    	if (FInvestigationChecking == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-F-INVESTIGATION-CHECKING-UPDATE-BY-FORM-ID", FInvestigationChecking);
    }

	/**
	 *  Update DB table <tt>f_investigation_checking</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update f_investigation_checking set form_id=?, related_form_id=?, check_point=?, form_code=?, user_id=?, user_account=?, user_name=? where (project_code = ?)</tt>
	 *
	 *	@param FInvestigationChecking
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateProjectCode(FInvestigationCheckingDO FInvestigationChecking) throws DataAccessException {
    	if (FInvestigationChecking == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-F-INVESTIGATION-CHECKING-UPDATE-PROJECT-CODE", FInvestigationChecking);
    }

	/**
	 *  Query DB table <tt>f_investigation_checking</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_investigation_checking where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return FInvestigationCheckingDO
	 *	@throws DataAccessException
	 */	 
    public FInvestigationCheckingDO findById(long id) throws DataAccessException {
        Long param = new Long(id);

        return (FInvestigationCheckingDO) getSqlMapClientTemplate().queryForObject("MS-F-INVESTIGATION-CHECKING-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>f_investigation_checking</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_investigation_checking where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return FInvestigationCheckingDO
	 *	@throws DataAccessException
	 */	 
    public FInvestigationCheckingDO findByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return (FInvestigationCheckingDO) getSqlMapClientTemplate().queryForObject("MS-F-INVESTIGATION-CHECKING-FIND-BY-FORM-ID", param);

    }

	/**
	 *  Query DB table <tt>f_investigation_checking</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_investigation_checking where ((related_form_id = ?) AND (check_point = ?))</tt>
	 *
	 *	@param relatedFormId
	 *	@param checkPoint
	 *	@return FInvestigationCheckingDO
	 *	@throws DataAccessException
	 */	 
    public FInvestigationCheckingDO findByRelatedFormIdAndCheckPoint(long relatedFormId, String checkPoint) throws DataAccessException {
        Map param = new HashMap();

        param.put("relatedFormId", new Long(relatedFormId));
        param.put("checkPoint", checkPoint);

        return (FInvestigationCheckingDO) getSqlMapClientTemplate().queryForObject("MS-F-INVESTIGATION-CHECKING-FIND-BY-RELATED-FORM-ID-AND-CHECK-POINT", param);

    }

	/**
	 *  Query DB table <tt>f_investigation_checking</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_investigation_checking where (project_code = ?)</tt>
	 *
	 *	@param projectCode
	 *	@return List<FInvestigationCheckingDO>
	 *	@throws DataAccessException
	 */	 
    public List<FInvestigationCheckingDO> findByProjectCode(String projectCode) throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-F-INVESTIGATION-CHECKING-FIND-BY-PROJECT-CODE", projectCode);

    }

	/**
	 *  Query DB table <tt>f_investigation_checking</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from f_investigation_checking where (related_form_id = ?)</tt>
	 *
	 *	@param relatedFormId
	 *	@return List<FInvestigationCheckingDO>
	 *	@throws DataAccessException
	 */	 
    public List<FInvestigationCheckingDO> findByRelatedFormId(long relatedFormId) throws DataAccessException {
        Long param = new Long(relatedFormId);

        return getSqlMapClientTemplate().queryForList("MS-F-INVESTIGATION-CHECKING-FIND-BY-RELATED-FORM-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>f_investigation_checking</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_investigation_checking where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException {
        Long param = new Long(id);

        return getSqlMapClientTemplate().delete("MS-F-INVESTIGATION-CHECKING-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>f_investigation_checking</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_investigation_checking where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return getSqlMapClientTemplate().delete("MS-F-INVESTIGATION-CHECKING-DELETE-BY-FORM-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>f_investigation_checking</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from f_investigation_checking where (project_code = ?)</tt>
	 *
	 *	@param projectCode
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByProjectCode(String projectCode) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-F-INVESTIGATION-CHECKING-DELETE-BY-PROJECT-CODE", projectCode);
    }

}