/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.dao.DataAccessException;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.born.fcs.pm.dal.daointerface.DecisionMemberDAO;
// auto generated imports
import com.born.fcs.pm.dal.dataobject.DecisionMemberDO;

/**
 * An ibatis based implementation of dao interface
 * <tt>com.born.fcs.pm.dal.daointerface.DecisionMemberDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access
 * Layer) code generation utility specially developed for <tt>paygw</tt>
 * project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be
 * OVERWRITTEN by someone else. To modify the file, you should go to directory
 * <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding
 * configuration file (<tt>tables/decision_member.xml</tt>). Modify the
 * configuration file according to your needs, then run
 * <tt>specialmer-dalgen</tt> to generate this file.
 *
 * @author peigen
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public class IbatisDecisionMemberDAO extends SqlMapClientDaoSupport implements DecisionMemberDAO {
	/**
	 * Insert one <tt>DecisionMemberDO</tt> object to DB table
	 * <tt>decision_member</tt>, return primary key
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>insert into decision_member(institution_id,user_id,user_account,user_name,sort_order,raw_add_time) values (?, ?, ?, ?, ?, ?)</tt>
	 *
	 * @param decisionMember
	 * @return long
	 * @throws DataAccessException
	 */
	public long insert(DecisionMemberDO decisionMember) throws DataAccessException {
		if (decisionMember == null) {
			throw new IllegalArgumentException("Can't insert a null data object into db.");
		}
		
		getSqlMapClientTemplate().insert("MS-DECISION-MEMBER-INSERT", decisionMember);
		
		return decisionMember.getMemberId();
	}
	
	/**
	 * Update DB table <tt>decision_member</tt>.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>update decision_member set institution_id=?, user_id=?, user_account=?, user_name=?, sort_order=? where (member_id = ?)</tt>
	 *
	 * @param decisionMember
	 * @return int
	 * @throws DataAccessException
	 */
	public int update(DecisionMemberDO decisionMember) throws DataAccessException {
		if (decisionMember == null) {
			throw new IllegalArgumentException("Can't update by a null data object.");
		}
		
		return getSqlMapClientTemplate().update("MS-DECISION-MEMBER-UPDATE", decisionMember);
	}
	
	/**
	 * Query DB table <tt>decision_member</tt> for records.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>select * from decision_member where (member_id = ?)</tt>
	 *
	 * @param memberId
	 * @return DecisionMemberDO
	 * @throws DataAccessException
	 */
	public DecisionMemberDO findById(long memberId) throws DataAccessException {
		Long param = new Long(memberId);
		
		return (DecisionMemberDO) getSqlMapClientTemplate().queryForObject(
			"MS-DECISION-MEMBER-FIND-BY-ID", param);
		
	}
	
	/**
	 * Query DB table <tt>decision_member</tt> for records.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>select * from decision_member where (member_id = ?)</tt>
	 *
	 * @param memberId
	 * @return DecisionMemberDO
	 * @throws DataAccessException
	 */
	public DecisionMemberDO findByInstitutionIdAndUserId(long institutionId, long userId)
																							throws DataAccessException {
		Map param = new HashMap();
		
		param.put("institutionId", new Long(institutionId));
		param.put("userId", new Long(userId));
		return (DecisionMemberDO) getSqlMapClientTemplate().queryForObject(
			"MS-DECISION-MEMBER-FIND-BY-INSTITUTION-USERID", param);
		
	}
	
	/**
	 * Query DB table <tt>decision_member</tt> for records.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>select COUNT(*) from decision_member where (institution_id = ?)</tt>
	 *
	 * @param institutionId
	 * @return long
	 * @throws DataAccessException
	 */
	public long findCountByInstitutionId(long institutionId) throws DataAccessException {
		Long param = new Long(institutionId);
		
		Long retObj = (Long) getSqlMapClientTemplate().queryForObject(
			"MS-DECISION-MEMBER-FIND-COUNT-BY-INSTITUTION-ID", param);
		
		if (retObj == null) {
			return 0;
		} else {
			return retObj.longValue();
		}
		
	}
	
	/**
	 * Query DB table <tt>decision_member</tt> for records.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>select * from decision_member where (user_name = ?)</tt>
	 *
	 * @param userName
	 * @return DecisionMemberDO
	 * @throws DataAccessException
	 */
	public DecisionMemberDO findDecisionMemberByUserName(String userName)
																			throws DataAccessException {
		
		return (DecisionMemberDO) getSqlMapClientTemplate().queryForObject(
			"MS-DECISION-MEMBER-FIND-DECISION-MEMBER-BY-USER-NAME", userName);
		
	}
	
	/**
	 * Query DB table <tt>decision_member</tt> for records.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>select * from decision_member where (institution_id = ?)</tt>
	 *
	 * @param institutionId
	 * @return List<DecisionMemberDO>
	 * @throws DataAccessException
	 */
	public List<DecisionMemberDO> findListByInstitutionId(long institutionId)
																				throws DataAccessException {
		Long param = new Long(institutionId);
		
		return getSqlMapClientTemplate().queryForList(
			"MS-DECISION-MEMBER-FIND-LIST-BY-INSTITUTION-ID", param);
		
	}
	
	/**
	 * Delete records from DB table <tt>decision_member</tt>.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>delete from decision_member where (member_id = ?)</tt>
	 *
	 * @param memberId
	 * @return int
	 * @throws DataAccessException
	 */
	public int deleteById(long memberId) throws DataAccessException {
		Long param = new Long(memberId);
		
		return getSqlMapClientTemplate().delete("MS-DECISION-MEMBER-DELETE-BY-ID", param);
	}
	
	/**
	 * Delete records from DB table <tt>decision_member</tt>.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>delete from decision_member where (institution_id = ?)</tt>
	 *
	 * @param institutionId
	 * @return int
	 * @throws DataAccessException
	 */
	public int deleteByInstitutionId(long institutionId) throws DataAccessException {
		Long param = new Long(institutionId);
		
		return getSqlMapClientTemplate().delete("MS-DECISION-MEMBER-DELETE-BY-INSTITUTION-ID",
			param);
	}
	
	/**
	 * Query DB table <tt>decision_member</tt> for records.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>select COUNT(*) from decision_member where (1 = 1)</tt>
	 *
	 * @param decisionMember
	 * @return long
	 * @throws DataAccessException
	 */
	public long findByConditionCount(DecisionMemberDO decisionMember) throws DataAccessException {
		if (decisionMember == null) {
			throw new IllegalArgumentException("Can't select by a null data object.");
		}
		
		Map param = new HashMap();
		
		param.put("decisionMember", decisionMember);
		Long retObj = (Long) getSqlMapClientTemplate().queryForObject(
			"MS-DECISION-MEMBER-FIND-BY-CONDITION-COUNT", param);
		
		if (retObj == null) {
			return 0;
		} else {
			return retObj.longValue();
		}
		
	}
	
	/**
	 * Query DB table <tt>decision_member</tt> for records.
	 *
	 * <p>
	 * The sql statement for this operation is <br>
	 * <tt>select * from decision_member where (1 = 1)</tt>
	 *
	 * @param decisionMember
	 * @param limitStart
	 * @param pageSize
	 * @return List<DecisionMemberDO>
	 * @throws DataAccessException
	 */
	public List<DecisionMemberDO> findByCondition(DecisionMemberDO decisionMember, long limitStart,
													long pageSize) throws DataAccessException {
		if (decisionMember == null) {
			throw new IllegalArgumentException("Can't select by a null data object.");
		}
		
		Map param = new HashMap();
		
		param.put("decisionMember", decisionMember);
		param.put("limitStart", new Long(limitStart));
		param.put("pageSize", new Long(pageSize));
		
		return getSqlMapClientTemplate()
			.queryForList("MS-DECISION-MEMBER-FIND-BY-CONDITION", param);
		
	}
	
}