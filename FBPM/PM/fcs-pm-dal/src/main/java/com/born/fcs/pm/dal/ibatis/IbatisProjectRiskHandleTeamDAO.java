/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.pm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.pm.dal.daointerface.ProjectRiskHandleTeamDAO;


// auto generated imports
import com.born.fcs.pm.dal.dataobject.ProjectRiskHandleTeamDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.pm.dal.daointerface.ProjectRiskHandleTeamDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/project_risk_handle_team.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisProjectRiskHandleTeamDAO extends SqlMapClientDaoSupport implements ProjectRiskHandleTeamDAO {
	/**
	 *  Insert one <tt>ProjectRiskHandleTeamDO</tt> object to DB table <tt>project_risk_handle_team</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into project_risk_handle_team(team_id,customer_id,customer_name,project_code,project_name,busi_manager_id,busi_manager_name,chief_leader_id,chief_leader_name,vice_leader_id,vice_leader_name,member_ids,member_names,create_man_id,create_man_name,create_time,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param projectRiskHandleTeam
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(ProjectRiskHandleTeamDO projectRiskHandleTeam) throws DataAccessException {
    	if (projectRiskHandleTeam == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-PROJECT-RISK-HANDLE-TEAM-INSERT", projectRiskHandleTeam);

        return projectRiskHandleTeam.getTeamId();
    }

	/**
	 *  Update DB table <tt>project_risk_handle_team</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update project_risk_handle_team set customer_id=?, customer_name=?, project_code=?, project_name=?, busi_manager_id=?, busi_manager_name=?, chief_leader_id=?, chief_leader_name=?, vice_leader_id=?, vice_leader_name=?, member_ids=?, member_names=?, create_man_id=?, create_man_name=?, create_time=? where (team_id = ?)</tt>
	 *
	 *	@param projectRiskHandleTeam
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(ProjectRiskHandleTeamDO projectRiskHandleTeam) throws DataAccessException {
    	if (projectRiskHandleTeam == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-PROJECT-RISK-HANDLE-TEAM-UPDATE", projectRiskHandleTeam);
    }

	/**
	 *  Query DB table <tt>project_risk_handle_team</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from project_risk_handle_team where (team_id = ?)</tt>
	 *
	 *	@param teamId
	 *	@return ProjectRiskHandleTeamDO
	 *	@throws DataAccessException
	 */	 
    public ProjectRiskHandleTeamDO findById(long teamId) throws DataAccessException {
        Long param = new Long(teamId);

        return (ProjectRiskHandleTeamDO) getSqlMapClientTemplate().queryForObject("MS-PROJECT-RISK-HANDLE-TEAM-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>project_risk_handle_team</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from project_risk_handle_team where (project_code = ?)</tt>
	 *
	 *	@param projectCode
	 *	@return ProjectRiskHandleTeamDO
	 *	@throws DataAccessException
	 */	 
    public ProjectRiskHandleTeamDO findByProjectCode(String projectCode) throws DataAccessException {

        return (ProjectRiskHandleTeamDO) getSqlMapClientTemplate().queryForObject("MS-PROJECT-RISK-HANDLE-TEAM-FIND-BY-PROJECT-CODE", projectCode);

    }

	/**
	 *  Delete records from DB table <tt>project_risk_handle_team</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from project_risk_handle_team where (team_id = ?)</tt>
	 *
	 *	@param teamId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long teamId) throws DataAccessException {
        Long param = new Long(teamId);

        return getSqlMapClientTemplate().delete("MS-PROJECT-RISK-HANDLE-TEAM-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>project_risk_handle_team</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select item.* from project_risk_handle_team item where (1 = 1)</tt>
	 *
	 *	@param projectRiskHandleTeam
	 *	@param limitStart
	 *	@param pageSize
	 *	@param startTimeBegin
	 *	@param startTimeEnd
	 *	@param loginUserId
	 *	@param deptIdList
	 *	@param relatedRoleList
	 *	@param sortCol
	 *	@param sortOrder
	 *	@return List<ProjectRiskHandleTeamDO>
	 *	@throws DataAccessException
	 */	 
    public List<ProjectRiskHandleTeamDO> findByCondition(ProjectRiskHandleTeamDO projectRiskHandleTeam, long limitStart, long pageSize, Date startTimeBegin, Date startTimeEnd, long loginUserId, List deptIdList, List relatedRoleList, String sortCol, String sortOrder) throws DataAccessException {
    	if (projectRiskHandleTeam == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("projectRiskHandleTeam", projectRiskHandleTeam);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("startTimeBegin", startTimeBegin);
        param.put("startTimeEnd", startTimeEnd);
        param.put("loginUserId", new Long(loginUserId));
        param.put("deptIdList", deptIdList);
        param.put("relatedRoleList", relatedRoleList);
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);

        return getSqlMapClientTemplate().queryForList("MS-PROJECT-RISK-HANDLE-TEAM-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>project_risk_handle_team</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from project_risk_handle_team where (1 = 1)</tt>
	 *
	 *	@param projectRiskHandleTeam
	 *	@param startTimeBegin
	 *	@param startTimeEnd
	 *	@param loginUserId
	 *	@param deptIdList
	 *	@param relatedRoleList
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(ProjectRiskHandleTeamDO projectRiskHandleTeam, Date startTimeBegin, Date startTimeEnd, long loginUserId, List deptIdList, List relatedRoleList) throws DataAccessException {
    	if (projectRiskHandleTeam == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("projectRiskHandleTeam", projectRiskHandleTeam);
        param.put("startTimeBegin", startTimeBegin);
        param.put("startTimeEnd", startTimeEnd);
        param.put("loginUserId", new Long(loginUserId));
        param.put("deptIdList", deptIdList);
        param.put("relatedRoleList", relatedRoleList);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-PROJECT-RISK-HANDLE-TEAM-FIND-BY-CONDITION-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}