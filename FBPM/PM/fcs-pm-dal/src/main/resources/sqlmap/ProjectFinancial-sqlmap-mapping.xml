<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>rent</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>specialmer-dalgen</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author peigen                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="specialmer">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table project_financial -->
    <resultMap id="RM-PROJECT-FINANCIAL" class="com.born.fcs.pm.dal.dataobject.ProjectFinancialDO">
        <result property="projectId" column="project_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="projectCode" column="project_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="originalCode" column="original_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="productId" column="product_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="productType" column="product_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="productName" column="product_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="termType" column="term_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="interestType" column="interest_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="timeLimit" column="time_limit" javaType="int" jdbcType="INT" nullValue="0"/>
        <result property="timeUnit" column="time_unit" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="issueInstitution" column="issue_institution" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="interestRate" column="interest_rate" javaType="double" jdbcType="DECIMAL" nullValue="0"/>
        <result property="interestSettlementWay" column="interest_settlement_way" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="expectBuyDate" column="expect_buy_date" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="expectExpireDate" column="expect_expire_date" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="price" column="price" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="expectBuyNum" column="expect_buy_num" javaType="double" jdbcType="DECIMAL" nullValue="0"/>
        <result property="riskLevel" column="risk_level" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="riskMeasure" column="risk_measure" javaType="java.lang.String" jdbcType="TEXT"/>
        <result property="createUserId" column="create_user_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="createUserAccount" column="create_user_account" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="createUserName" column="create_user_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="deptId" column="dept_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="deptCode" column="dept_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="deptName" column="dept_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="deptPath" column="dept_path" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="deptPathName" column="dept_path_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="actualBuyDate" column="actual_buy_date" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="actualExpireDate" column="actual_expire_date" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="cycleExpireDate" column="cycle_expire_date" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="actualPrice" column="actual_price" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="actualBuyNum" column="actual_buy_num" javaType="double" jdbcType="DECIMAL" nullValue="0"/>
        <result property="originalHoldNum" column="original_hold_num" javaType="double" jdbcType="DECIMAL" nullValue="0"/>
        <result property="actualHoldNum" column="actual_hold_num" javaType="double" jdbcType="DECIMAL" nullValue="0"/>
        <result property="actualPrincipal" column="actual_principal" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="actualInterest" column="actual_interest" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="actualInterestRate" column="actual_interest_rate" javaType="double" jdbcType="DECIMAL" nullValue="0"/>
        <result property="settlementAmount" column="settlement_amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="canRedeem" column="can_redeem" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="isRoll" column="is_roll" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="isOpen" column="is_open" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="yearDayNum" column="year_day_num" javaType="int" jdbcType="INT" nullValue="0"/>
        <result property="transferedNum" column="transfered_num" javaType="double" jdbcType="DECIMAL" nullValue="0"/>
        <result property="buyBackNum" column="buy_back_num" javaType="double" jdbcType="DECIMAL" nullValue="0"/>
        <result property="redeemedNum" column="redeemed_num" javaType="double" jdbcType="DECIMAL" nullValue="0"/>
        <result property="preFinishTime" column="pre_finish_time" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="status" column="status" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="rawAddTime" column="raw_add_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="rawUpdateTime" column="raw_update_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisProjectFinancialDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisProjectFinancialDAO.insert -->
    <insert id="MS-PROJECT-FINANCIAL-INSERT">
    <![CDATA[
        insert /*MS-YRD-PROJECT-FINANCIAL-INSERT*/ into project_financial(project_id,project_code,original_code,product_id,product_type,product_name,term_type,interest_type,time_limit,time_unit,issue_institution,interest_rate,interest_settlement_way,expect_buy_date,expect_expire_date,price,expect_buy_num,risk_level,risk_measure,create_user_id,create_user_account,create_user_name,dept_id,dept_code,dept_name,dept_path,dept_path_name,actual_buy_date,actual_expire_date,actual_price,actual_buy_num,original_hold_num,actual_hold_num,actual_principal,actual_interest,actual_interest_rate,can_redeem,transfered_num,buy_back_num,redeemed_num,pre_finish_time,status,is_roll,is_open,year_day_num,settlement_amount,cycle_expire_date,raw_add_time) values (#projectId#, #projectCode#, #originalCode#, #productId#, #productType#, #productName#, #termType#, #interestType#, #timeLimit#, #timeUnit#, #issueInstitution#, #interestRate#, #interestSettlementWay#, #expectBuyDate#, #expectExpireDate#, #price.cent#, #expectBuyNum#, #riskLevel#, #riskMeasure#, #createUserId#, #createUserAccount#, #createUserName#, #deptId#, #deptCode#, #deptName#, #deptPath#, #deptPathName#, #actualBuyDate#, #actualExpireDate#, #actualPrice.cent#, #actualBuyNum#, #originalHoldNum#, #actualHoldNum#, #actualPrincipal.cent#, #actualInterest.cent#, #actualInterestRate#, #canRedeem#, #transferedNum#, #buyBackNum#, #redeemedNum#, #preFinishTime#, #status#, #isRoll#, #isOpen#, #yearDayNum#, #settlementAmount.cent#, #cycleExpireDate#, #rawAddTime#)
    ]]>
    </insert>

    <!-- mapped statement for IbatisProjectFinancialDAO.update -->
    <update id="MS-PROJECT-FINANCIAL-UPDATE">
    <![CDATA[
        update /*MS-YRD-PROJECT-FINANCIAL-UPDATE*/ project_financial set project_code=#projectCode#, original_code=#originalCode#, product_id=#productId#, product_type=#productType#, product_name=#productName#, term_type=#termType#, interest_type=#interestType#, time_limit=#timeLimit#, time_unit=#timeUnit#, issue_institution=#issueInstitution#, interest_rate=#interestRate#, interest_settlement_way=#interestSettlementWay#, expect_buy_date=#expectBuyDate#, expect_expire_date=#expectExpireDate#, price=#price.cent#, expect_buy_num=#expectBuyNum#, risk_level=#riskLevel#, risk_measure=#riskMeasure#, create_user_id=#createUserId#, create_user_account=#createUserAccount#, create_user_name=#createUserName#, dept_id=#deptId#, dept_code=#deptCode#, dept_name=#deptName#, dept_path=#deptPath#, dept_path_name=#deptPathName#, actual_buy_date=#actualBuyDate#, actual_expire_date=#actualExpireDate#, actual_price=#actualPrice.cent#, actual_buy_num=#actualBuyNum#, original_hold_num=#originalHoldNum#, actual_hold_num=#actualHoldNum#, actual_principal=#actualPrincipal.cent#, actual_interest=#actualInterest.cent#, actual_interest_rate=#actualInterestRate#, can_redeem=#canRedeem#, transfered_num=#transferedNum#, buy_back_num=#buyBackNum#, redeemed_num=#redeemedNum#, pre_finish_time=#preFinishTime#, status=#status#, is_roll=#isRoll#, is_open=#isOpen#, year_day_num=#yearDayNum#, settlement_amount=#settlementAmount.cent#, cycle_expire_date=#cycleExpireDate# where (project_id = #projectId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisProjectFinancialDAO.findById -->
    <select id="MS-PROJECT-FINANCIAL-FIND-BY-ID" resultMap="RM-PROJECT-FINANCIAL">
    <![CDATA[
        select /*MS-YRD-PROJECT-FINANCIAL-FIND-BY-ID*/ * from project_financial where (project_id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisProjectFinancialDAO.findByCode -->
    <select id="MS-PROJECT-FINANCIAL-FIND-BY-CODE" resultMap="RM-PROJECT-FINANCIAL">
    <![CDATA[
        select /*MS-YRD-PROJECT-FINANCIAL-FIND-BY-CODE*/ * from project_financial where (project_code = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisProjectFinancialDAO.findByCodeForUpdate -->
    <select id="MS-PROJECT-FINANCIAL-FIND-BY-CODE-FOR-UPDATE" resultMap="RM-PROJECT-FINANCIAL">
    <![CDATA[
        select /*MS-YRD-PROJECT-FINANCIAL-FIND-BY-CODE-FOR-UPDATE*/ * from project_financial where (project_code = #value#) for update
    ]]>
    </select>

    <!-- mapped statement for IbatisProjectFinancialDAO.deleteById -->
    <delete id="MS-PROJECT-FINANCIAL-DELETE-BY-ID">
    <![CDATA[
        delete /*MS-YRD-PROJECT-FINANCIAL-DELETE-BY-ID*/ from project_financial where (project_id = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisProjectFinancialDAO.deleteByCode -->
    <delete id="MS-PROJECT-FINANCIAL-DELETE-BY-CODE">
    <![CDATA[
        delete /*MS-YRD-PROJECT-FINANCIAL-DELETE-BY-CODE*/ from project_financial where (project_code = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisProjectFinancialDAO.findByCondition -->
    <select id="MS-PROJECT-FINANCIAL-FIND-BY-CONDITION" resultMap="RM-PROJECT-FINANCIAL">
        SELECT /*MS-YRD-PROJECT-FINANCIAL-FIND-BY-CONDITION*/ * from project_financial p 
			      <isNotEmpty property="deptIdList">
			            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user
			            	   WHERE is_del = 'NO' AND 
			            	   		(dept_id in 
			            	   		<iterate property="deptIdList" open="(" close=")" conjunction=",">
										#deptIdList[]#
									</iterate>
							 		<isGreaterThan property="loginUserId"  compareValue="0" prepend=" OR ">
					            	    (user_id = #loginUserId# 
								      	<isNotEmpty property="relatedRoleList" prepend=" and ">
								      		user_type in 
					            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
												#relatedRoleList[]#
											</iterate>
								      	</isNotEmpty>)  	            	   
								    </isGreaterThan>)
							   GROUP BY project_code) rl
		    			  ON rl.project_code = p.project_code AND rl.rnum > 0
			      </isNotEmpty>
			      <isEmpty property="deptIdList">    
			 		  <isGreaterThan property="loginUserId"  compareValue="0">
				            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
				            	   WHERE user_id = #loginUserId# AND is_del = 'NO'
							      	<isNotEmpty property="relatedRoleList" prepend=" and ">
							      		user_type in 
				            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
											#relatedRoleList[]#
										</iterate>
							      	</isNotEmpty>  	            	   
				            	   GROUP BY project_code) rl
			    			  ON rl.project_code = p.project_code AND rl.rnum > 0
				      </isGreaterThan>
			      </isEmpty>
	      where 1=1  	        
	        <dynamic>
	            <isEqual property="hasOrignalHoldNum"  compareValue="IS" prepend=" and ">
	                p.original_hold_num > 0
	            </isEqual>
	            <isEqual property="hasHoldNum"  compareValue="IS" prepend=" and ">
	                p.actual_hold_num > 0
	            </isEqual>
	            <isGreaterThan property="projectFinancial.projectId"  compareValue="0" prepend=" and ">
	                p.project_id = #projectFinancial.projectId#
	            </isGreaterThan>
	            <isGreaterThan property="projectFinancial.createUserId"  compareValue="0" prepend=" and ">
	                p.create_user_id = #projectFinancial.createUserId#
	            </isGreaterThan>
	            <isNotEqual property="projectFinancial.originalHoldNum"  compareValue="-1.0" prepend=" and ">
	                p.original_hold_num = #projectFinancial.originalHoldNum#
	            </isNotEqual>	
	            <isGreaterThan property="projectFinancial.productId"  compareValue="0" prepend=" and ">
	                p.product_id = #projectFinancial.productId#
	            </isGreaterThan>
	             <isNotEmpty property="projectFinancial.projectCode" prepend=" and ">
	               p.project_code = #projectFinancial.projectCode#
	            </isNotEmpty>
	             <isNotEmpty property="projectFinancial.issueInstitution" prepend=" and ">
	               p.issue_institution like concat('%',#projectFinancial.issueInstitution#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="projectFinancial.productName" prepend=" and ">
	               p.product_name like concat('%',#projectFinancial.productName#,'%')
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.deptCode" prepend=" and ">
	               p.dept_code = #projectFinancial.deptCode#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.productType" prepend=" and ">
	               p.product_type = #projectFinancial.productType#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.termType" prepend=" and ">
	               p.term_type = #projectFinancial.termType#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.canRedeem" prepend=" and ">
	               p.can_redeem = #projectFinancial.canRedeem#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.isRoll" prepend=" and ">
	               p.is_roll = #projectFinancial.isRoll#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.isOpen" prepend=" and ">
	               p.is_open = #projectFinancial.isOpen#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.interestSettlementWay" prepend=" and ">
	               p.interest_settlement_way = #projectFinancial.interestSettlementWay#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.actualExpireDate" prepend=" and ">
	               <![CDATA[ 
	               	   p.actual_expire_date <= #projectFinancial.actualExpireDate#
	               	   and (p.status in ('PURCHASED','EXPIRE','FINISH'))
	                ]]>
	            </isNotEmpty>
	            <isNotEmpty property="buyDateStart" prepend=" and ">
	               <![CDATA[ 
	               	   p.actual_buy_date >= #buyDateStart#
	                ]]>
	            </isNotEmpty>
	            <isNotEmpty property="buyDateEnd" prepend=" and ">
	               <![CDATA[ 
	               	   p.actual_buy_date <= #buyDateEnd#
	                ]]>
	            </isNotEmpty>
	            <isNotEmpty property="expireDateStart" prepend=" and ">
	               <![CDATA[ 
	               	   p.actual_expire_date >= #expireDateStart#
	                ]]>
	            </isNotEmpty>
	            <isNotEmpty property="expireDateEnd" prepend=" and ">
	               <![CDATA[ 
	               	   p.actual_expire_date <= #expireDateEnd#
	                ]]>
	            </isNotEmpty>
	             <isNotEmpty property="projectFinancial.status" prepend=" and ">
	                 p.status = #projectFinancial.status#
	            </isNotEmpty>
	            <isNotEmpty property="status" prepend=" and ">
						 p.status in 
						<iterate property="status" open="(" close=")" conjunction=",">
							#status[]#
						</iterate>
				</isNotEmpty>
	        </dynamic>                            				
	         <isNotEmpty property="sortCol" prepend=" order by ">
	             $sortCol$
	                <isNotEmpty property="sortOrder">
              	 		$sortOrder$
             		</isNotEmpty>
	         </isNotEmpty>
            LIMIT #limitStart#,#pageSize#;
    </select>

    <!-- mapped statement for IbatisProjectFinancialDAO.findByConditionCount -->
    <select id="MS-PROJECT-FINANCIAL-FIND-BY-CONDITION-COUNT" resultClass="long">
        SELECT /*MS-YRD-PROJECT-FINANCIAL-FIND-BY-CONDITION-COUNT*/  count(*)  FROM project_financial p 
			      <isNotEmpty property="deptIdList">
			            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user
			            	   WHERE is_del = 'NO' AND 
			            	   		(dept_id in 
			            	   		<iterate property="deptIdList" open="(" close=")" conjunction=",">
										#deptIdList[]#
									</iterate>
							 		<isGreaterThan property="loginUserId"  compareValue="0" prepend=" OR ">
					            	    (user_id = #loginUserId# 
								      	<isNotEmpty property="relatedRoleList" prepend=" and ">
								      		user_type in 
					            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
												#relatedRoleList[]#
											</iterate>
								      	</isNotEmpty>)  	            	   
								    </isGreaterThan>)
							   GROUP BY project_code) rl
		    			  ON rl.project_code = p.project_code AND rl.rnum > 0
			      </isNotEmpty>
			      <isEmpty property="deptIdList">    
			 		  <isGreaterThan property="loginUserId"  compareValue="0">
				            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
				            	   WHERE user_id = #loginUserId# AND is_del = 'NO'
							      	<isNotEmpty property="relatedRoleList" prepend=" and ">
							      		user_type in 
				            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
											#relatedRoleList[]#
										</iterate>
							      	</isNotEmpty>  	            	   
				            	   GROUP BY project_code) rl
			    			  ON rl.project_code = p.project_code AND rl.rnum > 0
				      </isGreaterThan>
			      </isEmpty>
	       where 1=1  	        
	        <dynamic>
	            <isEqual property="hasOrignalHoldNum"  compareValue="IS" prepend=" and ">
	                p.original_hold_num > 0
	            </isEqual>
	            <isEqual property="hasHoldNum"  compareValue="IS" prepend=" and ">
	                p.actual_hold_num > 0
	            </isEqual>
	            <isNotEqual property="projectFinancial.originalHoldNum"  compareValue="-1.0" prepend=" and ">
	                p.original_hold_num = #projectFinancial.originalHoldNum#
	            </isNotEqual>	           
	            <isGreaterThan property="projectFinancial.projectId"  compareValue="0" prepend=" and ">
	                p.project_id = #projectFinancial.projectId#
	            </isGreaterThan>
	            <isGreaterThan property="projectFinancial.createUserId"  compareValue="0" prepend=" and ">
	                p.create_user_id = #projectFinancial.createUserId#
	            </isGreaterThan>	            
	            <isGreaterThan property="projectFinancial.productId"  compareValue="0" prepend=" and ">
	                p.product_id = #projectFinancial.productId#
	            </isGreaterThan>
	             <isNotEmpty property="projectFinancial.projectCode" prepend=" and ">
	               p.project_code = #projectFinancial.projectCode#
	            </isNotEmpty>
	             <isNotEmpty property="projectFinancial.issueInstitution" prepend=" and ">
	               p.issue_institution like concat('%',#projectFinancial.issueInstitution#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="projectFinancial.productName" prepend=" and ">
	               p.product_name like concat('%',#projectFinancial.productName#,'%')
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.deptCode" prepend=" and ">
	               p.dept_code = #projectFinancial.deptCode#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.productType" prepend=" and ">
	               p.product_type = #projectFinancial.productType#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.termType" prepend=" and ">
	               p.term_type = #projectFinancial.termType#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.canRedeem" prepend=" and ">
	               p.can_redeem = #projectFinancial.canRedeem#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.isRoll" prepend=" and ">
	               p.is_roll = #projectFinancial.isRoll#
	            </isNotEmpty>
	            <isNotEmpty property="projectFinancial.isOpen" prepend=" and ">
	               p.is_open = #projectFinancial.isOpen#
	            </isNotEmpty>	
	            <isNotEmpty property="projectFinancial.interestSettlementWay" prepend=" and ">
	               p.interest_settlement_way = #projectFinancial.interestSettlementWay#
	            </isNotEmpty>	                        	            
	            <isNotEmpty property="projectFinancial.actualExpireDate" prepend=" and ">
	               <![CDATA[ 
	               	   p.actual_expire_date <= #projectFinancial.actualExpireDate#
	               	   and (p.status in ('PURCHASED','EXPIRE','FINISH'))
	                ]]>
	            </isNotEmpty>
	            <isNotEmpty property="buyDateStart" prepend=" and ">
	               <![CDATA[ 
	               	   p.actual_buy_date >= #buyDateStart#
	                ]]>
	            </isNotEmpty>
	            <isNotEmpty property="buyDateEnd" prepend=" and ">
	               <![CDATA[ 
	               	   p.actual_buy_date <= #buyDateEnd#
	                ]]>
	            </isNotEmpty>
	            <isNotEmpty property="expireDateStart" prepend=" and ">
	               <![CDATA[ 
	               	   p.actual_expire_date >= #expireDateStart#
	                ]]>
	            </isNotEmpty>
	            <isNotEmpty property="expireDateEnd" prepend=" and ">
	               <![CDATA[ 
	               	   p.actual_expire_date <= #expireDateEnd#
	                ]]>
	            </isNotEmpty>
	             <isNotEmpty property="projectFinancial.status" prepend=" and ">
	                 p.status = #projectFinancial.status#
	            </isNotEmpty>
	            <isNotEmpty property="status" prepend=" and ">
						 p.status in 
						<iterate property="status" open="(" close=")" conjunction=",">
							#status[]#
						</iterate>
				</isNotEmpty>
	        </dynamic>
    </select>

    <!-- mapped statement for IbatisProjectFinancialDAO.findExipre -->
    <select id="MS-PROJECT-FINANCIAL-FIND-EXIPRE" resultMap="RM-PROJECT-FINANCIAL">
        SELECT /*MS-YRD-PROJECT-FINANCIAL-FIND-EXIPRE*/ * FROM project_financial WHERE status = 'PURCHASED' AND (is_open = 'NO' OR is_open is null) AND cycle_expire_date &lt;= #expireDate# LIMIT #limit#;
    </select>

</sqlMap>
