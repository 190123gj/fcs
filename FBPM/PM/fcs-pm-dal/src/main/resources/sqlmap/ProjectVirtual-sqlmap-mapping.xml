<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>rent</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>specialmer-dalgen</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author peigen                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="specialmer">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table project_virtual -->
    <resultMap id="RM-PROJECT-VIRTUAL" class="com.born.fcs.pm.dal.dataobject.ProjectVirtualDO">
        <result property="virtualId" column="virtual_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="projectCode" column="project_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="projectName" column="project_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="customerId" column="customer_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="customerName" column="customer_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="amount" column="amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="busiType" column="busi_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="busiTypeName" column="busi_type_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="applyUserId" column="apply_user_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="applyUserAccount" column="apply_user_account" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="applyUserName" column="apply_user_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="applyDeptId" column="apply_dept_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="applyDeptName" column="apply_dept_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="scheme" column="scheme" javaType="java.lang.String" jdbcType="MEDIUMTEXT"/>
        <result property="remark" column="remark" javaType="java.lang.String" jdbcType="MEDIUMTEXT"/>
        <result property="attach" column="attach" javaType="java.lang.String" jdbcType="TEXT"/>
        <result property="status" column="status" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="submitTime" column="submit_time" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="formNames" column="form_names" javaType="java.lang.String" jdbcType="TEXT"/>
        <result property="rawAddTime" column="raw_add_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="rawUpdateTime" column="raw_update_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisProjectVirtualDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisProjectVirtualDAO.insert -->
    <insert id="MS-PROJECT-VIRTUAL-INSERT">
        INSERT /*MS-YRD-PROJECT-VIRTUAL-INSERT*/ INTO project_virtual(virtual_id,project_code,project_name,customer_id,customer_name,amount,busi_type,busi_type_name,apply_user_id,apply_user_account,apply_user_name,apply_dept_id,apply_dept_name,scheme,remark,attach,status,submit_time,form_names,raw_add_time) values (#virtualId#, #projectCode#, #projectName#, #customerId#, #customerName#, #amount#, #busiType#, #busiTypeName#, #applyUserId#, #applyUserAccount#, #applyUserName#, #applyDeptId#, #applyDeptName#, #scheme#, #remark#, #attach#, #status#, #submitTime#, #formNames#, #rawAddTime#)
				<selectKey  resultClass ="long"  keyProperty ="virtualId" >   
		          		 SELECT LAST_INSERT_ID() AS ID 
		      	</selectKey>
    </insert>

    <!-- mapped statement for IbatisProjectVirtualDAO.update -->
    <update id="MS-PROJECT-VIRTUAL-UPDATE">
    <![CDATA[
        update /*MS-YRD-PROJECT-VIRTUAL-UPDATE*/ project_virtual set project_code=#projectCode#, project_name=#projectName#, customer_id=#customerId#, customer_name=#customerName#, amount=#amount.cent#, busi_type=#busiType#, busi_type_name=#busiTypeName#, apply_user_id=#applyUserId#, apply_user_account=#applyUserAccount#, apply_user_name=#applyUserName#, apply_dept_id=#applyDeptId#, apply_dept_name=#applyDeptName#, status=#status#, submit_time=#submitTime#, remark=#remark#, attach=#attach# where (virtual_id = #virtualId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisProjectVirtualDAO.updateProjectCodeAndStatus -->
    <update id="MS-PROJECT-VIRTUAL-UPDATE-PROJECT-CODE-AND-STATUS">
    <![CDATA[
        update /*MS-YRD-PROJECT-VIRTUAL-UPDATE-PROJECT-CODE-AND-STATUS*/ project_virtual set project_code=#projectCode#, status=#status# where (virtual_id = #virtualId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisProjectVirtualDAO.findById -->
    <select id="MS-PROJECT-VIRTUAL-FIND-BY-ID" resultMap="RM-PROJECT-VIRTUAL">
    <![CDATA[
        select /*MS-YRD-PROJECT-VIRTUAL-FIND-BY-ID*/ * from project_virtual where (virtual_id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisProjectVirtualDAO.findByProjectCode -->
    <select id="MS-PROJECT-VIRTUAL-FIND-BY-PROJECT-CODE" resultMap="RM-PROJECT-VIRTUAL">
    <![CDATA[
        select /*MS-YRD-PROJECT-VIRTUAL-FIND-BY-PROJECT-CODE*/ * from project_virtual where (project_code = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisProjectVirtualDAO.deleteById -->
    <delete id="MS-PROJECT-VIRTUAL-DELETE-BY-ID">
    <![CDATA[
        delete /*MS-YRD-PROJECT-VIRTUAL-DELETE-BY-ID*/ from project_virtual where (virtual_id = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisProjectVirtualDAO.deleteByProjectCode -->
    <delete id="MS-PROJECT-VIRTUAL-DELETE-BY-PROJECT-CODE">
    <![CDATA[
        delete /*MS-YRD-PROJECT-VIRTUAL-DELETE-BY-PROJECT-CODE*/ from project_virtual where (project_code = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisProjectVirtualDAO.findByCondition -->
    <select id="MS-PROJECT-VIRTUAL-FIND-BY-CONDITION" resultMap="RM-PROJECT-VIRTUAL">
        SELECT /*MS-YRD-PROJECT-VIRTUAL-FIND-BY-CONDITION*/ virtual_id, project_code, project_name, customer_id, customer_name, amount, busi_type, busi_type_name,
	         		apply_user_id, apply_user_account, apply_user_name, apply_dept_id, apply_dept_name, scheme, remark, attach,
	         		submit_time, raw_add_time, raw_update_time, f.form_names,  
	         		CASE WHEN f.in_num > 0 THEN 'IN_USE' ELSE p.status END status
	          FROM project_virtual p 
	     LEFT JOIN (SELECT COUNT(*) in_num, GROUP_CONCAT(DISTINCT form_name) form_names, related_project_code FROM form WHERE status IN ('DRAFT', 'SUBMIT', 'CANCEL', 'AUDITING', 'BACK', 'APPROVAL') GROUP BY related_project_code) f
			    ON p.project_code = related_project_code
			      <isNotEmpty property="deptIdList">
			            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user
			            	   WHERE is_del = 'NO' AND 
			            	   		(dept_id in 
			            	   		<iterate property="deptIdList" open="(" close=")" conjunction=",">
										#deptIdList[]#
									</iterate>
							 		<isGreaterThan property="loginUserId"  compareValue="0" prepend=" OR ">
					            	    (user_id = #loginUserId# 
								      	<isNotEmpty property="relatedRoleList" prepend=" and ">
								      		user_type in 
					            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
												#relatedRoleList[]#
											</iterate>
								      	</isNotEmpty>)  	            	   
								    </isGreaterThan>)
							   GROUP BY project_code) rl
			   			  ON rl.project_code = p.project_code AND rl.rnum > 0
			      </isNotEmpty>
			      <isEmpty property="deptIdList">    
			 		  <isGreaterThan property="loginUserId"  compareValue="0">
				            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
				            	   WHERE user_id = #loginUserId# AND is_del = 'NO'
							      	<isNotEmpty property="relatedRoleList" prepend=" and ">
							      		user_type in 
				            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
											#relatedRoleList[]#
										</iterate>
							      	</isNotEmpty>  	            	   
				            	   GROUP BY project_code) rl
			    			  ON rl.project_code = p.project_code AND rl.rnum > 0
				      </isGreaterThan>
			      </isEmpty>   	
		         <isGreaterThan property="projectVirtual.applyUserId"  compareValue="0">
		           JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
		           	   WHERE user_id = #projectVirtual.applyUserId# AND user_type = 'BUSI_MANAGER' AND is_current = 'IS' AND is_del = 'NO'  GROUP BY project_code) r1
		  			  ON r1.project_code = p.project_code AND r1.rnum > 0
		     	 </isGreaterThan>
	        WHERE (p.status != 'DRAFT' OR p.apply_user_id = #draftUserId#)
	        <dynamic>
	            <isGreaterThan property="projectVirtual.virtualId"  compareValue="0" prepend=" and ">
	                p.virtual_id = #projectVirtual.virtualId#
	            </isGreaterThan>
	            <isGreaterThan property="projectVirtual.customerId"  compareValue="0" prepend=" and ">
	                p.customer_id = #projectVirtual.customerId#
	            </isGreaterThan>
	             <isNotEmpty property="projectVirtual.customerName" prepend=" and ">
	                p.customer_name  LIKE CONCAT('%',#projectVirtual.customerName#,'%') 
	            </isNotEmpty>
	             <isNotEmpty property="projectVirtual.projectCode" prepend=" and ">
	               p.project_code  LIKE CONCAT('%',#projectVirtual.projectCode#,'%') 
	            </isNotEmpty>
	             <isNotEmpty property="projectVirtual.projectName" prepend=" and ">
	               p.project_name  LIKE CONCAT('%',#projectVirtual.projectName#,'%') 
	            </isNotEmpty>
	            <isNotEmpty property="projectVirtual.status" prepend=" and ">
	               <isEqual property="projectVirtual.status" compareValue="IN_USE">
	               		<![CDATA[ f.in_num > 0 ]]>
	               </isEqual>
	               <isNotEqual property="projectVirtual.status" compareValue="IN_USE">
	               		p.status = #projectVirtual.status# 
	               </isNotEqual>
	            </isNotEmpty>
	        </dynamic>
	         <isNotEmpty property="sortCol" prepend=" order by ">
	             $sortCol$
	                <isNotEmpty property="sortOrder">
              	 		$sortOrder$
             		</isNotEmpty>
	         </isNotEmpty>
            LIMIT #limitStart#,#pageSize#;
    </select>

    <!-- mapped statement for IbatisProjectVirtualDAO.findByConditionCount -->
    <select id="MS-PROJECT-VIRTUAL-FIND-BY-CONDITION-COUNT" resultClass="long">
        SELECT /*MS-YRD-PROJECT-VIRTUAL-FIND-BY-CONDITION-COUNT*/ COUNT(*)
	          FROM project_virtual p 
	     LEFT JOIN (SELECT COUNT(*) in_num, GROUP_CONCAT(DISTINCT form_name) form_names, related_project_code FROM form WHERE status IN ('DRAFT', 'SUBMIT', 'CANCEL', 'AUDITING', 'BACK', 'APPROVAL') GROUP BY related_project_code) f
			    ON p.project_code = related_project_code
			      <isNotEmpty property="deptIdList">
			            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user
			            	   WHERE is_del = 'NO' AND 
			            	   		(dept_id in 
			            	   		<iterate property="deptIdList" open="(" close=")" conjunction=",">
										#deptIdList[]#
									</iterate>
							 		<isGreaterThan property="loginUserId"  compareValue="0" prepend=" OR ">
					            	    (user_id = #loginUserId# 
								      	<isNotEmpty property="relatedRoleList" prepend=" and ">
								      		user_type in 
					            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
												#relatedRoleList[]#
											</iterate>
								      	</isNotEmpty>)  	            	   
								    </isGreaterThan>)
							   GROUP BY project_code) rl
			   			  ON rl.project_code = p.project_code AND rl.rnum > 0
			      </isNotEmpty>
			      <isEmpty property="deptIdList">    
			 		  <isGreaterThan property="loginUserId"  compareValue="0">
				            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
				            	   WHERE user_id = #loginUserId# AND is_del = 'NO'
							      	<isNotEmpty property="relatedRoleList" prepend=" and ">
							      		user_type in 
				            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
											#relatedRoleList[]#
										</iterate>
							      	</isNotEmpty>  	            	   
				            	   GROUP BY project_code) rl
			    			  ON rl.project_code = p.project_code AND rl.rnum > 0
				      </isGreaterThan>
			      </isEmpty>   	
		         <isGreaterThan property="projectVirtual.applyUserId"  compareValue="0">
		           JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
		           	   WHERE user_id = #projectVirtual.applyUserId# AND user_type = 'BUSI_MANAGER' AND is_current = 'IS' AND is_del = 'NO'  GROUP BY project_code) r1
		  			  ON r1.project_code = p.project_code AND r1.rnum > 0
		     	 </isGreaterThan>
	        WHERE (p.status != 'DRAFT' OR p.apply_user_id = #draftUserId#)
	        <dynamic>
	            <isGreaterThan property="projectVirtual.virtualId"  compareValue="0" prepend=" and ">
	                p.virtual_id = #projectVirtual.virtualId#
	            </isGreaterThan>
	            <isGreaterThan property="projectVirtual.customerId"  compareValue="0" prepend=" and ">
	                p.customer_id = #projectVirtual.customerId#
	            </isGreaterThan>
	             <isNotEmpty property="projectVirtual.customerName" prepend=" and ">
	                p.customer_name  LIKE CONCAT('%',#projectVirtual.customerName#,'%') 
	            </isNotEmpty>
	             <isNotEmpty property="projectVirtual.projectCode" prepend=" and ">
	               p.project_code  LIKE CONCAT('%',#projectVirtual.projectCode#,'%') 
	            </isNotEmpty>
	             <isNotEmpty property="projectVirtual.projectName" prepend=" and ">
	               p.project_name  LIKE CONCAT('%',#projectVirtual.projectName#,'%') 
	            </isNotEmpty>
	            <isNotEmpty property="projectVirtual.status" prepend=" and ">
	               <isEqual property="projectVirtual.status" compareValue="IN_USE">
	               		<![CDATA[ f.in_num > 0 ]]>
	               </isEqual>
	               <isNotEqual property="projectVirtual.status" compareValue="IN_USE">
	               		p.status = #projectVirtual.status# 
	               </isNotEqual>
	            </isNotEmpty>
	        </dynamic>
    </select>

</sqlMap>
