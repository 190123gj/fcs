<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>rent</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>specialmer-dalgen</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author peigen                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="specialmer">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table charge_repay_plan -->
    <resultMap id="RM-CHARGE-REPAY-PLAN" class="com.born.fcs.pm.dal.dataobject.ChargeRepayPlanDO">
        <result property="planId" column="plan_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="projectCode" column="project_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="projectName" column="project_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="customerId" column="customer_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="customerName" column="customer_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="busiType" column="busi_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="busiTypeName" column="busi_type_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="isChargePlan" column="is_charge_plan" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="isRepayPlan" column="is_repay_plan" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="userId" column="user_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="userAccount" column="user_account" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="userName" column="user_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="deptId" column="dept_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="deptCode" column="dept_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="deptName" column="dept_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="deptPath" column="dept_path" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="deptPathName" column="dept_path_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="remark" column="remark" javaType="java.lang.String" jdbcType="TEXT"/>
        <result property="isAffirm" column="is_affirm" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="beforeDays" column="before_days" javaType="int" jdbcType="INT" nullValue="0"/>
        <result property="cycleDays" column="cycle_days" javaType="int" jdbcType="INT" nullValue="0"/>
        <result property="rawAddTime" column="raw_add_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="rawUpdateTime" column="raw_update_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisChargeRepayPlanDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisChargeRepayPlanDAO.insert -->
    <insert id="MS-CHARGE-REPAY-PLAN-INSERT">
        INSERT /*MS-YRD-CHARGE-REPAY-PLAN-INSERT*/ INTO charge_repay_plan(plan_id,project_code,project_name,customer_id,customer_name,busi_type,busi_type_name,is_charge_plan,is_repay_plan,user_id,user_account,user_name,dept_id,dept_code,dept_name,dept_path,dept_path_name,remark,is_affirm,before_days,cycle_days,raw_add_time) VALUES (#planId#,#projectCode#,#projectName#,#customerId#,#customerName#,#busiType#,#busiTypeName#,#isChargePlan#,#isRepayPlan#,#userId#,#userAccount#,#userName#,#deptId#,#deptCode#,#deptName#,#deptPath#,#deptPathName#,#remark#,#isAffirm#,#beforeDays#,#cycleDays#,SYSDATE())
				<selectKey  resultClass ="long"  keyProperty ="planId" >   
		          		 SELECT LAST_INSERT_ID() AS ID 
		      	</selectKey>
    </insert>

    <!-- mapped statement for IbatisChargeRepayPlanDAO.update -->
    <update id="MS-CHARGE-REPAY-PLAN-UPDATE">
    <![CDATA[
        update /*MS-YRD-CHARGE-REPAY-PLAN-UPDATE*/ charge_repay_plan set project_code=#projectCode#, project_name=#projectName#, customer_id=#customerId#, customer_name=#customerName#, busi_type=#busiType#, busi_type_name=#busiTypeName#, is_charge_plan=#isChargePlan#, is_repay_plan=#isRepayPlan#, user_id=#userId#, user_account=#userAccount#, user_name=#userName#, dept_id=#deptId#, dept_code=#deptCode#, dept_name=#deptName#, dept_path=#deptPath#, dept_path_name=#deptPathName#, remark=#remark#, is_affirm=#isAffirm#, before_days=#beforeDays#, cycle_days=#cycleDays# where (plan_id = #planId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisChargeRepayPlanDAO.findById -->
    <select id="MS-CHARGE-REPAY-PLAN-FIND-BY-ID" resultMap="RM-CHARGE-REPAY-PLAN">
    <![CDATA[
        select /*MS-YRD-CHARGE-REPAY-PLAN-FIND-BY-ID*/ * from charge_repay_plan where (plan_id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisChargeRepayPlanDAO.findByProjectCode -->
    <select id="MS-CHARGE-REPAY-PLAN-FIND-BY-PROJECT-CODE" resultMap="RM-CHARGE-REPAY-PLAN">
    <![CDATA[
        select /*MS-YRD-CHARGE-REPAY-PLAN-FIND-BY-PROJECT-CODE*/ * from charge_repay_plan where (project_code = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisChargeRepayPlanDAO.deleteById -->
    <delete id="MS-CHARGE-REPAY-PLAN-DELETE-BY-ID">
    <![CDATA[
        delete /*MS-YRD-CHARGE-REPAY-PLAN-DELETE-BY-ID*/ from charge_repay_plan where (plan_id = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisChargeRepayPlanDAO.deleteByProjectCode -->
    <delete id="MS-CHARGE-REPAY-PLAN-DELETE-BY-PROJECT-CODE">
    <![CDATA[
        delete /*MS-YRD-CHARGE-REPAY-PLAN-DELETE-BY-PROJECT-CODE*/ from charge_repay_plan where (project_code = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisChargeRepayPlanDAO.findByCondition -->
    <select id="MS-CHARGE-REPAY-PLAN-FIND-BY-CONDITION" resultMap="RM-CHARGE-REPAY-PLAN">
        SELECT /*MS-YRD-CHARGE-REPAY-PLAN-FIND-BY-CONDITION*/ * from charge_repay_plan p
	         <isGreaterThan property="loginUserId"  compareValue="0">
		            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
		            	   WHERE user_id = #loginUserId# AND is_del = 'NO' GROUP BY project_code) r
	    			  ON r.project_code = p.project_code AND r.rnum > 0
		      </isGreaterThan>
		      <isNotEmpty property="deptIdList">
		            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user
		            	   WHERE is_del = 'NO' AND dept_id in 
		            	   		<iterate property="deptIdList" open="(" close=")" conjunction=",">
									#deptIdList[]#
								</iterate>
						   GROUP BY project_code) rl
	    			  ON rl.project_code = p.project_code AND rl.rnum > 0
		      </isNotEmpty>  	         
	         WHERE (is_affirm = 'YES' OR user_id = #draftUserId#)
	        <dynamic>
	            <isGreaterThan property="chargeRepayPlan.planId"  compareValue="0" prepend=" and ">
	                p.plan_id = #chargeRepayPlan.planId#
	            </isGreaterThan>
	            <isGreaterThan property="chargeRepayPlan.userId"  compareValue="0" prepend=" and ">
	                p.user_id = #chargeRepayPlan.userId#
	            </isGreaterThan>		            	        
	            <isGreaterThan property="chargeRepayPlan.customerId"  compareValue="0" prepend=" and ">
	                p.customer_id = #chargeRepayPlan.customerId#
	            </isGreaterThan>	        
	            <isNotEmpty property="chargeRepayPlan.isRepayPlan" prepend=" and ">
	               p.is_repay_plan = #chargeRepayPlan.isRepayPlan#
	            </isNotEmpty>
	            <isNotEmpty property="chargeRepayPlan.isChargePlan" prepend=" and ">
	               p.is_charge_plan = #chargeRepayPlan.isChargePlan#
	            </isNotEmpty>
	            <isNotEmpty property="chargeRepayPlan.projectCode" prepend=" and ">
					p.project_code like concat('%',#chargeRepayPlan.projectCode#,'%')
	            </isNotEmpty>
	            <isNotEmpty property="chargeRepayPlan.projectName" prepend=" and ">
	               p.project_name like concat('%',#chargeRepayPlan.projectName#,'%')
	            </isNotEmpty>
	            <isNotEmpty property="chargeRepayPlan.customerName" prepend=" and ">
	               p.customer_name like concat('%',#chargeRepayPlan.customerName#,'%')
	            </isNotEmpty>
	            <isNotEmpty property="chargeRepayPlan.isAffirm" prepend=" and ">
	               p.is_affirm = #chargeRepayPlan.isAffirm#
	            </isNotEmpty>
	            
	        </dynamic>
	         <isNotEmpty property="sortCol" prepend=" order by ">
	             $sortCol$
	                <isNotEmpty property="sortOrder">
              	 		$sortOrder$
             		</isNotEmpty>
	         </isNotEmpty>
            LIMIT #limitStart#,#pageSize#;
    </select>

    <!-- mapped statement for IbatisChargeRepayPlanDAO.findByConditionCount -->
    <select id="MS-CHARGE-REPAY-PLAN-FIND-BY-CONDITION-COUNT" resultClass="long">
        SELECT /*MS-YRD-CHARGE-REPAY-PLAN-FIND-BY-CONDITION-COUNT*/  count(*)  FROM charge_repay_plan p
	         <isGreaterThan property="loginUserId"  compareValue="0">
		            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user 
		            	   WHERE user_id = #loginUserId# AND is_del = 'NO' GROUP BY project_code) r
	    			  ON r.project_code = p.project_code AND r.rnum > 0
		      </isGreaterThan>
		      <isNotEmpty property="deptIdList">
		            JOIN (SELECT COUNT(*) rnum,project_code FROM project_related_user
		            	   WHERE is_del = 'NO' AND dept_id in 
		            	   		<iterate property="deptIdList" open="(" close=")" conjunction=",">
									#deptIdList[]#
								</iterate>
						   GROUP BY project_code) rl
	    			  ON rl.project_code = p.project_code AND rl.rnum > 0
		      </isNotEmpty>  	         
	         WHERE (is_affirm = 'YES' OR user_id = #draftUserId#)
	        <dynamic>
	            <isGreaterThan property="chargeRepayPlan.planId"  compareValue="0" prepend=" and ">
	                p.plan_id = #chargeRepayPlan.planId#
	            </isGreaterThan>	        
	            <isGreaterThan property="chargeRepayPlan.userId"  compareValue="0" prepend=" and ">
	                p.user_id = #chargeRepayPlan.userId#
	            </isGreaterThan>	        
	            <isGreaterThan property="chargeRepayPlan.customerId"  compareValue="0" prepend=" and ">
	                p.customer_id = #chargeRepayPlan.customerId#
	            </isGreaterThan>	        
	            <isNotEmpty property="chargeRepayPlan.isRepayPlan" prepend=" and ">
	               p.is_repay_plan = #chargeRepayPlan.isRepayPlan#
	            </isNotEmpty>
	            <isNotEmpty property="chargeRepayPlan.isChargePlan" prepend=" and ">
	               p.is_charge_plan = #chargeRepayPlan.isChargePlan#
	            </isNotEmpty>
	            <isNotEmpty property="chargeRepayPlan.projectCode" prepend=" and ">
	               p.project_code like concat('%',#chargeRepayPlan.projectCode#,'%')
	            </isNotEmpty>
	            <isNotEmpty property="chargeRepayPlan.projectName" prepend=" and ">
	               p.project_name like concat('%',#chargeRepayPlan.projectName#,'%')
	            </isNotEmpty>
	            <isNotEmpty property="chargeRepayPlan.customerName" prepend=" and ">
	               p.customer_name like concat('%',#chargeRepayPlan.customerName#,'%')
	            </isNotEmpty>
	             <isNotEmpty property="chargeRepayPlan.isAffirm" prepend=" and ">
	               p.is_affirm = #chargeRepayPlan.isAffirm#
	            </isNotEmpty>
	        </dynamic>
    </select>

</sqlMap>
