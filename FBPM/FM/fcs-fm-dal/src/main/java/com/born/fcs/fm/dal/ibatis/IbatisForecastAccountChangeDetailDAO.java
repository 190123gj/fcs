/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.fm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.fm.dal.daointerface.ForecastAccountChangeDetailDAO;


// auto generated imports
import com.born.fcs.fm.dal.dataobject.ForecastAccountChangeDetailDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.fm.dal.daointerface.ForecastAccountChangeDetailDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/forecast_account_change_detail.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings("unchecked")

public class IbatisForecastAccountChangeDetailDAO extends SqlMapClientDaoSupport implements ForecastAccountChangeDetailDAO {
	/**
	 *  Insert one <tt>ForecastAccountChangeDetailDO</tt> object to DB table <tt>forecast_account_change_detail</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into forecast_account_change_detail(id,forecast_id,user_id,user_account,user_name,forecast_memo,orignal_date,new_date,occur_amount,original_amount,amount,is_manual,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param forecastAccountChangeDetail
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(ForecastAccountChangeDetailDO forecastAccountChangeDetail) throws DataAccessException {
    	if (forecastAccountChangeDetail == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-FORECAST-ACCOUNT-CHANGE-DETAIL-INSERT", forecastAccountChangeDetail);

        return forecastAccountChangeDetail.getId();
    }

	/**
	 *  Update DB table <tt>forecast_account_change_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update forecast_account_change_detail set forecast_id=?, user_id=?, user_account=?, user_name=?, forecast_memo=?, orignal_date=?, new_date=?, occur_amount=?, original_amount=?, amount=?, is_manual=? where (id = ?)</tt>
	 *
	 *	@param forecastAccountChangeDetail
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(ForecastAccountChangeDetailDO forecastAccountChangeDetail) throws DataAccessException {
    	if (forecastAccountChangeDetail == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-FORECAST-ACCOUNT-CHANGE-DETAIL-UPDATE", forecastAccountChangeDetail);
    }

	/**
	 *  Query DB table <tt>forecast_account_change_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from forecast_account_change_detail where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return ForecastAccountChangeDetailDO
	 *	@throws DataAccessException
	 */	 
    public ForecastAccountChangeDetailDO findById(long id) throws DataAccessException {
        Long param = new Long(id);

        return (ForecastAccountChangeDetailDO) getSqlMapClientTemplate().queryForObject("MS-FORECAST-ACCOUNT-CHANGE-DETAIL-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>forecast_account_change_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from forecast_account_change_detail where (forecast_id = ?)</tt>
	 *
	 *	@param forecastId
	 *	@return List<ForecastAccountChangeDetailDO>
	 *	@throws DataAccessException
	 */	 
    public List<ForecastAccountChangeDetailDO> findByForecastId(long forecastId) throws DataAccessException {
        Long param = new Long(forecastId);

        return getSqlMapClientTemplate().queryForList("MS-FORECAST-ACCOUNT-CHANGE-DETAIL-FIND-BY-FORECAST-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>forecast_account_change_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from forecast_account_change_detail where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException {
        Long param = new Long(id);

        return getSqlMapClientTemplate().delete("MS-FORECAST-ACCOUNT-CHANGE-DETAIL-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>forecast_account_change_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from forecast_account_change_detail where (forecast_id = ?)</tt>
	 *
	 *	@param forecastId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByForecastId(long forecastId) throws DataAccessException {
        Long param = new Long(forecastId);

        return getSqlMapClientTemplate().delete("MS-FORECAST-ACCOUNT-CHANGE-DETAIL-DELETE-BY-FORECAST-ID", param);
    }

}