/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.fm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.fm.dal.daointerface.ReceiptPaymentFormDAO;


// auto generated imports
import com.born.fcs.fm.dal.dataobject.ReceiptPaymentFormDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.fm.dal.daointerface.ReceiptPaymentFormDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/receipt_payment_form.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisReceiptPaymentFormDAO extends SqlMapClientDaoSupport implements ReceiptPaymentFormDAO {
	/**
	 *  Insert one <tt>ReceiptPaymentFormDO</tt> object to DB table <tt>receipt_payment_form</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into receipt_payment_form(source_id,source_form,source_form_id,source_form_sys,fund_direction,project_code,project_name,customer_id,customer_name,contract_no,contract_name,transfer_name,product_name,amount,status,user_id,user_account,user_name,dept_id,dept_code,dept_name,attach,remark,is_simple,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param receiptPaymentForm
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(ReceiptPaymentFormDO receiptPaymentForm) throws DataAccessException {
    	if (receiptPaymentForm == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-RECEIPT-PAYMENT-FORM-INSERT", receiptPaymentForm);

        return receiptPaymentForm.getSourceId();
    }

	/**
	 *  Update DB table <tt>receipt_payment_form</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update receipt_payment_form set source_form=?, source_form_id=?, source_form_sys=?, fund_direction=?, project_code=?, project_name=?, customer_id=?, customer_name=?, contract_no=?, contract_name=?, transfer_name=?, product_name=?, amount=?, status=?, user_id=?, user_account=?, user_name=?, dept_id=?, dept_code=?, dept_name=?, attach=?, remark=?, is_simple=? where (source_id = ?)</tt>
	 *
	 *	@param receiptPaymentForm
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(ReceiptPaymentFormDO receiptPaymentForm) throws DataAccessException {
    	if (receiptPaymentForm == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-RECEIPT-PAYMENT-FORM-UPDATE", receiptPaymentForm);
    }

	/**
	 *  Query DB table <tt>receipt_payment_form</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from receipt_payment_form t where (source_id = ?)</tt>
	 *
	 *	@param sourceId
	 *	@return ReceiptPaymentFormDO
	 *	@throws DataAccessException
	 */	 
    public ReceiptPaymentFormDO findById(long sourceId) throws DataAccessException {
        Long param = new Long(sourceId);

        return (ReceiptPaymentFormDO) getSqlMapClientTemplate().queryForObject("MS-RECEIPT-PAYMENT-FORM-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>receipt_payment_form</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from receipt_payment_form t where ((source_form = ?) AND (source_form_id = ?))</tt>
	 *
	 *	@param sourceForm
	 *	@param sourceFormId
	 *	@return ReceiptPaymentFormDO
	 *	@throws DataAccessException
	 */	 
    public ReceiptPaymentFormDO findBySourceFormId(String sourceForm, String sourceFormId) throws DataAccessException {
        Map param = new HashMap();

        param.put("sourceForm", sourceForm);
        param.put("sourceFormId", sourceFormId);

        return (ReceiptPaymentFormDO) getSqlMapClientTemplate().queryForObject("MS-RECEIPT-PAYMENT-FORM-FIND-BY-SOURCE-FORM-ID", param);

    }

	/**
	 *  Query DB table <tt>receipt_payment_form</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from receipt_payment_form t where (project_code = ?)</tt>
	 *
	 *	@param projectCode
	 *	@return List<ReceiptPaymentFormDO>
	 *	@throws DataAccessException
	 */	 
    public List<ReceiptPaymentFormDO> findByProjectCode(String projectCode) throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-RECEIPT-PAYMENT-FORM-FIND-BY-PROJECT-CODE", projectCode);

    }

	/**
	 *  Delete records from DB table <tt>receipt_payment_form</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from receipt_payment_form where (source_id = ?)</tt>
	 *
	 *	@param sourceId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long sourceId) throws DataAccessException {
        Long param = new Long(sourceId);

        return getSqlMapClientTemplate().delete("MS-RECEIPT-PAYMENT-FORM-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>receipt_payment_form</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from receipt_payment_form where ((source_form = ?) AND (source_form_id = ?))</tt>
	 *
	 *	@param sourceForm
	 *	@param sourceFormId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteBySourceFormId(String sourceForm, String sourceFormId) throws DataAccessException {
        Map param = new HashMap();

        param.put("sourceForm", sourceForm);
        param.put("sourceFormId", sourceFormId);

        return getSqlMapClientTemplate().delete("MS-RECEIPT-PAYMENT-FORM-DELETE-BY-SOURCE-FORM-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>receipt_payment_form</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from receipt_payment_form where (project_code = ?)</tt>
	 *
	 *	@param projectCode
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByProjectCode(String projectCode) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-RECEIPT-PAYMENT-FORM-DELETE-BY-PROJECT-CODE", projectCode);
    }

	/**
	 *  Query DB table <tt>receipt_payment_form</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from receipt_payment_form where (1 = 1)</tt>
	 *
	 *	@param receiptPaymentForm
	 *	@param statusList
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<ReceiptPaymentFormDO>
	 *	@throws DataAccessException
	 */	 
    public List<ReceiptPaymentFormDO> findByCondition(ReceiptPaymentFormDO receiptPaymentForm, List statusList, String sortCol, String sortOrder, long limitStart, long pageSize) throws DataAccessException {
    	if (receiptPaymentForm == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("receiptPaymentForm", receiptPaymentForm);
        param.put("statusList", statusList);
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-RECEIPT-PAYMENT-FORM-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>receipt_payment_form</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from receipt_payment_form where (1 = 1)</tt>
	 *
	 *	@param receiptPaymentForm
	 *	@param statusList
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(ReceiptPaymentFormDO receiptPaymentForm, List statusList) throws DataAccessException {
    	if (receiptPaymentForm == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("receiptPaymentForm", receiptPaymentForm);
        param.put("statusList", statusList);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-RECEIPT-PAYMENT-FORM-FIND-BY-CONDITION-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}