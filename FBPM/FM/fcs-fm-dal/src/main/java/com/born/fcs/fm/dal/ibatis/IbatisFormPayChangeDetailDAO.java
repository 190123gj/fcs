/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.fm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.fm.dal.daointerface.FormPayChangeDetailDAO;


// auto generated imports
import com.born.fcs.fm.dal.dataobject.FormPayChangeDetailDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.fm.dal.daointerface.FormPayChangeDetailDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/form_pay_change_detail.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisFormPayChangeDetailDAO extends SqlMapClientDaoSupport implements FormPayChangeDetailDAO {
	/**
	 *  Insert one <tt>FormPayChangeDetailDO</tt> object to DB table <tt>form_pay_change_detail</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into form_pay_change_detail(id,source_id,source_type,user_id,user_name,sort,document_name,document_describe,document_value_old,document_value_new,document_type,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param formPayChangeDetail
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(FormPayChangeDetailDO formPayChangeDetail) throws DataAccessException {
    	if (formPayChangeDetail == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-FORM-PAY-CHANGE-DETAIL-INSERT", formPayChangeDetail);

        return formPayChangeDetail.getId();
    }

	/**
	 *  Update DB table <tt>form_pay_change_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update form_pay_change_detail set source_id=?, source_type=?, user_id=?, user_name=?, sort=?, document_name=?, document_describe=?, document_value_old=?, document_value_new=?, document_type=? where (id = ?)</tt>
	 *
	 *	@param formPayChangeDetail
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(FormPayChangeDetailDO formPayChangeDetail) throws DataAccessException {
    	if (formPayChangeDetail == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-FORM-PAY-CHANGE-DETAIL-UPDATE", formPayChangeDetail);
    }

	/**
	 *  Query DB table <tt>form_pay_change_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from form_pay_change_detail where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return FormPayChangeDetailDO
	 *	@throws DataAccessException
	 */	 
    public FormPayChangeDetailDO findById(long id) throws DataAccessException {
        Long param = new Long(id);

        return (FormPayChangeDetailDO) getSqlMapClientTemplate().queryForObject("MS-FORM-PAY-CHANGE-DETAIL-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>form_pay_change_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from form_pay_change_detail where ((source_type = ?) AND (source_id = ?))</tt>
	 *
	 *	@param sourceType
	 *	@param sourceId
	 *	@return List<FormPayChangeDetailDO>
	 *	@throws DataAccessException
	 */	 
    public List<FormPayChangeDetailDO> findByTypeAndSourceId(String sourceType, long sourceId) throws DataAccessException {
        Map param = new HashMap();

        param.put("sourceType", sourceType);
        param.put("sourceId", new Long(sourceId));

        return getSqlMapClientTemplate().queryForList("MS-FORM-PAY-CHANGE-DETAIL-FIND-BY-TYPE-AND-SOURCE-ID", param);

    }

	/**
	 *  Query DB table <tt>form_pay_change_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from form_pay_change_detail where (1 = 1)</tt>
	 *
	 *	@param formPayChangeDetail
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<FormPayChangeDetailDO>
	 *	@throws DataAccessException
	 */	 
    public List<FormPayChangeDetailDO> findByCondition(FormPayChangeDetailDO formPayChangeDetail, long limitStart, long pageSize) throws DataAccessException {
    	if (formPayChangeDetail == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("formPayChangeDetail", formPayChangeDetail);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-FORM-PAY-CHANGE-DETAIL-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>form_pay_change_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from form_pay_change_detail where (1 = 1)</tt>
	 *
	 *	@param formPayChangeDetail
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(FormPayChangeDetailDO formPayChangeDetail) throws DataAccessException {
    	if (formPayChangeDetail == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-FORM-PAY-CHANGE-DETAIL-FIND-BY-CONDITION-COUNT", formPayChangeDetail);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}