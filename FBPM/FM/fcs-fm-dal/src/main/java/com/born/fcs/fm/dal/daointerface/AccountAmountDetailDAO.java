/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.fm.dal.daointerface;

// auto generated imports
import com.born.fcs.fm.dal.dataobject.AccountAmountDetailDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>account_amount_detail</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/account_amount_detail.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface AccountAmountDetailDAO {
	/**
	 *  Insert one <tt>AccountAmountDetailDO</tt> object to DB table <tt>account_amount_detail</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into account_amount_detail(id,time,start_amount,forecast_in_amount,forecast_out_amount,forecast_last_amount,raw_add_time) values (?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param accountAmountDetail
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(AccountAmountDetailDO accountAmountDetail) throws DataAccessException;

	/**
	 *  Update DB table <tt>account_amount_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update account_amount_detail set time=?, start_amount=?, forecast_in_amount=?, forecast_out_amount=?, forecast_last_amount=? where (id = ?)</tt>
	 *
	 *	@param accountAmountDetail
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(AccountAmountDetailDO accountAmountDetail) throws DataAccessException;

	/**
	 *  Query DB table <tt>account_amount_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from account_amount_detail where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return AccountAmountDetailDO
	 *	@throws DataAccessException
	 */	 
    public AccountAmountDetailDO findById(long id) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>account_amount_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from account_amount_detail where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>account_amount_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from account_amount_detail where (1 = 1)</tt>
	 *
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteAll() throws DataAccessException;

	/**
	 *  Query DB table <tt>account_amount_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from account_amount_detail where (1 = 1)</tt>
	 *
	 *	@param accountAmountDetail
	 *	@param limitStart
	 *	@param pageSize
	 *	@param forecastTimeStart
	 *	@param forecastTimeEnd
	 *	@param sortCol
	 *	@param sortOrder
	 *	@return List<AccountAmountDetailDO>
	 *	@throws DataAccessException
	 */	 
    public List<AccountAmountDetailDO> findByCondition(AccountAmountDetailDO accountAmountDetail, long limitStart, long pageSize, Date forecastTimeStart, Date forecastTimeEnd, String sortCol, String sortOrder) throws DataAccessException;

	/**
	 *  Query DB table <tt>account_amount_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from account_amount_detail where (1 = 1)</tt>
	 *
	 *	@param accountAmountDetail
	 *	@param forecastTimeStart
	 *	@param forecastTimeEnd
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(AccountAmountDetailDO accountAmountDetail, Date forecastTimeStart, Date forecastTimeEnd) throws DataAccessException;

}