/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.fm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.fm.dal.daointerface.FeeDefaultAccountTitleConfDAO;


// auto generated imports
import com.born.fcs.fm.dal.dataobject.FeeDefaultAccountTitleConfDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.fm.dal.daointerface.FeeDefaultAccountTitleConfDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/fee_default_account_title_conf.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisFeeDefaultAccountTitleConfDAO extends SqlMapClientDaoSupport implements FeeDefaultAccountTitleConfDAO {
	/**
	 *  Insert one <tt>FeeDefaultAccountTitleConfDO</tt> object to DB table <tt>fee_default_account_title_conf</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into fee_default_account_title_conf(conf_id,receipt_or_payment,fee_type,at_code,at_name,raw_add_time) values (?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param feeDefaultAccountTitleConf
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(FeeDefaultAccountTitleConfDO feeDefaultAccountTitleConf) throws DataAccessException {
    	if (feeDefaultAccountTitleConf == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-FEE-DEFAULT-ACCOUNT-TITLE-CONF-INSERT", feeDefaultAccountTitleConf);

        return feeDefaultAccountTitleConf.getConfId();
    }

	/**
	 *  Update DB table <tt>fee_default_account_title_conf</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update fee_default_account_title_conf set receipt_or_payment=?, fee_type=?, at_code=?, at_name=? where (conf_id = ?)</tt>
	 *
	 *	@param feeDefaultAccountTitleConf
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(FeeDefaultAccountTitleConfDO feeDefaultAccountTitleConf) throws DataAccessException {
    	if (feeDefaultAccountTitleConf == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-FEE-DEFAULT-ACCOUNT-TITLE-CONF-UPDATE", feeDefaultAccountTitleConf);
    }

	/**
	 *  Query DB table <tt>fee_default_account_title_conf</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from fee_default_account_title_conf where (conf_id = ?)</tt>
	 *
	 *	@param confId
	 *	@return FeeDefaultAccountTitleConfDO
	 *	@throws DataAccessException
	 */	 
    public FeeDefaultAccountTitleConfDO findById(long confId) throws DataAccessException {
        Long param = new Long(confId);

        return (FeeDefaultAccountTitleConfDO) getSqlMapClientTemplate().queryForObject("MS-FEE-DEFAULT-ACCOUNT-TITLE-CONF-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>fee_default_account_title_conf</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from fee_default_account_title_conf where (receipt_or_payment = ?)</tt>
	 *
	 *	@param receiptOrPayment
	 *	@return List<FeeDefaultAccountTitleConfDO>
	 *	@throws DataAccessException
	 */	 
    public List<FeeDefaultAccountTitleConfDO> findByReceiptOrPayment(String receiptOrPayment) throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-FEE-DEFAULT-ACCOUNT-TITLE-CONF-FIND-BY-RECEIPT-OR-PAYMENT", receiptOrPayment);

    }

	/**
	 *  Query DB table <tt>fee_default_account_title_conf</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from fee_default_account_title_conf where ((receipt_or_payment = ?) AND (fee_type = ?))</tt>
	 *
	 *	@param receiptOrPayment
	 *	@param feeType
	 *	@return FeeDefaultAccountTitleConfDO
	 *	@throws DataAccessException
	 */	 
    public FeeDefaultAccountTitleConfDO findByReceiptOrPaymentAndType(String receiptOrPayment, String feeType) throws DataAccessException {
        Map param = new HashMap();

        param.put("receiptOrPayment", receiptOrPayment);
        param.put("feeType", feeType);

        return (FeeDefaultAccountTitleConfDO) getSqlMapClientTemplate().queryForObject("MS-FEE-DEFAULT-ACCOUNT-TITLE-CONF-FIND-BY-RECEIPT-OR-PAYMENT-AND-TYPE", param);

    }

	/**
	 *  Delete records from DB table <tt>fee_default_account_title_conf</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from fee_default_account_title_conf where (conf_id = ?)</tt>
	 *
	 *	@param confId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long confId) throws DataAccessException {
        Long param = new Long(confId);

        return getSqlMapClientTemplate().delete("MS-FEE-DEFAULT-ACCOUNT-TITLE-CONF-DELETE-BY-ID", param);
    }

}