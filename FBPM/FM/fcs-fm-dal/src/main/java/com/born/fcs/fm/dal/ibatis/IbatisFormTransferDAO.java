/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.fm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.fm.dal.daointerface.FormTransferDAO;


// auto generated imports
import com.born.fcs.fm.dal.dataobject.FormTransferDO;
import org.springframework.dao.DataAccessException;
import com.born.fcs.fm.dal.queryCondition.FormTransferQueryCondition;
import java.util.List;

/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.fm.dal.daointerface.FormTransferDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/form_transfer.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings("unchecked")

public class IbatisFormTransferDAO extends SqlMapClientDaoSupport implements FormTransferDAO {
	/**
	 *  Insert one <tt>FormTransferDO</tt> object to DB table <tt>form_transfer</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into form_transfer(transfer_id,form_id,bill_no,voucher_no,voucher_status,voucher_sync_send_time,voucher_sync_finish_time,voucher_sync_message,transfer_dept_id,dept_name,dept_head,application_time,reasons,agent_id,agent,payee_id,payee,bank_id,bank_name,bank_account,amount,attachments_num,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param formTransfer
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(FormTransferDO formTransfer) throws DataAccessException {
    	if (formTransfer == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-FORM-TRANSFER-INSERT", formTransfer);

        return formTransfer.getTransferId();
    }

	/**
	 *  Update DB table <tt>form_transfer</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update form_transfer set form_id=?, bill_no=?, voucher_no=?, voucher_status=?, voucher_sync_send_time=?, voucher_sync_finish_time=?, voucher_sync_message=?, transfer_dept_id=?, dept_name=?, dept_head=?, application_time=?, reasons=?, agent_id=?, agent=?, payee_id=?, payee=?, bank_id=?, bank_name=?, bank_account=?, amount=?, attachments_num=? where (transfer_id = ?)</tt>
	 *
	 *	@param formTransfer
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(FormTransferDO formTransfer) throws DataAccessException {
    	if (formTransfer == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-FORM-TRANSFER-UPDATE", formTransfer);
    }

	/**
	 *  Query DB table <tt>form_transfer</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select transfer_id, form_id, bill_no, voucher_no, voucher_status, voucher_sync_send_time, voucher_sync_finish_time, voucher_sync_message, transfer_dept_id, dept_name, dept_head, application_time, reasons, agent_id, agent, payee_id, payee, bank_id, bank_name, bank_account, amount, attachments_num, raw_add_time, raw_update_time from form_transfer where (transfer_id = ?)</tt>
	 *
	 *	@param transferId
	 *	@return FormTransferDO
	 *	@throws DataAccessException
	 */	 
    public FormTransferDO findById(long transferId) throws DataAccessException {
        Long param = new Long(transferId);

        return (FormTransferDO) getSqlMapClientTemplate().queryForObject("MS-FORM-TRANSFER-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>form_transfer</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select transfer_id, form_id, bill_no, voucher_no, voucher_status, voucher_sync_send_time, voucher_sync_finish_time, voucher_sync_message, transfer_dept_id, dept_name, dept_head, application_time, reasons, agent_id, agent, payee_id, payee, bank_id, bank_name, bank_account, amount, attachments_num, raw_add_time, raw_update_time from form_transfer where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return FormTransferDO
	 *	@throws DataAccessException
	 */	 
    public FormTransferDO findByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return (FormTransferDO) getSqlMapClientTemplate().queryForObject("MS-FORM-TRANSFER-FIND-BY-FORM-ID", param);

    }

	/**
	 *  Query DB table <tt>form_transfer</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select transfer_id, form_id, bill_no, voucher_no, voucher_status, voucher_sync_send_time, voucher_sync_finish_time, voucher_sync_message, transfer_dept_id, dept_name, dept_head, application_time, reasons, agent_id, agent, payee_id, payee, bank_id, bank_name, bank_account, amount, attachments_num, raw_add_time, raw_update_time from form_transfer where (bill_no = ?)</tt>
	 *
	 *	@param billNo
	 *	@return FormTransferDO
	 *	@throws DataAccessException
	 */	 
    public FormTransferDO findByBillNo(String billNo) throws DataAccessException {

        return (FormTransferDO) getSqlMapClientTemplate().queryForObject("MS-FORM-TRANSFER-FIND-BY-BILL-NO", billNo);

    }

	/**
	 *  Delete records from DB table <tt>form_transfer</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from form_transfer where (transfer_id = ?)</tt>
	 *
	 *	@param transferId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long transferId) throws DataAccessException {
        Long param = new Long(transferId);

        return getSqlMapClientTemplate().delete("MS-FORM-TRANSFER-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>form_transfer</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select e.* from form_transfer e, form f where (e.form_id = f.form_id)</tt>
	 *
	 *	@param condition
	 *	@return List<FormTransferDO>
	 *	@throws DataAccessException
	 */	 
    public List<FormTransferDO> findByCondition(FormTransferQueryCondition condition) throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-FORM-TRANSFER-FIND-BY-CONDITION", condition);

    }

	/**
	 *  Query DB table <tt>form_transfer</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from form_transfer e, form f where (e.form_id = f.form_id)</tt>
	 *
	 *	@param condition
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(FormTransferQueryCondition condition) throws DataAccessException {

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-FORM-TRANSFER-FIND-BY-CONDITION-COUNT", condition);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}