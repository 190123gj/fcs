/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.fm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.fm.dal.daointerface.BankMessageDAO;


// auto generated imports
import com.born.fcs.fm.dal.dataobject.BankMessageDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.fm.dal.daointerface.BankMessageDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/bank_message.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisBankMessageDAO extends SqlMapClientDaoSupport implements BankMessageDAO {
	/**
	 *  Insert one <tt>BankMessageDO</tt> object to DB table <tt>bank_message</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into bank_message(bank_id,bank_code,bank_name,account_type,account_no,default_company_account,default_personal_account,deposit_account,account_name,at_code,at_name,amount,cash_deposit_code,status,dept_id,dept_name,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param bankMessage
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(BankMessageDO bankMessage) throws DataAccessException {
    	if (bankMessage == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-BANK-MESSAGE-INSERT", bankMessage);

        return bankMessage.getBankId();
    }

	/**
	 *  Update DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bank_message set bank_code=?, bank_name=?, account_type=?, account_no=?, default_company_account=?, default_personal_account=?, deposit_account=?, account_name=?, at_code=?, at_name=?, amount=?, cash_deposit_code=?, status=?, dept_id=?, dept_name=? where (bank_id = ?)</tt>
	 *
	 *	@param bankMessage
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(BankMessageDO bankMessage) throws DataAccessException {
    	if (bankMessage == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-BANK-MESSAGE-UPDATE", bankMessage);
    }

	/**
	 *  Update DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bank_message set bank_code=?, bank_name=?, account_type=?, default_company_account=?, default_personal_account=?, deposit_account=?, account_name=?, at_code=?, at_name=?, amount=?, cash_deposit_code=?, status=?, dept_id=?, dept_name=? where (account_no = ?)</tt>
	 *
	 *	@param bankMessage
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateByAccount(BankMessageDO bankMessage) throws DataAccessException {
    	if (bankMessage == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-BANK-MESSAGE-UPDATE-BY-ACCOUNT", bankMessage);
    }

	/**
	 *  Update DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bank_message set status=? where (bank_id = ?)</tt>
	 *
	 *	@param status
	 *	@param bankId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateStatus(String status, long bankId) throws DataAccessException {
        Map param = new HashMap();

        param.put("status", status);
        param.put("bankId", new Long(bankId));

        return getSqlMapClientTemplate().update("MS-BANK-MESSAGE-UPDATE-STATUS", param);
    }

	/**
	 *  Update DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bank_message set status=? where (account_no = ?)</tt>
	 *
	 *	@param status
	 *	@param accountNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateStatusByAccount(String status, String accountNo) throws DataAccessException {
        Map param = new HashMap();

        param.put("status", status);
        param.put("accountNo", accountNo);

        return getSqlMapClientTemplate().update("MS-BANK-MESSAGE-UPDATE-STATUS-BY-ACCOUNT", param);
    }

	/**
	 *  Update DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bank_message set default_company_account=? where (dept_id = ?)</tt>
	 *
	 *	@param defaultCompanyAccount
	 *	@param deptId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateDefaultCompanyAccountByDeptId(String defaultCompanyAccount, long deptId) throws DataAccessException {
        Map param = new HashMap();

        param.put("defaultCompanyAccount", defaultCompanyAccount);
        param.put("deptId", new Long(deptId));

        return getSqlMapClientTemplate().update("MS-BANK-MESSAGE-UPDATE-DEFAULT-COMPANY-ACCOUNT-BY-DEPT-ID", param);
    }

	/**
	 *  Update DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bank_message set default_personal_account=? where (dept_id = ?)</tt>
	 *
	 *	@param defaultPersonalAccount
	 *	@param deptId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateDefaultPersonalAccountByDeptId(String defaultPersonalAccount, long deptId) throws DataAccessException {
        Map param = new HashMap();

        param.put("defaultPersonalAccount", defaultPersonalAccount);
        param.put("deptId", new Long(deptId));

        return getSqlMapClientTemplate().update("MS-BANK-MESSAGE-UPDATE-DEFAULT-PERSONAL-ACCOUNT-BY-DEPT-ID", param);
    }

	/**
	 *  Update DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bank_message set default_company_account=? where (1 = 1)</tt>
	 *
	 *	@param defaultCompanyAccount
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateDefaultCompanyAccount(String defaultCompanyAccount) throws DataAccessException {

        return getSqlMapClientTemplate().update("MS-BANK-MESSAGE-UPDATE-DEFAULT-COMPANY-ACCOUNT", defaultCompanyAccount);
    }

	/**
	 *  Update DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bank_message set default_personal_account=? where (1 = 1)</tt>
	 *
	 *	@param defaultPersonalAccount
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateDefaultPersonalAccount(String defaultPersonalAccount) throws DataAccessException {

        return getSqlMapClientTemplate().update("MS-BANK-MESSAGE-UPDATE-DEFAULT-PERSONAL-ACCOUNT", defaultPersonalAccount);
    }

	/**
	 *  Query DB table <tt>bank_message</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from bank_message where (bank_id = ?)</tt>
	 *
	 *	@param bankId
	 *	@return BankMessageDO
	 *	@throws DataAccessException
	 */	 
    public BankMessageDO findById(long bankId) throws DataAccessException {
        Long param = new Long(bankId);

        return (BankMessageDO) getSqlMapClientTemplate().queryForObject("MS-BANK-MESSAGE-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>bank_message</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from bank_message where (account_no = ?)</tt>
	 *
	 *	@param accountNo
	 *	@return BankMessageDO
	 *	@throws DataAccessException
	 */	 
    public BankMessageDO findByAccount(String accountNo) throws DataAccessException {

        return (BankMessageDO) getSqlMapClientTemplate().queryForObject("MS-BANK-MESSAGE-FIND-BY-ACCOUNT", accountNo);

    }

	/**
	 *  Query DB table <tt>bank_message</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from bank_message where (account_no = ?) for update</tt>
	 *
	 *	@param accountNo
	 *	@return BankMessageDO
	 *	@throws DataAccessException
	 */	 
    public BankMessageDO findByAccountForUpdate(String accountNo) throws DataAccessException {

        return (BankMessageDO) getSqlMapClientTemplate().queryForObject("MS-BANK-MESSAGE-FIND-BY-ACCOUNT-FOR-UPDATE", accountNo);

    }

	/**
	 *  Delete records from DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from bank_message where (bank_id = ?)</tt>
	 *
	 *	@param bankId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long bankId) throws DataAccessException {
        Long param = new Long(bankId);

        return getSqlMapClientTemplate().delete("MS-BANK-MESSAGE-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from bank_message where (account_no = ?)</tt>
	 *
	 *	@param accountNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByAccount(String accountNo) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-BANK-MESSAGE-DELETE-BY-ACCOUNT", accountNo);
    }

	/**
	 *  Query DB table <tt>bank_message</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from bank_message where (1 = 1)</tt>
	 *
	 *	@param bankMessage
	 *	@param deptIdList
	 *	@param limitStart
	 *	@param pageSize
	 *	@param sortCol
	 *	@param sortOrder
	 *	@return List<BankMessageDO>
	 *	@throws DataAccessException
	 */	 
    public List<BankMessageDO> findByCondition(BankMessageDO bankMessage, List deptIdList, long limitStart, long pageSize, String sortCol, String sortOrder) throws DataAccessException {
    	if (bankMessage == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("bankMessage", bankMessage);
        param.put("deptIdList", deptIdList);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);

        return getSqlMapClientTemplate().queryForList("MS-BANK-MESSAGE-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>bank_message</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from bank_message where (1 = 1)</tt>
	 *
	 *	@param bankMessage
	 *	@param deptIdList
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(BankMessageDO bankMessage, List deptIdList) throws DataAccessException {
    	if (bankMessage == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("bankMessage", bankMessage);
        param.put("deptIdList", deptIdList);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-BANK-MESSAGE-FIND-BY-CONDITION-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}