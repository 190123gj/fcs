/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.fm.dal.daointerface;

// auto generated imports
import com.born.fcs.fm.dal.dataobject.BankTradeDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>bank_trade</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/bank_trade.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface BankTradeDAO {
	/**
	 *  Insert one <tt>BankTradeDO</tt> object to DB table <tt>bank_trade</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into bank_trade(trade_id,trade_no,account_no,out_biz_no,out_biz_detail_no,fund_direction,amount,remark,trade_time,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param bankTrade
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(BankTradeDO bankTrade) throws DataAccessException;

	/**
	 *  Update DB table <tt>bank_trade</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bank_trade set trade_no=?, account_no=?, out_biz_no=?, out_biz_detail_no=?, fund_direction=?, amount=?, remark=?, trade_time=? where (trade_id = ?)</tt>
	 *
	 *	@param bankTrade
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(BankTradeDO bankTrade) throws DataAccessException;

	/**
	 *  Query DB table <tt>bank_trade</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from bank_trade where (trade_id = ?)</tt>
	 *
	 *	@param tradeId
	 *	@return BankTradeDO
	 *	@throws DataAccessException
	 */	 
    public BankTradeDO findById(long tradeId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>bank_trade</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from bank_trade where (trade_id = ?)</tt>
	 *
	 *	@param tradeId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long tradeId) throws DataAccessException;

	/**
	 *  Query DB table <tt>bank_trade</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from bank_trade where (1 = 1)</tt>
	 *
	 *	@param bankTrade
	 *	@param limitStart
	 *	@param pageSize
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param tradeTimeStart
	 *	@param tradeTimeEnd
	 *	@return List<BankTradeDO>
	 *	@throws DataAccessException
	 */	 
    public List<BankTradeDO> findByCondition(BankTradeDO bankTrade, long limitStart, long pageSize, String sortCol, String sortOrder, Date tradeTimeStart, Date tradeTimeEnd) throws DataAccessException;

	/**
	 *  Query DB table <tt>bank_trade</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from bank_trade where (1 = 1)</tt>
	 *
	 *	@param bankTrade
	 *	@param tradeTimeStart
	 *	@param tradeTimeEnd
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(BankTradeDO bankTrade, Date tradeTimeStart, Date tradeTimeEnd) throws DataAccessException;

}