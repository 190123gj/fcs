/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.fm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.fm.dal.daointerface.ForecastAccountDAO;


// auto generated imports
import com.born.fcs.fm.dal.dataobject.ForecastAccountDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Date;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.fm.dal.daointerface.ForecastAccountDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/forecast_account.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisForecastAccountDAO extends SqlMapClientDaoSupport implements ForecastAccountDAO {
	/**
	 *  Insert one <tt>ForecastAccountDO</tt> object to DB table <tt>forecast_account</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into forecast_account(id,system_form,order_no,project_code,customer_id,customer_name,fee_type,fund_direction,used_dept_id,used_dept_name,forecast_type,forecast_child_type_one,forecast_child_type_two,forecast_start_time,forecast_memo,amount,last_update_time,update_from,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param forecastAccount
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(ForecastAccountDO forecastAccount) throws DataAccessException {
    	if (forecastAccount == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-FORECAST-ACCOUNT-INSERT", forecastAccount);

        return forecastAccount.getId();
    }

	/**
	 *  Update DB table <tt>forecast_account</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update forecast_account set system_form=?, order_no=?, project_code=?, customer_id=?, customer_name=?, fee_type=?, fund_direction=?, used_dept_id=?, used_dept_name=?, forecast_type=?, forecast_child_type_one=?, forecast_child_type_two=?, forecast_start_time=?, forecast_memo=?, amount=?, last_update_time=?, update_from=? where (id = ?)</tt>
	 *
	 *	@param forecastAccount
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(ForecastAccountDO forecastAccount) throws DataAccessException {
    	if (forecastAccount == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-FORECAST-ACCOUNT-UPDATE", forecastAccount);
    }

	/**
	 *  Query DB table <tt>forecast_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from forecast_account where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return ForecastAccountDO
	 *	@throws DataAccessException
	 */	 
    public ForecastAccountDO findById(long id) throws DataAccessException {
        Long param = new Long(id);

        return (ForecastAccountDO) getSqlMapClientTemplate().queryForObject("MS-FORECAST-ACCOUNT-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>forecast_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from forecast_account where ((system_form = ?) AND (order_no = ?))</tt>
	 *
	 *	@param systemForm
	 *	@param orderNo
	 *	@return ForecastAccountDO
	 *	@throws DataAccessException
	 */	 
    public ForecastAccountDO findBysyStemFormAndOrderNo(String systemForm, String orderNo) throws DataAccessException {
        Map param = new HashMap();

        param.put("systemForm", systemForm);
        param.put("orderNo", orderNo);

        return (ForecastAccountDO) getSqlMapClientTemplate().queryForObject("MS-FORECAST-ACCOUNT-FIND-BYSY-STEM-FORM-AND-ORDER-NO", param);

    }

	/**
	 *  Query DB table <tt>forecast_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from forecast_account where ((project_code = ?) AND (fee_type = ?))</tt>
	 *
	 *	@param projectCode
	 *	@param feeType
	 *	@return List<ForecastAccountDO>
	 *	@throws DataAccessException
	 */	 
    public List<ForecastAccountDO> findFutureByProjectCodeAndFeeType(String projectCode, String feeType) throws DataAccessException {
        Map param = new HashMap();

        param.put("projectCode", projectCode);
        param.put("feeType", feeType);

        return getSqlMapClientTemplate().queryForList("MS-FORECAST-ACCOUNT-FIND-FUTURE-BY-PROJECT-CODE-AND-FEE-TYPE", param);

    }

	/**
	 *  Delete records from DB table <tt>forecast_account</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from forecast_account where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException {
        Long param = new Long(id);

        return getSqlMapClientTemplate().delete("MS-FORECAST-ACCOUNT-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>forecast_account</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from forecast_account where (1 = 1)</tt>
	 *
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteAll() throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-FORECAST-ACCOUNT-DELETE-ALL", null);
    }

	/**
	 *  Query DB table <tt>forecast_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from forecast_account where (1 = 1)</tt>
	 *
	 *	@param forecastAccount
	 *	@param forecastTimeStart
	 *	@param forecastTimeEnd
	 *	@param loginUserId
	 *	@param deptIdList
	 *	@param relatedRoleList
	 *	@param limitStart
	 *	@param pageSize
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param pmDbTitle
	 *	@return List<ForecastAccountDO>
	 *	@throws DataAccessException
	 */	 
    public List<ForecastAccountDO> findByCondition(ForecastAccountDO forecastAccount, Date forecastTimeStart, Date forecastTimeEnd, long loginUserId, List deptIdList, List relatedRoleList, long limitStart, long pageSize, String sortCol, String sortOrder, String pmDbTitle) throws DataAccessException {
    	if (forecastAccount == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("forecastAccount", forecastAccount);
        param.put("forecastTimeStart", forecastTimeStart);
        param.put("forecastTimeEnd", forecastTimeEnd);
        param.put("loginUserId", new Long(loginUserId));
        param.put("deptIdList", deptIdList);
        param.put("relatedRoleList", relatedRoleList);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);
        param.put("pmDbTitle", pmDbTitle);

        return getSqlMapClientTemplate().queryForList("MS-FORECAST-ACCOUNT-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>forecast_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from forecast_account where (1 = 1)</tt>
	 *
	 *	@param forecastAccount
	 *	@param forecastTimeStart
	 *	@param forecastTimeEnd
	 *	@param loginUserId
	 *	@param deptIdList
	 *	@param relatedRoleList
	 *	@param pmDbTitle
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(ForecastAccountDO forecastAccount, Date forecastTimeStart, Date forecastTimeEnd, long loginUserId, List deptIdList, List relatedRoleList, String pmDbTitle) throws DataAccessException {
    	if (forecastAccount == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("forecastAccount", forecastAccount);
        param.put("forecastTimeStart", forecastTimeStart);
        param.put("forecastTimeEnd", forecastTimeEnd);
        param.put("loginUserId", new Long(loginUserId));
        param.put("deptIdList", deptIdList);
        param.put("relatedRoleList", relatedRoleList);
        param.put("pmDbTitle", pmDbTitle);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-FORECAST-ACCOUNT-FIND-BY-CONDITION-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}