/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.fm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.fm.dal.daointerface.FormTravelExpenseDAO;


// auto generated imports
import com.born.fcs.fm.dal.dataobject.FormTravelExpenseDO;
import org.springframework.dao.DataAccessException;
import com.born.fcs.fm.dal.queryCondition.TravelExpenseQueryCondition;
import java.util.List;

/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.fm.dal.daointerface.FormTravelExpenseDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/form_travel_expense.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings("unchecked")

public class IbatisFormTravelExpenseDAO extends SqlMapClientDaoSupport implements FormTravelExpenseDAO {
	/**
	 *  Insert one <tt>FormTravelExpenseDO</tt> object to DB table <tt>form_travel_expense</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into form_travel_expense(travel_id,form_id,bill_no,voucher_no,voucher_status,voucher_sync_send_time,voucher_sync_finish_time,voucher_sync_message,expense_dept_id,dept_name,dept_head,is_official_card,application_time,relation_form,travelers,reasons,payee_id,payee,bank,bank_account,pay_bank,pay_bank_account,amount,attachments_num,account_status,wait_pay_time,branch_wait_pay_time,branch_pay_time,branch_pay_status,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param formTravelExpense
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(FormTravelExpenseDO formTravelExpense) throws DataAccessException {
    	if (formTravelExpense == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-FORM-TRAVEL-EXPENSE-INSERT", formTravelExpense);

        return formTravelExpense.getTravelId();
    }

	/**
	 *  Update DB table <tt>form_travel_expense</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update form_travel_expense set form_id=?, bill_no=?, voucher_no=?, voucher_status=?, voucher_sync_send_time=?, voucher_sync_finish_time=?, voucher_sync_message=?, expense_dept_id=?, dept_name=?, dept_head=?, is_official_card=?, application_time=?, relation_form=?, travelers=?, reasons=?, payee_id=?, payee=?, bank=?, bank_account=?, pay_bank=?, pay_bank_account=?, amount=?, attachments_num=?, account_status=?, wait_pay_time=?, branch_wait_pay_time=?, branch_pay_time=?, branch_pay_status=? where (travel_id = ?)</tt>
	 *
	 *	@param formTravelExpense
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(FormTravelExpenseDO formTravelExpense) throws DataAccessException {
    	if (formTravelExpense == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-FORM-TRAVEL-EXPENSE-UPDATE", formTravelExpense);
    }

	/**
	 *  Query DB table <tt>form_travel_expense</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from form_travel_expense where (travel_id = ?)</tt>
	 *
	 *	@param travelId
	 *	@return FormTravelExpenseDO
	 *	@throws DataAccessException
	 */	 
    public FormTravelExpenseDO findById(long travelId) throws DataAccessException {
        Long param = new Long(travelId);

        return (FormTravelExpenseDO) getSqlMapClientTemplate().queryForObject("MS-FORM-TRAVEL-EXPENSE-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>form_travel_expense</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from form_travel_expense where (travel_id = (select max(travel_id) from form_travel_expense))</tt>
	 *
	 *	@return FormTravelExpenseDO
	 *	@throws DataAccessException
	 */	 
    public FormTravelExpenseDO findByUp() throws DataAccessException {

        return (FormTravelExpenseDO) getSqlMapClientTemplate().queryForObject("MS-FORM-TRAVEL-EXPENSE-FIND-BY-UP", null);

    }

	/**
	 *  Query DB table <tt>form_travel_expense</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from form_travel_expense where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return FormTravelExpenseDO
	 *	@throws DataAccessException
	 */	 
    public FormTravelExpenseDO findByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return (FormTravelExpenseDO) getSqlMapClientTemplate().queryForObject("MS-FORM-TRAVEL-EXPENSE-FIND-BY-FORM-ID", param);

    }

	/**
	 *  Query DB table <tt>form_travel_expense</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from form_travel_expense where (bill_no = ?)</tt>
	 *
	 *	@param billNo
	 *	@return FormTravelExpenseDO
	 *	@throws DataAccessException
	 */	 
    public FormTravelExpenseDO findByBillNo(String billNo) throws DataAccessException {

        return (FormTravelExpenseDO) getSqlMapClientTemplate().queryForObject("MS-FORM-TRAVEL-EXPENSE-FIND-BY-BILL-NO", billNo);

    }

	/**
	 *  Delete records from DB table <tt>form_travel_expense</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from form_travel_expense where (travel_id = ?)</tt>
	 *
	 *	@param travelId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long travelId) throws DataAccessException {
        Long param = new Long(travelId);

        return getSqlMapClientTemplate().delete("MS-FORM-TRAVEL-EXPENSE-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>form_travel_expense</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select e.* from form_travel_expense e, form f where (e.form_id = f.form_id)</tt>
	 *
	 *	@param condition
	 *	@return List<FormTravelExpenseDO>
	 *	@throws DataAccessException
	 */	 
    public List<FormTravelExpenseDO> findByCondition(TravelExpenseQueryCondition condition) throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-FORM-TRAVEL-EXPENSE-FIND-BY-CONDITION", condition);

    }

	/**
	 *  Query DB table <tt>form_travel_expense</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from form_travel_expense e, form f where (e.form_id = f.form_id)</tt>
	 *
	 *	@param condition
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(TravelExpenseQueryCondition condition) throws DataAccessException {

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-FORM-TRAVEL-EXPENSE-FIND-BY-CONDITION-COUNT", condition);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}