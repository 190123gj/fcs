/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.fm.dal.daointerface;

// auto generated imports
import com.born.fcs.fm.dal.dataobject.BankMessageDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>bank_message</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/bank_message.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface BankMessageDAO {
	/**
	 *  Insert one <tt>BankMessageDO</tt> object to DB table <tt>bank_message</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into bank_message(bank_id,bank_code,bank_name,account_type,account_no,default_company_account,default_personal_account,deposit_account,account_name,at_code,at_name,amount,cash_deposit_code,status,dept_id,dept_name,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param bankMessage
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(BankMessageDO bankMessage) throws DataAccessException;

	/**
	 *  Update DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bank_message set bank_code=?, bank_name=?, account_type=?, account_no=?, default_company_account=?, default_personal_account=?, deposit_account=?, account_name=?, at_code=?, at_name=?, amount=?, cash_deposit_code=?, status=?, dept_id=?, dept_name=? where (bank_id = ?)</tt>
	 *
	 *	@param bankMessage
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(BankMessageDO bankMessage) throws DataAccessException;

	/**
	 *  Update DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bank_message set bank_code=?, bank_name=?, account_type=?, default_company_account=?, default_personal_account=?, deposit_account=?, account_name=?, at_code=?, at_name=?, amount=?, cash_deposit_code=?, status=?, dept_id=?, dept_name=? where (account_no = ?)</tt>
	 *
	 *	@param bankMessage
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateByAccount(BankMessageDO bankMessage) throws DataAccessException;

	/**
	 *  Update DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bank_message set status=? where (bank_id = ?)</tt>
	 *
	 *	@param status
	 *	@param bankId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateStatus(String status, long bankId) throws DataAccessException;

	/**
	 *  Update DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bank_message set status=? where (account_no = ?)</tt>
	 *
	 *	@param status
	 *	@param accountNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateStatusByAccount(String status, String accountNo) throws DataAccessException;

	/**
	 *  Update DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bank_message set default_company_account=? where (dept_id = ?)</tt>
	 *
	 *	@param defaultCompanyAccount
	 *	@param deptId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateDefaultCompanyAccountByDeptId(String defaultCompanyAccount, long deptId) throws DataAccessException;

	/**
	 *  Update DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bank_message set default_personal_account=? where (dept_id = ?)</tt>
	 *
	 *	@param defaultPersonalAccount
	 *	@param deptId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateDefaultPersonalAccountByDeptId(String defaultPersonalAccount, long deptId) throws DataAccessException;

	/**
	 *  Update DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bank_message set default_company_account=? where (1 = 1)</tt>
	 *
	 *	@param defaultCompanyAccount
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateDefaultCompanyAccount(String defaultCompanyAccount) throws DataAccessException;

	/**
	 *  Update DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bank_message set default_personal_account=? where (1 = 1)</tt>
	 *
	 *	@param defaultPersonalAccount
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateDefaultPersonalAccount(String defaultPersonalAccount) throws DataAccessException;

	/**
	 *  Query DB table <tt>bank_message</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from bank_message where (bank_id = ?)</tt>
	 *
	 *	@param bankId
	 *	@return BankMessageDO
	 *	@throws DataAccessException
	 */	 
    public BankMessageDO findById(long bankId) throws DataAccessException;

	/**
	 *  Query DB table <tt>bank_message</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from bank_message where (account_no = ?)</tt>
	 *
	 *	@param accountNo
	 *	@return BankMessageDO
	 *	@throws DataAccessException
	 */	 
    public BankMessageDO findByAccount(String accountNo) throws DataAccessException;

	/**
	 *  Query DB table <tt>bank_message</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from bank_message where (account_no = ?) for update</tt>
	 *
	 *	@param accountNo
	 *	@return BankMessageDO
	 *	@throws DataAccessException
	 */	 
    public BankMessageDO findByAccountForUpdate(String accountNo) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from bank_message where (bank_id = ?)</tt>
	 *
	 *	@param bankId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long bankId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>bank_message</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from bank_message where (account_no = ?)</tt>
	 *
	 *	@param accountNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByAccount(String accountNo) throws DataAccessException;

	/**
	 *  Query DB table <tt>bank_message</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from bank_message where (1 = 1)</tt>
	 *
	 *	@param bankMessage
	 *	@param deptIdList
	 *	@param limitStart
	 *	@param pageSize
	 *	@param sortCol
	 *	@param sortOrder
	 *	@return List<BankMessageDO>
	 *	@throws DataAccessException
	 */	 
    public List<BankMessageDO> findByCondition(BankMessageDO bankMessage, List deptIdList, long limitStart, long pageSize, String sortCol, String sortOrder) throws DataAccessException;

	/**
	 *  Query DB table <tt>bank_message</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from bank_message where (1 = 1)</tt>
	 *
	 *	@param bankMessage
	 *	@param deptIdList
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(BankMessageDO bankMessage, List deptIdList) throws DataAccessException;

}