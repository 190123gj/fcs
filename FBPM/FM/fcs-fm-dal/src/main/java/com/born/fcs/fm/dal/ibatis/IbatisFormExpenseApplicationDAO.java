/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.fcs.fm.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.fcs.fm.dal.daointerface.FormExpenseApplicationDAO;


// auto generated imports
import com.born.fcs.fm.dal.dataobject.FormExpenseApplicationDO;
import org.springframework.dao.DataAccessException;
import com.born.fcs.fm.dal.queryCondition.ExpenseApplyQueryCondition;
import java.util.List;

/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.fm.dal.daointerface.FormExpenseApplicationDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/form_expense_application.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings("unchecked")

public class IbatisFormExpenseApplicationDAO extends SqlMapClientDaoSupport implements FormExpenseApplicationDAO {
	/**
	 *  Insert one <tt>FormExpenseApplicationDO</tt> object to DB table <tt>form_expense_application</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into form_expense_application(expense_application_id,form_id,bill_no,voucher_no,voucher_status,voucher_sync_send_time,voucher_sync_finish_time,voucher_sync_message,expense_dept_id,dept_name,dept_head,reimburse_reason,is_official_card,application_time,relation_form,agent_id,agent,direction,payee_id,payee,bank_id,bank,bank_account,amount,is_reverse,reamount,cxids,pay_bank,pay_bank_account,shlc,attachments_num,account_status,wait_pay_time,branch_wait_pay_time,branch_pay_time,branch_pay_status,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param formExpenseApplication
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(FormExpenseApplicationDO formExpenseApplication) throws DataAccessException {
    	if (formExpenseApplication == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-FORM-EXPENSE-APPLICATION-INSERT", formExpenseApplication);

        return formExpenseApplication.getExpenseApplicationId();
    }

	/**
	 *  Update DB table <tt>form_expense_application</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update form_expense_application set form_id=?, bill_no=?, voucher_no=?, voucher_status=?, voucher_sync_send_time=?, voucher_sync_finish_time=?, voucher_sync_message=?, expense_dept_id=?, dept_name=?, dept_head=?, reimburse_reason=?, is_official_card=?, application_time=?, relation_form=?, agent_id=?, agent=?, direction=?, payee_id=?, payee=?, bank_id=?, bank=?, bank_account=?, amount=?, is_reverse=?, reamount=?, cxids=?, pay_bank=?, pay_bank_account=?, shlc=?, attachments_num=?, account_status=?, wait_pay_time=?, branch_wait_pay_time=?, branch_pay_time=?, branch_pay_status=? where (expense_application_id = ?)</tt>
	 *
	 *	@param formExpenseApplication
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(FormExpenseApplicationDO formExpenseApplication) throws DataAccessException {
    	if (formExpenseApplication == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-FORM-EXPENSE-APPLICATION-UPDATE", formExpenseApplication);
    }

	/**
	 *  Query DB table <tt>form_expense_application</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from form_expense_application where (expense_application_id = ?)</tt>
	 *
	 *	@param expenseApplicationId
	 *	@return FormExpenseApplicationDO
	 *	@throws DataAccessException
	 */	 
    public FormExpenseApplicationDO findById(long expenseApplicationId) throws DataAccessException {
        Long param = new Long(expenseApplicationId);

        return (FormExpenseApplicationDO) getSqlMapClientTemplate().queryForObject("MS-FORM-EXPENSE-APPLICATION-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>form_expense_application</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from form_expense_application where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return FormExpenseApplicationDO
	 *	@throws DataAccessException
	 */	 
    public FormExpenseApplicationDO findByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return (FormExpenseApplicationDO) getSqlMapClientTemplate().queryForObject("MS-FORM-EXPENSE-APPLICATION-FIND-BY-FORM-ID", param);

    }

	/**
	 *  Query DB table <tt>form_expense_application</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from form_expense_application where (bill_no = ?)</tt>
	 *
	 *	@param billNo
	 *	@return FormExpenseApplicationDO
	 *	@throws DataAccessException
	 */	 
    public FormExpenseApplicationDO findByBillNo(String billNo) throws DataAccessException {

        return (FormExpenseApplicationDO) getSqlMapClientTemplate().queryForObject("MS-FORM-EXPENSE-APPLICATION-FIND-BY-BILL-NO", billNo);

    }

	/**
	 *  Delete records from DB table <tt>form_expense_application</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from form_expense_application where (expense_application_id = ?)</tt>
	 *
	 *	@param expenseApplicationId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long expenseApplicationId) throws DataAccessException {
        Long param = new Long(expenseApplicationId);

        return getSqlMapClientTemplate().delete("MS-FORM-EXPENSE-APPLICATION-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>form_expense_application</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select e.* from form_expense_application e, form f where (e.form_id = f.form_id)</tt>
	 *
	 *	@param condition
	 *	@return List<FormExpenseApplicationDO>
	 *	@throws DataAccessException
	 */	 
    public List<FormExpenseApplicationDO> findByCondition(ExpenseApplyQueryCondition condition) throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-FORM-EXPENSE-APPLICATION-FIND-BY-CONDITION", condition);

    }

	/**
	 *  Query DB table <tt>form_expense_application</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from form_expense_application e, form f where (e.form_id = f.form_id)</tt>
	 *
	 *	@param condition
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(ExpenseApplyQueryCondition condition) throws DataAccessException {

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-FORM-EXPENSE-APPLICATION-FIND-BY-CONDITION-COUNT", condition);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}