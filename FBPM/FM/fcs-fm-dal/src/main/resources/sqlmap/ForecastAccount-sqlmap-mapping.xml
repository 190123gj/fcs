<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>rent</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>specialmer-dalgen</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author peigen                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="specialmer">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table forecast_account -->
    <resultMap id="RM-FORECAST-ACCOUNT" class="com.born.fcs.fm.dal.dataobject.ForecastAccountDO">
        <result property="id" column="id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="systemForm" column="system_form" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="orderNo" column="order_no" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="projectCode" column="project_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="customerId" column="customer_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="customerName" column="customer_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="feeType" column="fee_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="fundDirection" column="fund_direction" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="usedDeptId" column="used_dept_id" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="usedDeptName" column="used_dept_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="forecastType" column="forecast_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="forecastChildTypeOne" column="forecast_child_type_one" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="forecastChildTypeTwo" column="forecast_child_type_two" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="forecastStartTime" column="forecast_start_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="forecastMemo" column="forecast_memo" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="amount" column="amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="DECIMAL"/>
        <result property="lastUpdateTime" column="last_update_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="updateFrom" column="update_from" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="rawAddTime" column="raw_add_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="rawUpdateTime" column="raw_update_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisForecastAccountDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisForecastAccountDAO.insert -->
    <insert id="MS-FORECAST-ACCOUNT-INSERT">
    <![CDATA[
        insert /*MS-YRD-FORECAST-ACCOUNT-INSERT*/ into forecast_account(id,system_form,order_no,project_code,customer_id,customer_name,fee_type,fund_direction,used_dept_id,used_dept_name,forecast_type,forecast_child_type_one,forecast_child_type_two,forecast_start_time,forecast_memo,amount,last_update_time,update_from,raw_add_time) values (#id#, #systemForm#, #orderNo#, #projectCode#, #customerId#, #customerName#, #feeType#, #fundDirection#, #usedDeptId#, #usedDeptName#, #forecastType#, #forecastChildTypeOne#, #forecastChildTypeTwo#, #forecastStartTime#, #forecastMemo#, #amount.cent#, #lastUpdateTime#, #updateFrom#, #rawAddTime#)
    ]]>
    </insert>

    <!-- mapped statement for IbatisForecastAccountDAO.update -->
    <update id="MS-FORECAST-ACCOUNT-UPDATE">
    <![CDATA[
        update /*MS-YRD-FORECAST-ACCOUNT-UPDATE*/ forecast_account set system_form=#systemForm#, order_no=#orderNo#, project_code=#projectCode#, customer_id=#customerId#, customer_name=#customerName#, fee_type=#feeType#, fund_direction=#fundDirection#, used_dept_id=#usedDeptId#, used_dept_name=#usedDeptName#, forecast_type=#forecastType#, forecast_child_type_one=#forecastChildTypeOne#, forecast_child_type_two=#forecastChildTypeTwo#, forecast_start_time=#forecastStartTime#, forecast_memo=#forecastMemo#, amount=#amount.cent#, last_update_time=#lastUpdateTime#, update_from=#updateFrom# where (id = #id#)
    ]]>
    </update>

    <!-- mapped statement for IbatisForecastAccountDAO.findById -->
    <select id="MS-FORECAST-ACCOUNT-FIND-BY-ID" resultMap="RM-FORECAST-ACCOUNT">
    <![CDATA[
        select /*MS-YRD-FORECAST-ACCOUNT-FIND-BY-ID*/ * from forecast_account where (id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisForecastAccountDAO.findBysyStemFormAndOrderNo -->
    <select id="MS-FORECAST-ACCOUNT-FIND-BYSY-STEM-FORM-AND-ORDER-NO" resultMap="RM-FORECAST-ACCOUNT">
    <![CDATA[
        select /*MS-YRD-FORECAST-ACCOUNT-FIND-BYSY-STEM-FORM-AND-ORDER-NO*/ * from forecast_account where ((system_form = #systemForm#) AND (order_no = #orderNo#))
    ]]>
    </select>

    <!-- mapped statement for IbatisForecastAccountDAO.findFutureByProjectCodeAndFeeType -->
    <select id="MS-FORECAST-ACCOUNT-FIND-FUTURE-BY-PROJECT-CODE-AND-FEE-TYPE" resultMap="RM-FORECAST-ACCOUNT">
        SELECT /*MS-YRD-FORECAST-ACCOUNT-FIND-FUTURE-BY-PROJECT-CODE-AND-FEE-TYPE*/ * FROM forecast_account WHERE  project_code=#projectCode# AND fee_type=#feeType# AND forecast_start_time >= STR_TO_DATE(DATE_FORMAT(SYSDATE(),'%Y-%m-%d'),'%Y-%m-%d %H:%m:%s') ORDER BY forecast_start_time ASC
    </select>

    <!-- mapped statement for IbatisForecastAccountDAO.deleteById -->
    <delete id="MS-FORECAST-ACCOUNT-DELETE-BY-ID">
    <![CDATA[
        delete /*MS-YRD-FORECAST-ACCOUNT-DELETE-BY-ID*/ from forecast_account where (id = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisForecastAccountDAO.deleteAll -->
    <delete id="MS-FORECAST-ACCOUNT-DELETE-ALL">
    <![CDATA[
        delete /*MS-YRD-FORECAST-ACCOUNT-DELETE-ALL*/ from forecast_account where (1 = 1)
    ]]>
    </delete>

    <!-- mapped statement for IbatisForecastAccountDAO.findByCondition -->
    <select id="MS-FORECAST-ACCOUNT-FIND-BY-CONDITION" resultMap="RM-FORECAST-ACCOUNT">
        SELECT /*MS-YRD-FORECAST-ACCOUNT-FIND-BY-CONDITION*/ * FROM forecast_account p 
		      <isNotEmpty property="deptIdList">
		            JOIN (SELECT COUNT(*) rnum,project_code FROM $pmDbTitle$.project_related_user
		            	   WHERE is_del = 'NO' AND 
		            	   		(dept_id in 
		            	   		<iterate property="deptIdList" open="(" close=")" conjunction=",">
									#deptIdList[]#
								</iterate>
						 		<isGreaterThan property="loginUserId"  compareValue="0" prepend=" OR ">
				            	    (user_id = #loginUserId# 
							      	<isNotEmpty property="relatedRoleList" prepend=" and ">
							      		user_type in 
				            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
											#relatedRoleList[]#
										</iterate>
							      	</isNotEmpty>)  	            	   
							    </isGreaterThan>)
						   GROUP BY project_code) rl
	    			  ON rl.project_code = p.project_code AND rl.rnum > 0
		      </isNotEmpty>
		      <isEmpty property="deptIdList">    
		 		  <isGreaterThan property="loginUserId"  compareValue="0">
			            JOIN (SELECT COUNT(*) rnum,project_code FROM $pmDbTitle$.project_related_user 
			            	   WHERE user_id = #loginUserId# AND is_del = 'NO'
						      	<isNotEmpty property="relatedRoleList" prepend=" and ">
						      		user_type in 
			            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
										#relatedRoleList[]#
									</iterate>
						      	</isNotEmpty>  	            	   
			            	   GROUP BY project_code) rl
		    			  ON rl.project_code = p.project_code AND rl.rnum > 0
			      </isGreaterThan>
		      </isEmpty>   	
	      	 WHERE 1=1	         
	        <dynamic>
	            <isNotEmpty property="forecastAccount.systemForm" prepend=" and ">
	              	system_form = #forecastAccount.systemForm#
	            </isNotEmpty>
	            <isNotEmpty property="forecastAccount.orderNo" prepend=" and ">
	              	order_no = #forecastAccount.orderNo#
	            </isNotEmpty>
	            <isNotEmpty property="forecastAccount.usedDeptName" prepend=" and ">
	              	used_dept_name like concat('%',#forecastAccount.usedDeptName#,'%')
	            </isNotEmpty>
	            <isNotEmpty property="forecastAccount.projectCode" prepend=" and ">
	              	project_code like concat('%',#forecastAccount.projectCode#,'%')
	            </isNotEmpty>
	            <isNotEmpty property="forecastAccount.customerName" prepend=" and ">
	              	customer_name like concat('%',#forecastAccount.customerName#,'%')
	            </isNotEmpty>
	            <isNotEmpty property="forecastAccount.fundDirection" prepend=" and ">
	              	fund_direction like concat('%',#forecastAccount.fundDirection#,'%')
	            </isNotEmpty>
	           <isNotEmpty property="forecastAccount.forecastMemo" prepend=" and ">
	              	forecast_memo like concat('%',#forecastAccount.forecastMemo#,'%')
	           </isNotEmpty>	            
                <isNotEmpty property="forecastTimeStart" prepend=" and ">
	               <![CDATA[ forecast_start_time >= #forecastTimeStart#]]>
                </isNotEmpty>                             				
 			    <isNotEmpty property="forecastTimeEnd" prepend=" and ">
	               <![CDATA[ forecast_start_time <= #forecastTimeEnd#]]>
                </isNotEmpty>  
	        </dynamic>
	         <isNotEmpty property="sortCol" prepend=" order by ">
	             $sortCol$
	                <isNotEmpty property="sortOrder">
              	 		$sortOrder$
             		</isNotEmpty>
	         </isNotEmpty>
            LIMIT #limitStart#,#pageSize#;
    </select>

    <!-- mapped statement for IbatisForecastAccountDAO.findByConditionCount -->
    <select id="MS-FORECAST-ACCOUNT-FIND-BY-CONDITION-COUNT" resultClass="long">
        SELECT /*MS-YRD-FORECAST-ACCOUNT-FIND-BY-CONDITION-COUNT*/  count(*)  FROM forecast_account p
		      <isNotEmpty property="deptIdList">
		            JOIN (SELECT COUNT(*) rnum,project_code FROM $pmDbTitle$.project_related_user
		            	   WHERE is_del = 'NO' AND 
		            	   		(dept_id in 
		            	   		<iterate property="deptIdList" open="(" close=")" conjunction=",">
									#deptIdList[]#
								</iterate>
						 		<isGreaterThan property="loginUserId"  compareValue="0" prepend=" OR ">
				            	    (user_id = #loginUserId# 
							      	<isNotEmpty property="relatedRoleList" prepend=" and ">
							      		user_type in 
				            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
											#relatedRoleList[]#
										</iterate>
							      	</isNotEmpty>)  	            	   
							    </isGreaterThan>)
						   GROUP BY project_code) rl
	    			  ON rl.project_code = p.project_code AND rl.rnum > 0
		      </isNotEmpty>
		      <isEmpty property="deptIdList">    
		 		  <isGreaterThan property="loginUserId"  compareValue="0">
			            JOIN (SELECT COUNT(*) rnum,project_code FROM $pmDbTitle$.project_related_user 
			            	   WHERE user_id = #loginUserId# AND is_del = 'NO'
						      	<isNotEmpty property="relatedRoleList" prepend=" and ">
						      		user_type in 
			            	   		<iterate property="relatedRoleList" open="(" close=")" conjunction=",">
										#relatedRoleList[]#
									</iterate>
						      	</isNotEmpty>  	            	   
			            	   GROUP BY project_code) rl
		    			  ON rl.project_code = p.project_code AND rl.rnum > 0
			      </isGreaterThan>
		      </isEmpty> 	         
	         WHERE 1=1 
	        <dynamic>
	           <isNotEmpty property="forecastAccount.systemForm" prepend=" and ">
	              	system_form = #forecastAccount.systemForm#
	           </isNotEmpty>
	           <isNotEmpty property="forecastAccount.orderNo" prepend=" and ">
	              	order_no = #forecastAccount.orderNo#
	           </isNotEmpty>
	           <isNotEmpty property="forecastAccount.usedDeptName" prepend=" and ">
	              	used_dept_name like concat('%',#forecastAccount.usedDeptName#,'%')
	           </isNotEmpty>
	           <isNotEmpty property="forecastAccount.fundDirection" prepend=" and ">
	              	fund_direction like concat('%',#forecastAccount.fundDirection#,'%')
	           </isNotEmpty>
	           <isNotEmpty property="forecastAccount.forecastMemo" prepend=" and ">
	              	forecast_memo like concat('%',#forecastAccount.forecastMemo#,'%')
	           </isNotEmpty>	           
	            <isNotEmpty property="forecastAccount.projectCode" prepend=" and ">
	              	project_code like concat('%',#forecastAccount.projectCode#,'%')
	            </isNotEmpty>
	            <isNotEmpty property="forecastAccount.customerName" prepend=" and ">
	              	customer_name like concat('%',#forecastAccount.customerName#,'%')
	            </isNotEmpty>	           
               <isNotEmpty property="forecastTimeStart" prepend=" and ">
	               <![CDATA[ forecast_start_time >= #forecastTimeStart#]]>
               </isNotEmpty>                             				
 			   <isNotEmpty property="forecastTimeEnd" prepend=" and ">
	               <![CDATA[ forecast_start_time <= #forecastTimeEnd#]]>
               </isNotEmpty>          
	        </dynamic>
    </select>

</sqlMap>
